// ------------------------------------------------------------
// Because sometimes, things get caught in map geometry.
// ------------------------------------------------------------
class SectorDamageCounter:IdleDummy{}
class doordestroyer:hdactor{
	default{
		+solid +nogravity +dontgib +ghost
		+actlikebridge
		height 0.1;radius 0.1;
	}
	vector2 v1pos;
	vector2 v2pos;
	vector2 vfrac;
	double llength;
	int llit;
	double bottom;
	double top;
	override void postbeginplay(){
		super.postbeginplay();
		vector2 vvv=(v2pos-v1pos);
		llit=max(1,llength/10); //see chunkspeed
		vfrac=vvv/llit;
	}
	override bool cancollidewith(actor other,bool passive){
		return false;
	}
	enum doorbusternums{
		SECTORDAMAGE_TID=4440,
	}
	void DoorChunk(class<actor>chunktype,int numpercolumn=1,double chunkspeed=10){
		chunkspeed*=0.1; //see vfrac
		for(int i=0;i<llit;i++){
			for(int j=0;j<numpercolumn;j++){
				actor aaa=spawn(chunktype,(
					(v1pos+vfrac*i)+(frandom(-3,3),frandom(-3,3)),
					frandom(bottom,top)
				));
				aaa.vel.xy=rotatevector(
						vfrac,randompick(90,-90)+frandom(-60,60)
					)*chunkspeed*frandom(0.4,1.4);
				aaa.vel.z=frandom(-6,12);
			}
			spawn("HDSmoke",(
				(v1pos+vfrac*i),
				bottom+frandom(1,32)
			));
		}
	}
	states{
	spawn:
		TNT1 A 0;
		TNT1 A 0 DoorChunk("HDExplosion",1,3);
		TNT1 A 0 DoorChunk("HDSmoke",5,3);
		TNT1 AAA 1 DoorChunk("HugeWallChunk",20,15);
		TNT1 A 0 DoorChunk("HDExplosion",1,3);
		TNT1 A 0 DoorChunk("HDSmoke",5,2);
		TNT1 A 0 DoorChunk("HDSmokeChunk",random(0,3),7);
		TNT1 AAAA 1 DoorChunk("HDSmoke",5,1);
		TNT1 A 0 DoorChunk("HDSmoke",5,1);
		TNT1 A 0 DoorChunk("HDSmokeChunk",random(0,3),7);
		TNT1 AAAA 2 DoorChunk("HugeWallChunk",20);
		TNT1 A -1;
		stop;
	}
	static const int doorspecials[]={
		//from https://github.com/coelckers/gzdoom/blob/master/src/p_lnspec.cpp#L3432
		//only affects raising doors, not lowering platforms designed to function as doors

		//these are all arg0
		10,11,12,13,14,
		105,106,194,195,198,
		202,
		249,252,262,263,265,266,268,274
	};
	static bool checkdoorspecial(int linespecial){
		int dlsl=doordestroyer.doorspecials.size();
		for(int i=0;i<dlsl;i++){
			if(linespecial==doordestroyer.doorspecials[i]){
				return true;
				break;
			}
		}
		return false;
	}
	static bool destroydoor(actor caller,double maxwidth=140,double maxdepth=32,double range=0){
		if(hd_nodoorbuster)return false;
		if(!range)range=max(4,caller.radius*2);
		flinetracedata dlt;
		caller.linetrace(
			caller.angle,range,0,
			flags:TRF_THRUACTORS,
			offsetz:caller.height*0.5,data:dlt
		);
		if(!dlt.hitline)return false;
		sector othersector=hdmath.oppositesector(dlt.hitline,dlt.hitsector);
		if(!othersector)return false;

		//the first point within the othersector is used a few times
		vector2 justoverthere=dlt.hitlocation.xy+dlt.hitdir.xy;

		//figure out if it hit above or below
		bool floornotdoor=othersector.floorplane.zatpoint(justoverthere)>dlt.hitlocation.z;
		if(
			!floornotdoor
			&&othersector.ceilingplane.zatpoint(justoverthere)>=dlt.hitlocation.z
		)return false;

		//see if there are at least 2 2-sided lines
		int num2sided=0;
		for(int i=0;i<othersector.lines.size();i++){
			if(othersector.lines[i].sidedef[1]){
				num2sided++;
			}
		}if(num2sided<2)return false;

		//see how wide the door is
		vector2 doorline=dlt.hitline.v1.p-dlt.hitline.v2.p;
		maxwidth*=frandom(0.4,1.8);
		if(doorline dot doorline > maxwidth*maxwidth)return false;

		bool isdoor=false;

		//see how thick the door is
		vector2 depthcheck=dlt.hitdir.xy*maxdepth*frandom(0.8,1.2);
		isdoor=(othersector!=
			sector.pointinsector(dlt.hitlocation.xy+depthcheck)
		);
		if(!isdoor){
			if(othersector!=sector.pointinsector(dlt.hitlocation.xy+depthcheck*frandom(0,2))){
				//add a damage point
				actor surprise=spawn("SectorDamageCounter",(justoverthere,dlt.hitlocation.z));
				int checktid=SECTORDAMAGE_TID+othersector.index();
				surprise.changetid(checktid);

				//count how many
				actoriterator buttesecs=actoriterator.create(checktid,"SectorDamageCounter");
				actor buttesec=null;
				array<actor>buttecracked;
				while(buttesec=buttesecs.next()){
					if(buttesec.cursector==othersector)buttecracked.push(buttesec);
				}
				if(buttecracked.size()>random(5,7)){
					isdoor=true;
					for(int i=0;i<buttecracked.size();i++){
						buttecracked[i].destroy();
					}
				}
			}
		}
		if(!isdoor)return false;

/*
		//see if a door special applies
		//currently unused - it's a "door" destroyer without limitation
		isdoor=checkdoorspecial(dlt.hitline.special);
		if(!isdoor){
			//find the sector tag
			int brutalforcery=0;
			bool gotit=false;
			for(brutalforcery=0;brutalforcery<100;brutalforcery++){
				sectortagiterator sss=
					sectortagiterator.create(brutalforcery);
				int ssss=sss.next();
				while(!gotit&&ssss>-1){
					if(level.sectors[ssss]==othersector)gotit=true;
					ssss=sss.next();
				}
				if(gotit)break;
			}
			if(brutalforcery>0){
				lineiditerator lll=lineiditerator.create(brutalforcery);
				int l=0;
				while(!isdoor&&l>-1){
					isdoor=checkdoorspecial(level.lines[l].special);
					l=lll.next();
				}
			}
		}
		if(!isdoor)return false;
*/

		//blow that shit up
		double doorwidth=doorline.length();
		double holeheight=clamp(frandom(0.01,0.02)*maxdepth*maxwidth,32,doorwidth+frandom(-12,12));
		double blockpoint;
		othersector.flags|=sector.SECF_SILENTMOVE;
		if(floornotdoor){
			double lowestsurrounding;vertex garbage;
			[lowestsurrounding,garbage]=othersector.findlowestfloorsurrounding();
			double justoverthereheight=othersector.floorplane.zatpoint(justoverthere);
			blockpoint=min(
				max(
					justoverthereheight-holeheight,
					lowestsurrounding-frandom(3,6)
				),
				justoverthereheight-32
			);
			holeheight=justoverthereheight-blockpoint;
			othersector.MoveFloor(holeheight,holeheight,0,-1,false,true);
		}else{
			double justoverthereheight=othersector.ceilingplane.zatpoint(justoverthere);
			blockpoint=justoverthereheight+holeheight;
			othersector.MoveCeiling(holeheight,blockpoint,0,1,false);
		}

		//not intended by the mapper
		textureid shwal=texman.checkfortexture("ASHWALL2",texman.type_any);
		if(int(shwal)<1)
			shwal=texman.checkfortexture("ASHWALL",texman.type_any);
		othersector.settexture(floornotdoor?sector.floor:sector.ceiling,shwal,true);
		for(int i=0;i<othersector.lines.size();i++){
			if(floornotdoor&&othersector.lines[i].sidedef[1])
				othersector.lines[i].flags|=line.ML_DONTPEGBOTTOM;
				else othersector.lines[i].flags|=line.ML_DONTPEGTOP;

			othersector.lines[i].special=0;
			for(int j=0;j<2;j++){
				side sdd=othersector.lines[i].sidedef[j];
				if(sdd){
					int notmid=floornotdoor?side.bottom:side.top;
					if(int(sdd.gettexture(notmid))<1)sdd.settexture(notmid,shwal);
					if(!floornotdoor){
						sdd.settextureyoffset(side.mid,
							sdd.gettextureyoffset(side.mid)-holeheight
						);
						sdd.settextureyoffset(side.top,
							sdd.gettextureyoffset(side.top)-holeheight
						);
					}else{
//						othersector.lines[i].flags|=line.ML_DONTPEGBOTTOM;
						sdd.settextureyoffset(side.bottom,
							sdd.gettextureyoffset(side.bottom)+holeheight
						);
					}
				}
			}
		}

		//fancy effects
		let db=doordestroyer(spawn("doordestroyer",(
			(justoverthere+dlt.hitdir.xy),blockpoint
		)));
		db.setz(blockpoint);
		db.v1pos=dlt.hitline.v1.p;
		db.v2pos=dlt.hitline.v2.p;
		db.target=caller.target;
		if(floornotdoor){
			db.top=db.floorz+holeheight;
			db.bottom=db.floorz;
		}else{
			db.bottom=blockpoint-holeheight;
			db.top=blockpoint;
		}

		db.llength=doorwidth;
		hdactor.HDBlast(caller,
			pushradius:doorwidth,pushamount:24,
			fragradius:doorwidth,fragdamage:doorwidth,
			immolateradius:doorwidth,
			immolateamount:random(10,30),
			immolatechance:12,
			gibradius:doorwidth*0.4,gibamount:10
		);
		return true;
	}
}
class doorball:doomimpball{
	states{
	death:
		BAL1 C 0{if(doordestroyer.destroydoor(self))A_Log("Ding dong, motherfucker!");}
		goto super::death;
	}
}
