// ------------------------------------------------------------
// Pistol
// ------------------------------------------------------------
class HDPistol:HDWeapon{
	int weaponstatus2[8]; //no I'm NOT letting you carry an indefinite # of pistols, shut up
	default{
		scale 0.63;
		weapon.selectionorder 50;
		weapon.slotnumber 2;
		weapon.kickback 30;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.6;
		weapon.bobspeed 2.5;
		weapon.bobstyle "normal";
		obituary "%o got capped by %k's pea shooter.";
		inventory.pickupmessage "You got the pistol!";
		hdweapon.nicename "Pistol";
		hdweapon.fitsinbackpack true;
		hdweapon.refid HDLD_PISTOL;
		inventory.maxamount 2;
	}
	override void actualpickup(actor other){
		//if owner has no first, attach normally
		let expi=HDPistol(other.findinventory("HDPistol"));
		if(!expi||expi.amount>=expi.maxamount){
			super.actualpickup(other);
			return;
		}

		//add to second pistol
		for(int i=0;i<8;i++){
			expi.weaponstatus2[i]=weaponstatus[i];
		}
		expi.amount++;

		//select
		if(
			other.player
			&&!(cvar.getcvar("neverswitchonpickup",other.player).getbool())
			&&other.player.readyweapon!=expi
		){
			expi.swappistols();
			other.A_SelectWeapon("HDPistol");
		}
		destroy();
	}
	override double weaponbulk(){
		int mgg=weaponstatus[PISS_MAG];
		return 30+(mgg<0?0:(ENC_9MAG_LOADED+mgg*ENC_9_LOADED));
	}
	override void postbeginplay(){
		super.postbeginplay();

		//set configurations
		if(
			owner&&owner.player&&weaponstatus[PISS_AUTO]>=0
			&&cvar.getcvar("hd_pistauto",owner.player).getbool()
		){
			weaponstatus[PISS_AUTO]=1;
		}

		if(amount>1&&weaponstatus2[0]<0){
			//clone stats (including fire select cvar) to second pistol
			for(int i=0;i<8;i++){
				weaponstatus2[i]=weaponstatus[i];
			}
			//split the pickup
			if(!owner){
				let second=HDPistol(spawn("HDPistol",pos+(frandom(-2,2),frandom(-2,2),0),ALLOW_REPLACE));
				amount=1;
				second.amount=1;
				for(int i=0;i<8;i++){
					second.weaponstatus[i]=weaponstatus2[i];
					weaponstatus2[i]=-1;
					second.weaponstatus2[i]=-1;
				}
			}
		}
	}
	override inventory CreateTossable(int amt){
		if(amount<2)return super.createtossable(amt);
		let second=HDPistol(spawn("HDPistol",owner.pos+(0,0,owner.height-14),ALLOW_REPLACE));
		amount--;
		second.amount=1;
		//transfer the FIRST pistol's weaponstatus then switch to fist
		//for consistency with other weapons
		for(int i=0;i<8;i++){
			second.weaponstatus[i]=weaponstatus[i];
			second.weaponstatus2[i]=-1;
			weaponstatus[i]=weaponstatus2[i];
			weaponstatus2[i]=-1;
		}
		owner.A_SetInventory("HDFist",1);
		owner.A_SelectWeapon("HDFist");
		let ops=weapon(findinventory("HDPistol"));
		owner.player.pendingweapon=ops;
		owner.player.readyweapon=ops;
		return second;
	}
	action void SwapPistols(){
		if(invoker.amount>1){
			for(int i=0;i<8;i++){
				int wpbak=invoker.weaponstatus2[i];
				invoker.weaponstatus2[i]=invoker.weaponstatus[i];
				invoker.weaponstatus[i]=wpbak;
			}
		}
	}
	states{
	select0:
		PISG A 0 A_JumpIf(invoker.weaponstatus[PISS_CHAMBER]>0,2);
		PISG C 0;
		---- A 1 A_Raise();
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		wait;
	deselect0:
		PISG A 0 A_JumpIf(invoker.weaponstatus[PISS_CHAMBER]>0,2);
		PISG C 0;
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;
	ready:
		PISG A 0 A_JumpIf(invoker.weaponstatus[PISS_CHAMBER]>0,2);
		PISG C 0;
		PISG # 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
		}goto readyend;
	user3:
		---- A 0 A_MagManager("HD9mMag15");
		goto ready;
	user2:
	firemode:
		---- A 0{
			int pa=invoker.weaponstatus[PISS_AUTO];
			if(pa>=0){
				invoker.weaponstatus[PISS_AUTO]=pa==0?1:0;
			}
		}goto nope;
	altfire:
		---- A 0{
			invoker.weaponstatus[0]&=~PISF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[PISS_CHAMBER]!=2
				&&invoker.weaponstatus[PISS_MAG]>0
			)setweaponstate("chamber_manual");
			else if(invoker.amount==2)setweaponstate("retainswap");
		}goto nope;
	chamber_manual:
		---- A 0{
			if(
				!(invoker.weaponstatus[0]&PISF_JUSTUNLOAD)
				&&(
					invoker.weaponstatus[PISS_CHAMBER]==2
					||invoker.weaponstatus[PISS_MAG]<1
				)
			)setweaponstate("nope");
		}
		PISG B 3 offset(0,34);
		PISG C 4 offset(0,37){
			A_MuzzleClimb(frandom(0.4,0.5),-frandom(0.6,0.8));
			A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
			int psch=invoker.weaponstatus[PISS_CHAMBER];
			invoker.weaponstatus[PISS_CHAMBER]=0;
			if(psch==2){
				A_SpawnItemEx("HDPistolAmmo",cos(pitch*12),0,height-8-sin(pitch)*12,1,2,3,0);
			}else if(psch==1){
				A_SpawnItemEx("HDSpent9mm",
					cos(pitch)*12,0,height-7-sin(pitch)*12,
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			if(invoker.weaponstatus[PISS_MAG]>0){
				invoker.weaponstatus[PISS_CHAMBER]=2;
				invoker.weaponstatus[PISS_MAG]--;
			}
		}
		PISG B 3 offset(0,35);
		PISG B 0 A_ReFire();
		goto ready;
	althold:
	hold:
		goto nope;
	fire:
		---- A 0{
			invoker.weaponstatus[0]&=~PISF_JUSTUNLOAD;
			if(invoker.weaponstatus[PISS_CHAMBER]==2)setweaponstate("shoot");
			else if(invoker.weaponstatus[PISS_CHAMBER]>0)setweaponstate("chamber_manual");
		}goto nope;
	shoot:
		PISG B 1{
			if(invoker.weaponstatus[PISS_CHAMBER]==2)A_GunFlash();
		}
		PISG C 1{
			if(hdplayerpawn(self)){
				hdplayerpawn(self).gunbraced=false;
				A_GiveInventory("IsMoving",1);
			}
			A_MuzzleClimb(
				-frandom(0.8,1.),-frandom(1.2,1.6),
				frandom(0.4,0.5),frandom(0.6,0.8)
			);
		}
		PISG C 0{
			A_SpawnItemEx("HDSpent9mm",
				cos(pitch)*12,0,height-7-sin(pitch)*12,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			invoker.weaponstatus[PISS_CHAMBER]=0;
			if(invoker.weaponstatus[PISS_MAG]<1){
				A_PlaySound("weapons/rifleclick",7,0.9);
				setweaponstate("nope");
			}
		}
		PISG B 1{
			A_WeaponReady(WRF_NOFIRE);
			invoker.weaponstatus[PISS_CHAMBER]=2;
			invoker.weaponstatus[PISS_MAG]--;
			if(invoker.weaponstatus[PISS_AUTO]==1){
				let pnr=HDPlayerPawn(self);
				if(
					pnr&&countinv("IsMoving")
					&&pnr.fatigue<12
				)pnr.fatigue++;
				A_GiveInventory("IsMoving",5);
				A_Refire("fire");
			}else A_Refire();
		}goto ready;
	flash:
		PISF A 1 bright{
			HDFlashAlpha(64);
			A_Light1();
			actor p=spawn("HDBullet9",pos+(0,0,height-6),ALLOW_REPLACE);
			p.target=self;p.angle=angle;p.pitch=pitch;
			if(p){
				p.vel+=self.vel+(frandom(-2.,2.),frandom(-2.,2.),frandom(-2.,2.));
				p.speed+=10*frandom(-2.,2.);
			}
			invoker.weaponstatus[PISS_CHAMBER]=1;
			A_ZoomFactor(0.995,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_MuzzleClimb(-frandom(0.4,1.2),-frandom(0.4,1.6));
		}
		PISF A 0{
			A_PlaySound("weapons/pistol",CHAN_WEAPON,1.0);
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_Light0();
		}stop;
	unload:
		---- A 0{
			invoker.weaponstatus[0]|=PISF_JUSTUNLOAD;
			if(invoker.weaponstatus[PISS_MAG]>=0)setweaponstate("unmag");
		}goto chamber_manual;
	loadchamber:
		---- A 0 A_JumpIf(invoker.weaponstatus[PISS_CHAMBER]>0,"nope");
		---- A 1 offset(0,34) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		---- A 1 offset(2,36);
		PISG C 3 offset(5,40);
		PISG C 6 offset(4,39){
			if(countinv("HDPistolAmmo")){
				A_TakeInventory("HDPistolAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[PISS_CHAMBER]=2;
				A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
			}
		}
		PISG B 3 offset(2,36);
		PISG B 2 offset(0,34);
		goto readyend;
	reload:
		---- A 0{
			invoker.weaponstatus[0]&=~PISF_JUSTUNLOAD;
			if(invoker.weaponstatus[PISS_MAG]>=15)setweaponstate("nope");
			else if(HDMagAmmo.NothingLoaded(self,"HD9mMag15")){
				if(countinv("HDPistolAmmo"))setweaponstate("loadchamber");
				else setweaponstate("nope");
			}
		}goto unmag;
	unmag:
		---- A 1 offset(0,34){
			A_SetCrosshair(21);
		}
		---- A 1 offset(1,38);
		---- A 2 offset(2,42);
		---- A 3 offset(3,46) A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
		---- A 0{
			int pmg=invoker.weaponstatus[PISS_MAG];
			invoker.weaponstatus[PISS_MAG]=-1;
			bool inmm=false;
			if(pmg<0)setweaponstate("magout");
			else if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD9mMag15",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD9mMag15",pmg);
				setweaponstate("magout");
			}
			else{
				HDMagAmmo.GiveMag(self,"HD9mMag15",pmg);
				A_PlaySound("weapons/pocket",CHAN_WEAPON);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		---- AAA 5 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		goto magout;
	magout:
		---- A 0{
			if(invoker.weaponstatus[0]&PISF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		---- A 4 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 0 A_PlaySound("weapons/pocket",CHAN_WEAPON);
		---- AAA 5 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 3;
		---- A 0{
			let mmm=hdmagammo(findinventory("HD9mMag15"));
			if(mmm){
				invoker.weaponstatus[PISS_MAG]=mmm.TakeMag(true);
				A_PlaySound("weapons/rifleclick",CHAN_BODY);
				if(invoker.weaponstatus[PISS_CHAMBER]<1){
					invoker.weaponstatus[PISS_CHAMBER]=2;
					invoker.weaponstatus[PISS_MAG]--;
				}
			}else setweaponstate("reloadend");
		}
		PISG A 3 offset(0,48) A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
		PISG A 2 offset(0,45);
		goto reloadend;
	reloadend:
		---- A 2 offset(3,46);
		---- A 1 offset(2,42);
		---- A 1 offset(2,38);
		---- A 1 offset(1,34);
		goto ready;

	user1:
	altreload:
	retainswap:
		---- A 0 A_JumpIf(invoker.amount==2,"swapfakedeselect");
		goto nope;
	swapfakedeselect:
		---- A 0{
			if(invoker.weaponstatus[PISS_CHAMBER]<1)
				A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
		}
		PISG A 1 A_WeaponOffset(-2,38);
		PISG B 1 A_WeaponOffset(-4,46);
		PISG B 1 A_WeaponOffset(-8,58);
		PISG C 1 A_WeaponOffset(-12,70);
		TNT1 A 6;
		TNT1 A 2{
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			SwapPistols();
		}goto select0;


	spawn:
		PIST ABCD -1 nodelay{
			if(invoker.weaponstatus[PISS_CHAMBER]<1){
				if(invoker.weaponstatus[PISS_AUTO]<0)frame=1;
				else frame=3;
			}else{
				if(invoker.weaponstatus[PISS_AUTO]<0)frame=0;
				else frame=2;
			}
		}stop;
	}
	override void initializewepstats(bool idfa){
		bool def=amount==1;
		if(!idfa){
			for(int i=0;i<8;i++){
				weaponstatus2[i]=-def;
			}
		}
		weaponstatus[0]=0;
		weaponstatus[PISS_MAG]=15;
		weaponstatus[PISS_CHAMBER]=2;
		if(!idfa)weaponstatus[PISS_AUTO]=-1;
		if(!def){
			weaponstatus2[0]=0;
			weaponstatus2[PISS_MAG]=15;
			weaponstatus2[PISS_CHAMBER]=2;
			if(!idfa)weaponstatus2[PISS_AUTO]=-1;
		}
		if(
			idfa
			&&weaponstatus[PISS_AUTO]<0
		){
			weaponstatus2[PISS_AUTO]=max(0,weaponstatus2[PISS_AUTO]);
		}
		return;
	}
}
enum pistolstatus{
	PISF_JUSTUNLOAD=1,

	PISS_FLAGS=0,
	PISS_MAG=1,
	PISS_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	PISS_AUTO=3 //-1 is no fire select
};



//use this to give an autopistol in a custom loadout
class HDAutoPistol:HDItemGiver{
	default{
		hdpickup.refid HDLD_PISTAUT;
		hdpickup.nicename "Pistol (select-fire)";
		hdpickup.fitsinbackpack true;
		hdpickup.bulk 34;
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(!owner)spawnmaster();
	}
	override void spawnmaster(){
		let spwn=HDPistol(spawn("HDPistol",pos,ALLOW_REPLACE));
		spwn.special=special;
		spwn.changetid(tid);
		spwn.weaponstatus[PISS_AUTO]=0;
		master=spwn;
	}
	states{
	pickup:
		TNT1 A 0{
			bool startauto=cvar.getcvar("hd_pistauto",player).getbool();
			let expi=HDPistol(findinventory("HDPistol"));
			switch(countinv("HDPistol")){
			case 1:
				expi.amount++;
				for(int i=0;i<8;i++){
					expi.weaponstatus2[i]=expi.weaponstatus[i];
					expi.weaponstatus[i]=0;
				}
				expi.weaponstatus[PISS_AUTO]=max(0,startauto,expi.weaponstatus[PISS_AUTO]);
				expi.weaponstatus[PISS_MAG]=15;
				expi.weaponstatus[PISS_CHAMBER]=2;
				break;
			case 2:
				int aut1=expi.weaponstatus[PISS_AUTO];
				if(aut1<0)expi.weaponstatus[PISS_AUTO]=max(0,startauto,aut1);
				else expi.weaponstatus2[PISS_AUTO]=max(0,startauto,expi.weaponstatus2[PISS_AUTO]);
				break;
			default:
				A_GiveInventory("HDPistol");
				HDPistol(findinventory("HDPistol")).weaponstatus[PISS_AUTO]=startauto;
				break;
			}
			//overwrite everything if giving 2 autopistols
			if(invoker.amount>1){
				expi.weaponstatus[PISS_AUTO]=max(0,startauto,expi.weaponstatus[PISS_AUTO]);
				expi.weaponstatus2[PISS_AUTO]=max(0,startauto,expi.weaponstatus2[PISS_AUTO]);
			}
		}fail;
	}
}

