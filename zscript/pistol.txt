// ------------------------------------------------------------
// Pistol
// ------------------------------------------------------------
class HDSecondPistol:HDAmmo{
	int weaponstatus[8];
	default{
		inventory.maxamount 1;
		scale 0.63;
		inventory.pickupmessage "You got the pistol!";
	}
	override void BeginPlay(){
		weaponstatus[0]=0;
		weaponstatus[PISS_MAG]=15;
		weaponstatus[PISS_CHAMBER]=2;
		weaponstatus[PISS_AUTO]=-1;
		super.beginplay();
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(
			owner&&owner.player&&weaponstatus[PISS_AUTO]>=0
			&&cvar.getcvar("hd_pistauto",owner.player).getint()
		){
			weaponstatus[PISS_AUTO]=1;
		}
	}
	override void AttachToOwner(actor other){
		//if owner has no first, change self to first
		//otherwise attach normally
		if(!other.findinventory("HDPistol")){
			let ppp=hdpistol(spawn("HDPistol",pos));
			if(!ppp)return;
			for(int i=0;i<8;i++){
				ppp.weaponstatus[i]=weaponstatus[i];
			}
			ppp.attachtoowner(other);
			destroy();
		}else super.attachtoowner(other);
	}
	states{
	spawn:
		PIST ABCD -1 nodelay{
			if(invoker.weaponstatus[PISS_CHAMBER]<1){
				if(invoker.weaponstatus[PISS_AUTO]<0)frame=1;
				else frame=3;
			}else{
				if(invoker.weaponstatus[PISS_AUTO]<0)frame=0;
				else frame=2;
			}
		}
	}
}
class HDPistolFullAuto:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			let ppp=HDPistol(findinventory("HDPistol"));
			if(ppp)ppp.weaponstatus[PISS_AUTO]=0;
		}fail;
	}
}
class HDSecondPistolFullAuto:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			let ppp=HDSecondPistol(findinventory("HDSecondPistol"));
			if(ppp)ppp.weaponstatus[PISS_AUTO]=0;
		}fail;
	}
}
class HDAutoPistol:HDSecondPistol{
	override void AttachToOwner(actor other){
		//never itself attaches
		//if HDPistol present, replace with second
		//if HDPistol not present, replace with first
		if(other.findinventory("HDPistol")){
			let pppp=hdsecondpistol(spawn("HDSecondPistol",pos));
			if(pppp){
				pppp.weaponstatus[PISS_AUTO]=0;
				pppp.attachtoowner(other);
			}
		}else{
			let ppp=hdpistol(spawn("HDPistol",pos));
			if(ppp){
				ppp.weaponstatus[PISS_AUTO]=0;
				ppp.attachtoowner(other);
			}
		}
		destroy();
	}
	default{-solid}
	states{
		spawn:
			TNT1 A 0 nodelay{
				let pppp=hdsecondpistol(spawn("HDSecondPistol",pos));
				if(pppp)pppp.weaponstatus[PISS_AUTO]=0;
			}stop;
	}
}
class HDPistol:HDWeapon{
	default{
		-solid //only second can be picked up
		scale 0.63;
		weapon.selectionorder 41;
		weapon.slotnumber 2;
		weapon.kickback 30;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.6;
		weapon.bobspeed 2.5;
		weapon.bobstyle "normal";
		obituary "%o got capped by %k's pea shooter.";
		inventory.pickupmessage "You got the pistol!";
	}
	override void DetachFromOwner(){
		//if owner has second, change it to first before detaching
		let ppp=hdsecondpistol(owner.findinventory("HDSecondPistol"));
		if(ppp){
			let pppp=hdsecondpistol(spawn("HDSecondPistol",owner.pos));
			if(pppp){
				for(int i=0;i<8;i++){
					pppp.weaponstatus[i]=ppp.weaponstatus[i];
				}
				pppp.attachtoowner(owner);
				ppp.destroy();
			}
		}
		super.detachfromowner();
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(
			owner&&owner.player&&weaponstatus[PISS_AUTO]>=0
			&&cvar.getcvar("hd_pistauto",owner.player).getint()
		){
			weaponstatus[PISS_AUTO]=1;
		}
	}
	action void SwapPistols(){
		let second=hdsecondpistol(findinventory("HDSecondPistol"));
		if(second){
			for(int i=0;i<8;i++){
				int wpbak=second.weaponstatus[i];
				second.weaponstatus[i]=invoker.weaponstatus[i];
				invoker.weaponstatus[i]=wpbak;
			}
		}
	}
	states{
	select0:
		PISG A 0 A_JumpIf(invoker.weaponstatus[PISS_CHAMBER]>0,2);
		PISG C 0;
		---- A 1 A_Raise();
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		wait;
	deselect0:
		PISG A 0 A_JumpIf(invoker.weaponstatus[PISS_CHAMBER]>0,2);
		PISG C 0;
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;
	ready:
		PISG A 0 A_JumpIf(invoker.weaponstatus[PISS_CHAMBER]>0,2);
		PISG C 0;
		PISG # 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
			if(
				!A_JumpIfInventory("HDPistolMag",0,"null")
				&&stamina>=15
				&&countinv("NotShot")>210  
			){
				A_TakeInventory("NotShot");
				A_GiveInventory("HDPistolMag",1);
				A_TakeInventory("HDPistolAmmo",15);
			}else{
				A_GiveInventory("NotShot",1);
			}
		}goto readyend;
	user2:
	firemode:
		---- A 0{
			int pa=invoker.weaponstatus[PISS_AUTO];
			if(pa>=0){
				invoker.weaponstatus[PISS_AUTO]=pa==0?1:0;
			}
		}goto nope;
	altfire:
		---- A 0{
			invoker.weaponstatus[0]&=~PISF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[PISS_CHAMBER]!=2
				&&invoker.weaponstatus[PISS_MAG]>0  
			)setweaponstate("chamber_manual");
			else if(countinv("HDSecondPistol"))setweaponstate("retainswap");
		}goto nope;
	chamber_manual:
		---- A 0{
			if(
				invoker.weaponstatus[PISS_CHAMBER]==2
				||(
					invoker.weaponstatus[PISS_MAG]<1
					&&!(invoker.weaponstatus[0]&PISF_JUSTUNLOAD)
				)
			)setweaponstate("nope");
		}
		PISG B 3 offset(0,34);
		PISG C 4 offset(0,37){
			A_MuzzleClimb(frandom(0.4,0.5),-frandom(0.6,0.8));
			A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
			int psch=invoker.weaponstatus[PISS_CHAMBER];
			if(psch==2){
				A_SpawnItemEx("HDPistolAmmo",cos(pitch*12),0,height-8-sin(pitch)*12,1,2,3,0);
			}else if(psch==1){
				A_SpawnItemEx("HDSpent9mm",
					cos(pitch)*12,0,height-7-sin(pitch)*12,
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			if(invoker.weaponstatus[PISS_MAG]>0){  
				invoker.weaponstatus[PISS_CHAMBER]=2;
				invoker.weaponstatus[PISS_MAG]--;
			}
		}
		PISG B 3 offset(0,35);
		PISG B 0 A_ReFire();
		goto ready;
	althold:
	hold:
		goto nope;
	fire:
		---- A 0{
			invoker.weaponstatus[0]&=~PISF_JUSTUNLOAD;
			if(invoker.weaponstatus[PISS_CHAMBER]==2)setweaponstate("shoot");
			else if(invoker.weaponstatus[PISS_CHAMBER]>0)setweaponstate("chamber_manual");
		}goto nope;
	shoot:
		PISG B 1{
			if(invoker.weaponstatus[PISS_CHAMBER]==2)A_GunFlash();
		}
		PISG C 1{
			A_MuzzleClimb(
				-frandom(0.8,1.),-frandom(1.2,1.6),
				frandom(0.4,0.5),frandom(0.6,0.8)
			);
		}
		PISG C 0{
			A_SpawnItemEx("HDSpent9mm",
				cos(pitch)*12,0,height-7-sin(pitch)*12,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			invoker.weaponstatus[PISS_CHAMBER]=0;
			if(invoker.weaponstatus[PISS_MAG]<1){
				A_PlaySound("weapons/rifleclick",7,0.9);
				setweaponstate("nope");
			}
		}
		PISG B 1{
			invoker.weaponstatus[PISS_CHAMBER]=2;
			invoker.weaponstatus[PISS_MAG]--;
			if(invoker.weaponstatus[PISS_AUTO]==1){
				let pnr=HDPlayerPawn(self);
				if(
					pnr&&countinv("IsMoving")
					&&pnr.fatigue<HDCONST_SPRINTFATIGUE
				)pnr.fatigue++;
				A_GiveInventory("IsMoving",5);
				A_Refire("fire");
			}else A_Refire();
		}goto ready;
	flash:
		PISF A 1 bright{
			HDFlashAlpha(64);
			A_Light1();
			actor p=spawn("HDBullet9",pos+(0,0,height-6));
			p.target=self;p.angle=angle;p.pitch=pitch;
			if(p){
				p.vel+=self.vel+(frandom(-2.,2.),frandom(-2.,2.),frandom(-2.,2.));
				p.speed+=10*frandom(-2.,2.);
			}
			invoker.weaponstatus[PISS_CHAMBER]=1;
			A_ZoomFactor(0.995,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_MuzzleClimb(-frandom(0.4,1.2),-frandom(0.4,1.6));
		}
		PISF A 0{
			A_PlaySound("weapons/pistol",CHAN_WEAPON,1.0);
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_Light0();
		}stop;
	unload:
		---- A 0{
			invoker.weaponstatus[0]|=PISF_JUSTUNLOAD;
			if(invoker.weaponstatus[PISS_MAG]>=0)setweaponstate("unmag");  
			else if(invoker.weaponstatus[PISS_MAG]!=2)setweaponstate("chamber_manual");
		}goto nope;
	reload:
		---- A 0{
			if(
				invoker.weaponstatus[PISS_MAG]>=15  
				||(
					!countinv("HDPistolMag")&&!stamina
				)
			)setweaponstate("nope");
		}goto unmag;
	unmag:
		---- A 1 offset(0,34){
			A_SetCrosshair(21);
		}
		---- A 1 offset(1,38);
		---- A 2 offset(2,42);
		---- A 3 offset(3,46) A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
		---- A 0{
			int pmg=invoker.weaponstatus[PISS_MAG];
			if(pmg<0)setweaponstate("magout");
			else if(
				!pmg
				||countinv("HDPistolAmmo")+pmg>AmmoCap("HDPistolAmmo")
				||(!countinv("PressingUnload")&&!countinv("PressingReload"))
			){
				actor mmm;int bbb;
				[bbb,mmm]=A_SpawnItemEx("HD9mPmag",12,0,height-12,1,0,-1,0,SXF_SETTARGET);
				mmm.stamina=pmg;
				setweaponstate("magout");
			}
			else{
				A_PlaySound("weapons/pocket",CHAN_WEAPON);
				if(pmg==15)A_GiveInventory("HDPistolMag",1);
				else A_GiveInventory("HDPistolAmmo",pmg);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		---- AAA 5 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		goto magout;
	magout:
		---- A 0{
			if(invoker.weaponstatus[0]&PISF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		---- A 4 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 0 A_PlaySound("weapons/pocket",CHAN_WEAPON);
		---- AAA 5 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 3;
		---- A 0{
			if(countinv("HDPistolMag")){
				invoker.weaponstatus[PISS_MAG]=15;
				A_TakeInventory("HDPistolMag",1,TIF_NOTAKEINFINITE);
			}else{
				int rnd=min(stamina,random(1,15));
				invoker.weaponstatus[PISS_MAG]=rnd;
				A_TakeInventory("HDPistolAmmo",rnd,TIF_NOTAKEINFINITE);
			}
			A_PlaySound("weapons/rifleclick",CHAN_BODY);
		}
		---- A 0{
			if(invoker.weaponstatus[PISS_CHAMBER]<1){
				invoker.weaponstatus[PISS_CHAMBER]=2;
				invoker.weaponstatus[PISS_MAG]--;
			}else setweaponstate("reloadend");
		}
		PISG A 3 offset(0,48) A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
		PISG A 2 offset(0,45);
		goto reloadend;
	reloadend:
		---- A 2 offset(3,46);
		---- A 1 offset(2,42);
		---- A 1 offset(2,38);
		---- A 1 offset(1,34);
		goto ready;

	zoom:
	cannibalize:
		---- A 0{
			if(countinv("HDSMGMag"))A_SetCrosshair(21);
			else setweaponstate("nope");
		}
		---- A 4 offset(0,34);
		---- A 2 offset(0,44);
		---- A 2 offset(0,70);

		---- AA 4 A_PlaySound("weapons/pocket");
		---- A 10 A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 3 A_PlaySound("weapons/rifleclick2",CHAN_AUTO);
		---- AA 2 A_PlaySound("weapons/rifleclick2",CHAN_AUTO);
		---- A 0 A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- AAAAAAAA 1 A_PlaySound("weapons/rifleclick2",CHAN_AUTO);
		---- AA 2 A_PlaySound("weapons/rifleclick2",CHAN_AUTO);
		---- A 0 A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- AA 3 A_PlaySound("weapons/rifleclick2",CHAN_AUTO);
		---- A 0 A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
		---- A 8{
			A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
			A_TakeInventory("HDSMGMag",1);
			int pocketmax=min(30,AmmoCap("HDPistolAmmo")-stamina);
			A_GiveInventory("HDPistolAmmo",pocketmax);
			pocketmax=30-pocketmax;
			while(pocketmax>0){  
				pocketmax--;
				A_SpawnItemEx("HDPistolAmmo",
					random(8,12),random(0,-12),24,5,0,0,random(6,12)
				);
			}
		}
		---- A 4 A_PlaySound("weapons/pocket",CHAN_WEAPON);
		---- A 2 offset(0,70);
		---- A 2 offset(0,44);
		---- A 4 offset(0,34);
		goto nope;

	user1:
	altreload:
	retainswap:
		---- A 0 A_JumpIfInventory("HDSecondPistol",1,"swapfakedeselect");
		goto nope;
	swapfakedeselect:
		---- A 0{
			if(invoker.weaponstatus[PISS_CHAMBER]<1)
				A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
		}
		PISG A 1 A_WeaponOffset(-2,38);
		PISG B 1 A_WeaponOffset(-4,46);
		PISG B 1 A_WeaponOffset(-8,58);
		PISG C 1 A_WeaponOffset(-12,70);
		TNT1 A 6;
		TNT1 A 2{
			A_PlaySound("weapons/pocket");
			SwapPistols();
		}goto select0;


	spawn:
		PIST A 1;
		PIST A 0{
			//only second can be picked up
			let ppp=hdsecondpistol(spawn("HDSecondPistol",pos));
			if(!ppp)return;
			for(int i=0;i<8;i++){
				ppp.weaponstatus[i]=invoker.weaponstatus[i];
			}
			ppp.vel=vel;
		}stop;
	}
	override void initializewepstats(bool idfa=false){
		weaponstatus[0]=0;
		weaponstatus[PISS_MAG]=15;
		weaponstatus[PISS_CHAMBER]=2;
		if(!idfa)weaponstatus[PISS_AUTO]=-1;
	}
}
enum pistolstatus{
	PISF_JUSTUNLOAD=1,

	PISS_FLAGS=0,
	PISS_MAG=1,
	PISS_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	PISS_AUTO=3 //-1 is no fire select
};






