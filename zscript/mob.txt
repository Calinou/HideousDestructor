// ------------------------------------------------------------
// Nice movement your objects have there.
// Shame if something happened to them.
// ------------------------------------------------------------

//general corpse-gibbing
class SawGib:InventoryFlag{
	default{
		inventory.maxamount int.MAX;
	}
	override void attachtoowner(actor user){
		super.attachtoowner(user);
		actor o=owner;
		if(owner){
			stamina=max(o.gibhealth,o.spawnhealth());
		}else goawayanddie();
	}
	override void doeffect(){
		if(bmissileevenmore)return;
		if(amount>stamina){  
			bmissileevenmore=true;
			actor o=owner;
			if(
				!owner.bcorpse
				||!owner.bshootable
				||owner.health>0  
				||!o.findstate("xdeath",true)
			)goawayanddie();
			else{
				o.bshootable=false;
				//use the old death state first
				if(o.findstate("XDeathBrewtleLulz"))o.setstatelabel("XDeathBrewtleLulz");else
				if(o.findstate("XXDeath"))o.setstatelabel("XXDeath");else
				o.setstatelabel("xdeath");
			}
		}
	}
}
//wrapper until all monsters scriptified
class HDCorpseFlags:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			hdmobai.CorpseFlags(self);
		}fail;
	}
}


//static mob functions
struct HDMobAI play{
	//randomize size
	static void resize(actor caller,double minscl=0.9,double maxscl=1.,int minhealth=0){
		double scl=frandom(minscl,maxscl);
		double drad=caller.radius;double dheight=caller.height;
		double minchkscl=max(1.,minscl+0.1);
		while(
			//keep it smaller than the geometry
			scl>minchkscl&&  
			!caller.checkmove(caller.pos.xy,PCM_NOACTORS)
		){
			scl=frandom(minscl,maxscl);
			caller.A_SetSize(drad*scl,dheight*scl);
			maxscl=scl; //if this has to check again, don't go so high next time
		}
		caller.health*=max(scl,1);
		caller.scale*=scl;
		caller.mass*=scl;
		caller.speed*=scl;
		caller.meleerange*=scl;
	}

	//set and unset shootable corpse
	//"CorpseFlags" item is a wrapper for this now
	static void CorpseFlags(actor caller){
		caller.A_TakeInventory("SawGib");
		if(caller.health>0){  
			if(!caller.bfloat)caller.bnodropoff=true;
			caller.bnotautoaimed=false;
			caller.balwaystelefrag=false;
		}else{
			caller.bnodropoff=false;
			caller.bshootable=true;
			caller.bnotautoaimed=true;
			caller.balwaystelefrag=true;
		}
	}

	//taking all the same flags as A_LookEx
	static void Look(
		actor caller,
		int flags=0,
		double minseedist=0,
		double maxseedist=0,
		double maxheardist=0,
		double fov=0,
		statelabel label="see",
		int soundchance=40
	){
		caller.A_LookEx(flags,minseedist,maxseedist,maxheardist,fov,label);
		if(!caller.bambush)caller.angle+=random(-10,10);
		if(!random(1,soundchance))caller.A_PlaySound(caller.activesound);
	}

	//check if shot is clear
	//hdmobai.tryshoot(self,pradius:6,pheight:6)
	static bool TryShootPuffCheck(
		actor caller,
		actor puff,
		actor victim,
		actor target,
		double blastradius,
		double error
	){
		return(
			victim!=target
			&&(
				!victim
				||(
					(
						!victim.bshootable
						||caller.isfriend(victim)
					)&&(
						caller.absangle(caller.angleto(victim),
							caller.angleto(target))>error  
					)
				)
			)&&(
				!blastradius
				||target.distance3d(puff)>blastradius  
			)
		);
	}
	static bool TryShoot(
		actor caller,
		double shootheight=-1,
		double range=256,
		double pradius=0,
		double pheight=0,
		double blastradius=0,
		double error=1,
		actor target=null
	){
		if(!target)target=caller.target;
		if(!target)return false;
		if(shootheight<0)shootheight=caller.height-6;

		actor a=null;int b;
		double bottomdist=range;double topdist=range;
		double leftdist=range;double rightdist=range;
		double fullrange=range;

		//bottom centre - always done
		[a,b]=caller.LineAttack(caller.angle,range,caller.pitch,0,"none",
			"TryShootPuff",flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:shootheight
		);
		if(a&&TryShootPuffCheck(caller,a,a.tracer,target,blastradius,error))return false;

		//get zoffset for top shot
		shootheight+=pheight;

		//top centre
		[a,b]=caller.LineAttack(caller.angle,range,caller.pitch,0,"none",
			"TryShootPuff",flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:shootheight
		);
		if(a&&TryShootPuffCheck(caller,a,a.tracer,target,blastradius,error))return false;

		//get zoffset for side shots
		shootheight-=pheight*0.5;

		//left and right
		[a,b]=caller.LineAttack(caller.angle,range,caller.pitch,0,"none",
			"TryShootPuff",flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:shootheight,offsetside:-pradius
		);
		if(a&&TryShootPuffCheck(caller,a,a.tracer,target,blastradius,error))return false;
		[a,b]=caller.LineAttack(caller.angle,range,caller.pitch,0,"none",
			"TryShootPuff",flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:shootheight,offsetside:pradius
		);
		if(a&&TryShootPuffCheck(caller,a,a.tracer,target,blastradius,error))return false;

		//if none of the checks fail
		return true;
	}

	//set a feartarget for nearby mobs
	//hdmobai.frighten(self,256); maybe 128 for bullet and 512 for plasma and bfg
	static void Frighten(actor caller,double fraidius,actor fearsome=null){
		if(!fearsome)fearsome=caller;
		fearsome.A_AlertMonsters();
		actor hir;
		blockthingsiterator it=blockthingsiterator.create(caller,fraidius);
		while(it.Next()){
			hir=it.thing;
			if(hir
				&& hir.bIsMonster
				&& hir.health>0
				&& hir.goal is "HDMobster"
			){
				HDMobster(hir.goal).threat=fearsome;
				HDMobster(hir.goal).thraidius=fraidius;
			}
		}
	}

	//smooth wander
	//basically smooth chase with less crap to deal with
	static void Wander(
		actor caller,
		bool dontlook=false
	){
		if(!caller.trymove(caller.pos.xy,false)){
			caller.A_Wander();
			return;
		}

		//remember original position, etc.
		vector3 pg=caller.pos;

		double speedbak=caller.speed;
		if(!caller.target||caller.target.health<1)caller.speed*=0.5;

		//wander and record the resulting position
		caller.A_Wander();
		vector3 pp=caller.pos;

		if(!caller.bfloat && caller.floorz<caller.pos.z)return; //abort if can't propel caller
		caller.vel.xy*=0.7; //slow down

		//reset position and move in chase direction
		if(pp!=pg){
			if(!caller.bteleport)caller.setorigin(pg,false);
			if(caller.bfloat){
				caller.vel.xy+=caller.angletovector(caller.angle,caller.speed*0.16);
			}else{
				caller.vel.xy+=caller.angletovector(caller.angle,caller.speed*0.16);
			}
		}

		//look
		if(!dontlook)caller.A_Look();

		//reset things
		caller.speed=getdefaultbytype(caller.getclass()).speed;
	}
	//smooth chase
	//do NOT try to set targets in here, JUST do the chase sequence
	static void Chase(
		actor caller,
		statelabel melstate="melee",statelabel mistate="missile",
		bool res=false,bool flee=false
	){
		if(!caller.trymove(caller.pos.xy,false)){
			caller.A_Wander();
			return;
		}

		//doesn't this do that by default???
		if(!caller.bfloat)caller.bnodropoff=true;

		//remember original position, etc.
		double ag=caller.angle;
		vector3 pg=caller.pos;
		bool fraid=caller.bfrightened;
		actor attacktarget=caller.target;
		if(flee)caller.bfrightened=true;

		double speedbak=caller.speed;
		if(caller.bfrightened)caller.speed*=2;
		bool membak=caller.bmissileevenmore;
		bool mmbak=caller.bmissilemore;

		//HD shouldn't bother with this distance dropoff
		caller.bmissileevenmore=true;
		caller.bmissilemore=true;

		//chase the goal and record the resulting position
		if(attacktarget)caller.A_Chase(
			melstate,mistate,
			(res?CHF_RESURRECT:0)
		);
		else caller.A_Wander();
		vector3 pp=caller.pos;

		//don't spin so dang fast
		caller.angle=ag+clamp(caller.deltaangle(ag,caller.angle),-10,10);

		if(
			!caller.bteleport&&(
				caller.bfloat
				||caller.floorz>=caller.pos.z
			)
		){
			caller.vel.xy*=0.7; //slow down
	
			//reset position and move in chase direction
			if(pp!=pg){
				if(!caller.bteleport)caller.setorigin(pg,false);
				if(caller.bfloat){
					caller.vel.xy+=caller.angletovector(caller.angle,caller.speed*0.16);
					if(attacktarget
						&&caller.checksight(attacktarget)
						&&caller.pos.z-attacktarget.pos.z<attacktarget.height
					)caller.vel.z+=frandom(0,0.1); //floaty death from above
				}else{
					caller.vel.xy+=caller.angletovector(caller.angle,caller.speed*0.16);
				}
			}
		}

		//reset things
		caller.bfrightened=fraid;
		caller.speed=getdefaultbytype(caller.getclass()).speed;
		caller.bmissileevenmore=membak;
		caller.bmissilemore=mmbak;
	}

	//eyeball out how much one's projectile will drop and raise pitch accordingly
	static void DropAdjust(actor caller,
		class<actor> missiletype,
		double dist=0,
		double speedmult=1.,
		double gravity=0,
		actor target=null
	){
		if(!target)target=caller.target;
		if(!target)return;
		if(dist<1)dist=max(1,(target?caller.distance2d(target):1));
		if(!gravity)gravity=getdefaultbytype(missiletype).gravity;
		double spd=getdefaultbytype(missiletype).speed*speedmult;
		if(getdefaultbytype(missiletype).gravity&&dist>spd){    
			int ticstotake=dist/spd;
			int dropamt=0;
			for(int i=1;i<=ticstotake;i++){
				dropamt+=i;
			}
			caller.pitch-=min(atan(dropamt*gravity/dist),30);
		}

		//because we don't shoot from height 32 but 42
		if(dist>0)caller.pitch+=atan(10/dist);
	}
}
class TryShootPuff:CheckPuff{
	default{
		-alwayspuff
	}
}



//actor that sets monster's goal
class HDMobster:IdleDummy{
	vector3 firstposition;
	actor threat;
	double thraidius;
	int leftright;
	int boredthreshold;int bored;
	default{
		meleethreshold 0;
	}
	static hdmobster SpawnMobster(actor caller){
		let hdmb=hdmobster(spawn("HDMobster",caller.pos));
		hdmb.master=caller;
		hdmb.target=caller.target;
		hdmb.bfrightened=caller.bfrightened;
		hdmb.meleerange=caller.meleerange;
		return hdmb;
	}
	override void postbeginplay(){
		super.postbeginplay();
		firstposition=pos;
		leftright=randompick(-1,-1,-1,-1,0,1,1);
		threat=null;thraidius=256;
		bored=0;boredthreshold=20;
		changetid(123); //only used for actoriterator
	}
	states{
	spawn:
		TNT1 A random(7,10){
			if(
				!master
				//abort if something else is setting the goal, e.g. a level script
				||(master.goal&&master.goal!=self)
			){
				destroy();return;
			}
			if(master.health<1)return;

			//decide where to place goal
			target=master.target;
			if(threat){
				bored=0;
				master.bfrightened=true;
				master.goal=self;master.bchasegoal=true;
				setorigin(master.pos+(master.pos-threat.pos)
					+(random(-128,128),random(-128,128),0),false);
				A_SetTics(4);
				if(
					!master.checksight(threat)
					||master.distance3d(threat)>thraidius  
				)threat=null;
			}else if(target){
				master.bfrightened=bfrightened;
				master.goal=self;master.bchasegoal=true;
				//chase target directly, or occasionaly randomize general direction
				if(
					target.health>0  
					&&master.checksight(target)
				){
					vector3 mpo=master.pos;
					double mth=meleethreshold;
					vector3 tpo=master.target.pos;
					if(
						!mth
						||mth<distance3d(target)
					){
						vector3 flank=mpo-tpo;
						flank.xy=rotatevector(flank.xy,
							random(30,80)*(leftright
								+randompick(1,1,1,1,-1,-1,0))
						);
						tpo+=flank;
					}
					setorigin(tpo,false);
					bored=0;
				}else if(!random(0,15)){
					setorigin((
						master.pos.xy
						+rotatevector(pos.xy-master.pos.xy
							+(random(-512,512),random(-512,512)),
							random(60,120)*
							(leftright+randompick(1,1,1,1,-1,-1,0))
						)
					,0),false);
					bored++;
					if(bored>boredthreshold){  
						bored=0;
						master.goal=null;master.bchasegoal=false;
						A_ClearTarget();master.A_ClearTarget();
						if(master.findstate("idle"))master.setstatelabel("idle");
						else master.setstatelabel("spawn");
					}
				}
			}else{
				master.goal=null;master.bchasegoal=false;
				setorigin(firstposition,false); //go back to start
			}
		}wait;
	}
}

