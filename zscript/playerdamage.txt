// ------------------------------------------------------------
// All damage that affects the player goes here.
// ------------------------------------------------------------
extend class HDPlayerPawn{
	int inpain;
	override int DamageMobj(
		actor inflictor,
		actor source,
		int damage,
		name mod,
		int flags=0,
		double angle=0
	){

		//"You have to be aware of recursively called code pointers in death states.
		//It can easily happen that Actor A dies, calling function B in its death state,
		//which in turn nukes the data which is being checked in DamageMobj."
		if(!self || !(self is "HDPlayerPawn") || health<1)return 0;

		//replace all armour with custom HD stuff
		if(countinv("BasicArmor")){
			int a=countinv("BasicArmor");
			if(a>160){
				if(countinv("BlackArmour"))A_GiveInventory("BlackArmour",a*0.05);
				else A_GiveInventory("BlueArmour",a*0.05);
			}
			else A_GiveInventory("GreenArmour",a*0.02);
			A_TakeInventory("BasicArmor");
		}

		if(damage==TELEFRAG_DAMAGE)flags|=DMG_FORCED;

		//factor in cheats and skills
		if(!(flags&DMG_FORCED)){
			if(
				binvulnerable||!bshootable
				||(player&&(
					player.cheats&CF_GODMODE2 || player.cheats&CF_GODMODE
				))
			)return 0;
			if(!skill||hd_lowdamage)damage=max(1,damage/3);
		}

		//credit and blame where it's due
		if(source is "BotBot")source=source.master;

		//abort if zero team damage, otherwise save factor for wounds and burns
		double tmd=1.;
		if(source is "PlayerPawn" && source!=self && isteammate(source)){
			if(!teamdamage) return 0;
			else tmd=teamdamage;
		}

		int towound=0;
		int toburn=0;

		//blursphere
		let blrs=HDBlurSphere(findinventory("HDBlursphere"));
		if(blrs&&blrs.worn){
			if(mod=="balefire")damage=max(1,damage-blrs.level*2);
			else if(mod=="thermal")blrs.intensity-=100;
		}

		//radsuit
		if(countinv("PowerIronFeet"))A_GiveInventory("WornRadsuit");
		wornradsuit radsuit=wornradsuit(findinventory("WornRadsuit"));
		if(radsuit&&!(flags&DMG_NO_ARMOR)){
			radsuit.stamina+=damage;
			if(mod=="slime"){
				if(damage>10 && radsuit.stamina>45+random(20,50)){
					A_TakeInventory("WornRadsuit");
					A_PlaySound("misc/fwoosh",CHAN_AUTO);
				}else if(damage>random(10,50)){
					damage=1;
				}else return 0;
			}
		}

		//regular armour
		int armourlevel;
		if(flags&DMG_NO_ARMOR||flags&DMG_FORCED){
			armourlevel=0;
		}else if(countinv("BlackArmour")){
			armourlevel=3;
		}else if(countinv("BlueArmour")){
			armourlevel=2;
		}else if(countinv("GreenArmour")){
			armourlevel=1;
		}

		//bleeding
		if(
			mod=="bleedout"||
			mod=="internal"||
			mod=="invisiblebleedout"
		){
			flags|=(DMG_NO_ARMOR|DMG_NO_PAIN|DMG_THRUSTLESS);
			if(!random(0,127))oldwoundcount++;
			if(beatcap>20){
				beatmax+=random(-2,random(-1,4));
				bloodpressure+=random(0,2);
			}

			if(mod=="bleedout"){
				if(!skill || hd_nobleed){
					woundcount=0;
					return 0;
				}
				if(1|| !checkliquidtexture() && !waterlevel){
					for(int i=0;i<damage;i+=2){
						a_spawnitemex("HDBloodTrailFloor",
							random(-12,12),random(-12,12),0,
							0,0,0,
							0,SXF_NOCHECKPOSITION|SXF_USEBLOODCOLOR
							|SXF_SETMASTER
						);
					}
				}
				if(damage<health)source=null;
			}
		}else if(
			mod=="smallarms0"||
			mod=="smallarms1"||
			mod=="smallarms2"||
			mod=="smallarms3"||
			mod=="bullet"||
			mod=="gunshot"
		){
			//shot
			int type=0;
			if(mod=="smallarms1")type=1;
			else if(mod=="smallarms2")type=2;
			else if(mod=="smallarms3")type=3;

			//1/6 chance to hit exposed area
			if(!armourlevel||!random(0,5)){
				towound+=max(2,damage*0.08);
				damage*=0.7;
			}else{
				//reduce damage and wounding
				if(type>armourlevel+random(-1,1)){
					towound+=max(1,damage*0.08);
					damage*=0.7;
				}else{
					towound+=damage*0.02;
					damage/=3;
				}
				//degrade armour and puff
				if(!random(0,max(0,armourlevel-type))){
					actor p;bool q;
					if(countinv("BlackArmour")){
						A_TakeInventory("BlackArmour",1);
						[q,p]=A_SpawnItemEx("PenePuff",
							0,0,height*1.6,
							4,0,1
						);
						p.vel+=vel;
						let pp=HDActor(p);
						pp.A_SpawnChunks("WallChunk",random(8,16),3,8);
					}
					else if(countinv("BlueArmour")){
						A_TakeInventory("BlueArmour",1);
						[q,p]=A_SpawnItemEx("FragPuff",
							0,0,height*1.6,
							4,0,1
						);
						p.vel+=vel;
						let pp=HDActor(p);
						pp.A_SpawnChunks("HugeWallChunk",random(1,4),3,6);
					}
					else{
						A_TakeInventory("GreenArmour",1);
						[q,p]=A_SpawnItemEx("FragPuff",
							0,0,height*1.6,
							4,0,1,
							0,
							0,
							64
						);
						if(p)p.vel+=vel;
					}
				}
				damage=max(1,damage);
			}
			//radsuit completely envelops you so it will always get it
			if(radsuit){
				if(type>1||(type && !random(0,3))){
					A_TakeInventory("WornRadsuit");
					A_PlaySound("imp/melee",CHAN_AUTO);
				}
			}
		}else if(
			mod=="thermal"||
			mod=="fire"||
			mod=="ice"||
			mod=="cold"||
			mod=="plasma"||
			mod=="burning"
		){
			//burned
			//the heat still has to hit the armour
			if(radsuit){
				radsuit.stamina+=damage*10;
				if(damage<random(0,6))return 0;else{
					damage*=0.4;
					if(radsuit.stamina>40&&!random(0,max(0,160-damage-radsuit.stamina))){
						A_TakeInventory("WornRadsuit");
						A_PlaySound("misc/fwoosh",CHAN_AUTO);
					}else if(damage<4)mod="slime";
				}
			}
			if(random(0,5)){
				if(countinv("BlackArmour")){
					damage-=30;
					if(!random(0,200-damage))A_TakeInventory("BlackArmour",damage*0.2);
				}
				else if(countinv("BlueArmour")){
					damage-=30;
					if(!random(0,100-damage))A_TakeInventory("BlueArmour",damage*0.15);
				}
				else if(countinv("GreenArmour")){
					damage-=30;
					if(!random(0,220-damage))A_TakeInventory("GreenArmour",damage*0.1);
				}
			}
			if(damage<=1){
				damage=1;
				if(!random(0,27))toburn++;
			}else toburn+=max(damage*frandom(0.1,0.6),random(0,1));
			if(!random(0,30+armourlevel*3))towound+=max(1,damage*0.03);
		}else if(
			mod=="electro"||
			mod=="electrical"||
			mod=="lightning"||
			mod=="bolt"
		){
			//electrocuted
			if(radsuit&&damage<100)return 0;else{
				A_TakeInventory("WornRadsuit");
				A_PlaySound("misc/fwoosh",CHAN_AUTO);
				damage*=0.8;
			}
			toburn+=max(damage*frandom(0.2,0.5),random(0,1));
			if(!random(0,35))towound+=max(1,damage*0.05);
			if(!random(0,1))stunned+=damage;
		}else if(
			mod=="balefire"||
			mod=="hellfire"||
			mod=="unholy"
		){
			//balefired
			toburn+=damage*frandom(0.6,1.1);
			if(!random(0,1+armourlevel))towound+=max(1,damage*0.06);
			if(random(1,50)<damage*tmd)aggravateddamage++;
			A_AlertMonsters();
		}else if(
			mod=="teeth"||
			mod=="claws"||
			mod=="bite"||
			mod=="scratch"||
			mod=="nails"||
			mod=="natural"
		){

			//radsuit
			if(random(1,damage)>10){
				A_TakeInventory("WornRadsuit");
				A_PlaySound("imp/melee",CHAN_AUTO);
				damage-=5;
				if(damage<1)return 0;
			}
			//armour
			if(random(0,3)){
				if(armourlevel==3)damage/=10;
				else if(armourlevel)damage/=3;
				if(damage<1)return 0;
			}else{
				if(!random(0,mod=="teeth"?12:36))aggravateddamage++;
				if(random(1,15)<damage)towound++;
			}
			stunned+=damage*frandom(0,0.6);
		}else if(
			mod=="GhostSquadAttack"
		){
			//what to do here?
			if(health<90)health++;
			damage=1;
		}else if(
			mod=="staples"||
			mod=="falling"||
			mod=="drowning"||
			mod=="slime"
		){
			//noarmour
			flags|=DMG_NO_ARMOR;

			if(mod=="falling"){
				if(!source)return 0; //ignore regular fall damage
				else stunned+=damage*random(20,25);
			}
		}else{
			//anything else
			damage*=(1-(armourlevel*0.2));
			if(!random(0,10+armourlevel*2))towound+=max(1,damage*0.03);
		}


		//spiritual armour
		if(countinv("SpiritualArmour")){
			towound=0;
			toburn=0;
			if(damage>health)damage=health-1;
			if(inpain>0)inpain=max(inpain,3);
			else if(
				mod!="bleedout"
				&&mod!="internal"
				&&damage>random(3,35)
			){
				A_TakeInventory("SpiritualArmour",1);
			}
			damage=clamp(damage,1,health-7);
			if(mod!="internal")mod="falling";
		}


		//abort if damage is less than zero
		if(damage<0)return 0;

		//add to wounds and burns after team damage multiplier
		//(super.damagemobj() takes care of the actual damage amount)
		towound*=tmd;
		toburn*=tmd;
		if(towound){
			lastthingthatwoundedyou=source;
			woundcount+=towound;
		}
		burncount+=toburn;

		//stun the player randomly
		if(damage>60 || (!random(0,5) && damage>20)){
			stunned+=damage;
		}

		if(hd_debug){
			string st="the world";
			if(inflictor)st=inflictor.getclassname();
			A_Log(string.format("%s took %d %s damage from %s",
				player.getusername(),
				damage,
				mod,
				st
			));
		}

		//finally call the real one but ignore all armour
		return super.DamageMobj(
			inflictor,
			source,
			damage,
			mod,
			flags|DMG_NO_ARMOR,
			angle
		);
	}
	states{
	pain:
	pain.drowning:
	pain.falling:
	pain.staples:
		---- A 0{
			if(!random(0,128))oldwoundcount++;
		}
	painend:
		#### G 3{
			if(!inpain){
				inpain=3;
				if(bloodpressure<100)bloodpressure+=20;
				if(beatmax>12)beatmax=max(beatmax-randompick(10,20),8);
				A_SetBlend("00 00 00",0.8,40,"00 00 00");
				A_MuzzleClimb(
					(frandom(-4,4),frandom(-4,4)),
					(0,0),(0,0),(0,0)
				);
				A_TakeInventory("PowerFrightener");
			}
		}
		#### G 3 A_Pain();
		---- A 0 setstatelabel("spawn");
	pain.slime:
		#### G 3{
			if(bloodpressure<40)bloodpressure+=2;
			if(beatmax>20)beatmax=max(beatmax-2,18);
			A_SetBlend("00 00 00",0.8,40,"00 00 00");
		}
		#### G 3 A_Pain();
		---- A 0 setstatelabel("spawn");
	}
}

