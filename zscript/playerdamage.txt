
extend class HDPlayerPawn{
//	int playerdmob(
	override int DamageMobj(
		actor inflictor,
		actor source,
		int damage,
		name mod,
		int flags=0,
		double angle=0
	){
		//replace all armour with custom HD stuff
		if(countinv("BasicArmor")){
			int a=countinv("BasicArmor");
			if(a>160){
				if(countinv("BlackArmour")) A_GiveInventory("BlackArmour",a*0.05);
				else A_GiveInventory("BlueArmour",a*0.05);
			}
			else A_GiveInventory("GreenArmour",a*0.02);
			A_TakeInventory("BasicArmor");
		}

		//factor in cheats and skills
		if(player.cheats&CF_GODMODE2 || player.cheats&CF_GODMODE || binvulnerable || !bshootable) return 0;
		if(!skill || hd_lowdamage)damage=max(1,damage*0.3);

		int towound=0;
		int toburn=0;

		int armourlevel=0;
		if(countinv("BlackArmour")){
			armourlevel=3;
		}
		else if(countinv("BlueArmour")){
			armourlevel=2;
		}
		else if(countinv("GreenArmour")){
			armourlevel=1;
		}

		//spiritual armour
		if(countinv("SpiritualArmour")){
			towound=0;
			toburn=0;
			damage*=0.3;
			if(damage>health)damage=health-1;    
			if(mod!="bleedout" && !random(0,2))A_TakeInventory("SpiritualArmour",1);
			mod="thermal";
		}
		else if(
			mod=="bleedout"
		){
			//bleeding
			if(!skill || hd_nobleed){
				A_TakeInventory("WoundCount");
				woundcount=0;
				return 0;
			}
			if(!checkliquidtexture() && !waterlevel){
				spawn("HDBloodTrailFloor",pos+(random(-2,2),random(-2,2),0),ALLOW_REPLACE);
			}
		}else if(
			mod=="smallarms0"||
			mod=="smallarms1"||
			mod=="smallarms2"||
			mod=="smallarms3"||
			mod=="bullet"||
			mod=="gunshot"
		){
			//shot
			int type=0;
			if(mod=="smallarms1")type=1;
			else if(mod=="smallarms2")type=2;
			else if(mod=="smallarms3")type=3;

			//1/6 chance to hit exposed area
			if(random(0,5)){
				//apply damage and wounding
				if(type>armourlevel){  
					towound+=damage*0.07;
					damage*=0.2;
				}else{
					towound+=damage*0.02;
					damage*=0.4;
				}
				//degrade armour and puff
				if(!random(0,max(0,armourlevel-type))){
					actor p;bool q;
					if(countinv("BlackArmour")){
						A_TakeInventory("BlackArmour",1);
						[q,p]=A_SpawnItemEx("PenePuff",
							0,0,height*1.6,
							4,0,1
						);
						p.vel+=vel;
						let pp=HDActor(p);
						pp.A_SpawnChunks("WallChunk",random(8,16),3,8);
					}
					else if(countinv("BlueArmour")){
						A_TakeInventory("BlueArmour",1);
						[q,p]=A_SpawnItemEx("FragPuff",
							0,0,height*1.6,
							4,0,1
						);
						p.vel+=vel;
						let pp=HDActor(p);
						pp.A_SpawnChunks("HugeWallChunk",random(1,4),3,6);
					}
					else{
						A_TakeInventory("GreenArmour",1);
						[q,p]=A_SpawnItemEx("FragPuff",
							0,0,height*1.6,
							4,0,1,
							0,
							0,
							64
						);
						if(p)p.vel+=vel;
					}
				}
			}
			//radsuit completely envelops you so it will always get it
			if(countinv("PowerIronFeet")){
				if(type>1 || type && random(1,4)){
					A_PlaySound("imp/melee");
					A_TakeInventory("PowerIronFeet");
				}
			}
		}else if(
			mod=="thermal"||
			mod=="fire"||
			mod=="ice"||
			mod=="cold"||
			mod=="plasma"||
			mod=="burning"
		){
			//burned
			//the heat still has to hit the armour
			if(random(0,5)){
				if(countinv("BlackArmour")){
					damage-=30;
				}
				else if(countinv("BlueArmour")){
					damage-=30;
				}
				else if(countinv("GreenArmour")){
					damage-=30;
				}
			}
			if(damage<1){
				damage=1;
				if(!random(0,31))toburn++;
			}else toburn+=damage*frandom(0.1,0.6);
		}else if(
			mod=="electro"||
			mod=="electrical"||
			mod=="lightning"||
			mod=="bolt"
		){
			//electrocuted
			toburn+=damage*frandom(0.2,0.5);
			if(!random(0,1))stunned+=damage;
		}else if(
			mod=="balefire"||
			mod=="hellfire"||
			mod=="unholy"
		){
			//balefired
			toburn+=damage*frandom(0.6,1.1);
			towound+=max(1,damage*0.05);
			A_AlertMonsters();
		}else{
			//anything else
			damage*=(1-(armourlevel*0.2));
		}

		//abort if damage is less than zero
		if(damage<0) return 0;

		//add to wounds and burns
		if(towound){
			A_GiveInventory("WoundCount",towound);
			woundcount+=towound;
		}
		burncount+=toburn;

		//stun the player randomly
		if(damage>50 || (!random(0,2) && damage>20)){    
			stunned+=damage;
			A_GiveInventory("stuncount",damage);
		}

		if(hd_debug){
			A_Log(string.format("%s took %d %s damage",
				player.getusername(),
				damage,
				mod
			));
		}

		//finally call the real one but ignore all armour
		return super.DamageMobj(
			inflictor,
			source,
			damage,
			mod,
			flags,//|DMG_NO_ARMOR,
			angle
		);
	}
	states{
	pain.bleedout:
	pain.invisiblebleedout:
		"----" A 0{
			if(random(1,128)==1){A_GiveInventory("LethalDamage",1);}
			A_GiveInventory("Fatigue",2);
			if(health<40){A_GiveInventory("IsHurt",1);}
			if(countinv("Fatigue")<30){A_GiveInventory("Fatigue",20);}
			if(countinv("IsMoving")){setstatelabel("see");}
			else setstatelabel("spawn");
		}
	pain:
	pain.drowning:
	pain.falling:
	pain.internal:
		"----" A 0{
			if(random(1,128)==1){A_GiveInventory("LethalDamage",1);}
			A_GiveInventory("Fatigue",2);
		}
	painend:
		"####" G 1;
		"####" G 2{
			if(bloodpressure<50)bloodpressure+=10;
			if(beatcap>20)beatcap-=max(randompick(10,20),HDCONST_MINHEARTTICS);
			A_SetBlend("00 00 00",0.8,40,"00 00 00");
			A_SetPitch(pitch+random(-4,4),SPF_FORCECLAMP|SPF_INTERPOLATE);
			A_SetAngle(angle+random(-4,4),SPF_INTERPOLATE);
			A_TakeInventory("PowerFrightener");
			A_TakeInventory("NotShot");
			if(health<40){A_GiveInventory("IsHurt");}
			A_TakeInventory("SpiritualArmour",1);
		}
		"####" G 3 A_Pain();
		"----" A 0 A_Jump(256,"spawn");
	}
}

