// ------------------------------------------------------------
// HD HUD. HUD for HD. Hdhdhdhdhhdhdhhdhd
// ------------------------------------------------------------
class HDStatusBar:DoomStatusBar{
	int gimmehud;
	int healthbars[14];
	hudfont psmallfont;
	hdplayerpawn hpl;
	bool blurred;
	string mug;
	override void Init(){
		BaseStatusBar.Init();
		SetSize(0,320,200);

		//Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_DOOM";
		pSmallFont=HUDFont.Create("SmallFont");
		mHUDFont = HUDFont.Create(fnt,fnt.GetCharWidth("0"),true,1,1);
		fnt = "INDEXFONT_DOOM";
		mIndexFont = HUDFont.Create(fnt,fnt.GetCharWidth("0"),true);
		mAmountFont = HUDFont.Create("INDEXFONT");
		diparms = InventoryBarState.Create();

		//populate the list of ammo types for the ammo display
		ammotypes.clear();ammosprites.clear();ammoscales.clear();
		for(int i=0;i<allactorclasses.size();i++){
			let thisinv=(class<hdammo>)(allactorclasses[i]);
			if(thisinv){
				let thisinvd=getdefaultbytype(thisinv);
				if(thisinvd.binvbar)continue;
				let thisicon=thisinvd.icon;
				if(!thisicon.isvalid()){
					let dds=thisinvd.spawnstate;
					if(dds!=null)thisicon=dds.GetSpriteTexture(0);
				}
				if(thisicon.isvalid()){
					vector2 dds=texman.getscaledsize(thisicon);
					double ddv=0.7;
					if(max(dds.x,dds.y)<8.){
						ddv*=(8./min(dds.x,dds.y));
					}
					ammoscales.push(clamp(ddv,0.2,2.));
					ammosprites.push(texman.getname(thisicon));
					ammotypes.push(thisinv.getclassname());
				}
			}
		}
	}
	enum HDStatBar{
		STB_COMPRAD=12,
		STB_BEATERSIZE=14,
		DI_TOPRIGHT=DI_SCREEN_RIGHT_TOP|DI_ITEM_RIGHT_TOP,
		DI_TOPLEFT=DI_SCREEN_LEFT_TOP|DI_ITEM_LEFT_TOP,
		DI_BOTTOMLEFT=DI_SCREEN_LEFT_BOTTOM|DI_ITEM_LEFT_BOTTOM,
		DI_BOTTOMRIGHT=DI_SCREEN_RIGHT_BOTTOM|DI_ITEM_RIGHT_BOTTOM,
	}
	override void Tick(){
		super.tick();
		hpl=hdplayerpawn(cplayer.mo);
		if(
			!cplayer
			||!hpl
		)return;

		wepsprites.clear();wepspritescales.clear();wepspriteofs.clear();wepspritecounts.clear();
		for(inventory item=cplayer.mo.inv;item!=null;item=item.inv){
			let witem=hdweapon(item);
			if(
				witem
				&&!witem.bwimpy_weapon
			){
				string wpsp;double wpscl;
				[wpsp,wpscl]=witem.getpickupsprite();
				if(wpsp!=""){
					int sln=witem.slotnumber*24;
					for(int i=0;i<wepspriteofs.size();i++){
						if(wepspriteofs[i]==sln)sln-=7;
					}

					int amt=(witem==cplayer.readyweapon)?0:1;
					let spw=spareweapons(cplayer.mo.findinventory("spareweapons"));
					if(spw){
						for(int i=0;i<spw.weapontype.size();i++){
							if(spw.weapontype[i]==witem.getclassname())amt++;
						}
					}
					if(amt){
						wepspritecounts.push(amt);
						wepsprites.push(wpsp);
						wepspritescales.push(wpscl);
						wepspriteofs.push(sln);
					}
				}
			}
		}

		blurred=hpl.bshadow&&hpl.countinv("HDBlurSphere");

		int mugnum=cvar.getcvar("hd_mugshot",cplayer).getint();
		if(mugnum<0)mugnum=cplayer.getgender();
		switch(mugnum){
			case 0:mug="STF";break;
			case 1:mug="SFF";break;
			case 2:mug="STC";break;
			case 3:mug="STC";break;
			default:mug="STC";break;
		}

		hudusedelay=cvar.getcvar("hd_hudusedelay",cplayer).getint();
		if(cplayer.buttons&BT_USE)gimmehud=max(0,gimmehud-1);
		else gimmehud=max(hudusedelay,-1);
	}
	override void Draw(int state,double TicFrac){
		hpl=hdplayerpawn(cplayer.mo);
		if(
			!cplayer
			||!hpl
		)return;
		cplayer.inventorytics=0;

		if(automapactive){
			DrawAutomapHUD(ticfrac);
			DrawAutomapStuff();
		}else if(cplayer.mo==cplayer.camera){
			DrawAlwaysStuff();
			if(hpl.health<1)return;
			BeginHUD(forcescaled:true);
			if(state==HUD_StatusBar){
				DrawCommonStuff(state);
			}
			else if(state==HUD_Fullscreen){
				DrawCommonStuff(state);
				DrawFullScreenStuff();
			}
			else{
				let www=cplayer.readyweapon;
				if(
					www is "HDBackpack"
					||www is "MagManager"
				)drawweaponstatus(www);
			}
		}
		if(idmypos)drawmypos();
	}
	void DrawAutomapStuff(){
		//KEYS!
		if(hpl.countinv("BlueCard"))drawimage("BKEYB0",(10,24),DI_TOPLEFT);
		if(hpl.countinv("YellowCard"))drawimage("YKEYB0",(10,44),DI_TOPLEFT);
		if(hpl.countinv("RedCard"))drawimage("RKEYB0",(10,64),DI_TOPLEFT);
		if(hpl.countinv("BlueSkull"))drawimage("BSKUA0",(6,30),DI_TOPLEFT);
		if(hpl.countinv("YellowSkull"))drawimage("YSKUA0",(6,50),DI_TOPLEFT);
		if(hpl.countinv("RedSkull"))drawimage("RSKUB0",(6,70),DI_TOPLEFT);

		//frags
		if(deathmatch||fraglimit>0)drawstring(
			mHUDFont,FormatNumber(CPlayer.fragcount),
			(30,24),DI_TOPLEFT|DI_TEXT_ALIGN_LEFT,
			Font.CR_RED
		);

		//mugshot
		DrawTexture(GetMugShot(5,Mugshot.CUSTOM,mug),(6,-14),DI_BOTTOMLEFT,alpha:blurred?0.2:1.);

		//heartbeat/playercolour tracker
		if(hpl && hpl.beatmax){
			float cpb=hpl.beatcount*1./hpl.beatmax;
			drawimage(
				"GREENPXL",(32,-24-cpb*3),DI_BOTTOMLEFT|DI_TRANSLATABLE,
				cpb,scale:(4,4+hpl.bloodpressure*0.05)
			);
		}
		//health
		if(hd_debug)drawstring(
			mAmountFont,FormatNumber(CPlayer.mo.health),
			(34,-24),DI_BOTTOMLEFT|DI_TEXT_ALIGN_CENTER,
			cplayer.mo.health>70?Font.CR_OLIVE:(cplayer.mo.health>33?Font.CR_GOLD:Font.CR_RED)
		);else DrawHealthTicker((40,-24),DI_BOTTOMLEFT);

		//armour
		DrawArmour((4,86),DI_TOPLEFT);

		//inventory
		DrawInvSel(6,100,10,109,DI_TOPLEFT);
		if(hpl.countinv("WornRadsuit"))drawimage("SUITC0",(11,137),DI_TOPLEFT);

		//guns
		drawselectedweapon(-100,-24,DI_BOTTOMRIGHT);

		drawammocounters(-18);
		drawweaponstash(true,-48);

		drawmypos(10);
	}

	void DrawMyPos(int downpos=(STB_COMPRAD<<2)){
		//permanent mypos
		drawstring(
			psmallfont,string.format("%i  x",hpl.pos.x),
			(-4,downpos+10),DI_TEXT_ALIGN_RIGHT|DI_SCREEN_RIGHT_TOP,
			Font.CR_OLIVE
		);
		drawstring(
			psmallfont,string.format("%i  y",hpl.pos.y),
			(-4,downpos+18),DI_TEXT_ALIGN_RIGHT|DI_SCREEN_RIGHT_TOP,
			Font.CR_OLIVE
		);
		drawstring(
			psmallfont,string.format("%i  z",hpl.pos.z),
			(-4,downpos+26),DI_TEXT_ALIGN_RIGHT|DI_SCREEN_RIGHT_TOP,
			Font.CR_OLIVE
		);
	}
	void DrawFullScreenStuff(){
		DrawTexture(GetMugShot(5,Mugshot.CUSTOM,mug),(0,-14),DI_ITEM_CENTER_BOTTOM|DI_SCREEN_CENTER_BOTTOM,alpha:blurred?0.2:1.);
	}
	void DrawAlwaysStuff(){
		if(
			hpl.health>0&&(
				hpl.binvisible
				||hpl.alpha<=0
			)
		)return;

		//update loadout1 based on old custom
		//delete once old custom is gone!
		let lomt=cplayer.mo.findinventory("LoadoutMenuHackToken");
		if(lomt){
			cvar.findcvar("hd_loadout1").setstring(lomt.species);
		}

		if(blurred){
			SetSize(0,320,200);
			BeginHUD(forcescaled:true);
			texman.setcameratotexture(hpl.scopecamera,"HDXHCAM4",97);
			let bls=HDBlurSphere(hpl.findinventory("HDBlurSphere"));
			double lv=bls.stamina+frandom[blurhud](-2,2);
			double camalpha=bls.intensity*0.0002*clamp(lv,0,9);
			drawimage(
				"HDXHCAM4",(-random[blurhud](30,32)-lv,0),DI_SCREEN_CENTER|DI_ITEM_CENTER,
				alpha:camalpha,scale:(2.0,2.0)*frandom[blurhud](0.99,1.01)
			);
			texman.setcameratotexture(hpl.scopecamera,"HDXHCAM4",110);
			drawimage(
				"HDXHCAM4",(random[blurhud](30,32)+lv,0),DI_SCREEN_CENTER|DI_ITEM_CENTER,
				alpha:camalpha*0.6,scale:(2.0,2.0)*frandom[blurhud](0.99,1.01)
			);
			drawimage(
				"DUSTA0",(0,0),DI_SCREEN_CENTER|DI_ITEM_CENTER,
				alpha:0.01*lv,scale:(1000,600)
			);
			return;
		}

		//draw the crosshair.
		if(hpl.health>0)DrawHDXHair(hpl);

		SetSize(0,320,200);
		BeginHUD(forcescaled:true);
		if(hpl.countinv("WornRadsuit"))drawimage(
			"DRKGRNPX",(0,0),DI_SCREEN_CENTER|DI_ITEM_CENTER,
			alpha:0.6,scale:(1000,600)
		);


		//draw the goggles when they do something.
		let hdla=portableliteamp(hpl.findinventory("PortableLiteAmp"));
		if(hdla && hdla.worn){
			//can we do these calculations once somewhere else?
			int gogheight=screen.getheight()*(1.9*90.)/cplayer.fov;
			int gogwidth=screen.getwidth()*gogheight/screen.getheight();
			int gogoffsx=-((gogwidth-screen.getwidth())>>1);
			int gogoffsy=-((gogheight-screen.getheight())>>1);

			screen.drawtexture(
				texman.checkfortexture("GOGGA0",texman.type_any),
				true,
				gogoffsx-(int(hpl.hudbob.x)),
				gogoffsy-(int(hpl.hudbob.y)),
				DTA_DestWidth,gogwidth,DTA_DestHeight,gogheight,
				true
			);
		}

		//draw information text for selected weapon
		hudfont pSmallFont=HUDFont.Create("SmallFont");
		let hdw=HDWeapon(cplayer.readyweapon);
		if(hdw&&hdw.msgtimer>0)drawstrings(psmallfont,hdw.wepmsg,
			(0,48),DI_SCREEN_HCENTER|DI_TEXT_ALIGN_CENTER,
			wrapwidth:300
		);
	}
	int hudusedelay;
	void DrawCommonStuff(int state){
		if(!(cplayer.cmd.buttons&BT_USE)&&hudusedelay<0)return;

		let cp=HDPlayerPawn(CPlayer.mo);
		if(!cp)return;

		int mxht=-4-mIndexFont.mFont.GetHeight();
		int mhht=-4-mHUDFont.mFont.getheight();

		//inventory
		DrawSurroundingInv(25,-4,42,mxht,DI_SCREEN_CENTER_BOTTOM);
		DrawInvSel(25,-14,42,mxht,DI_SCREEN_CENTER_BOTTOM);

		//keys
		string keytype="";
		if(hpl.countinv("BlueCard"))keytype="STKEYS0";
		if(hpl.countinv("BlueSkull")){
			if(keytype=="")keytype="STKEYS3";
			else keytype="STKEYS6";
		}
		if(keytype!="")drawimage(
			keytype,
			(50,-16),
			DI_SCREEN_CENTER_BOTTOM
		);
		keytype="";
		if(hpl.countinv("YellowCard"))keytype="STKEYS1";
		if(hpl.countinv("YellowSkull")){
			if(keytype=="")keytype="STKEYS4";
			else keytype="STKEYS7";
		}
		if(keytype!="")drawimage(
			keytype,
			(50,-10),
			DI_SCREEN_CENTER_BOTTOM
		);
		keytype="";
		if(hpl.countinv("RedCard"))keytype="STKEYS2";
		if(hpl.countinv("RedSkull")){
			if(keytype=="")keytype="STKEYS5";
			else keytype="STKEYS8";
		}
		if(keytype!="")drawimage(
			keytype,
			(50,-4),
			DI_SCREEN_CENTER_BOTTOM
		);

		//backpack
		if(hpl.countinv("Backpack"))drawimage("BPAKA0",(-55,-4),DI_SCREEN_CENTER_BOTTOM|DI_ITEM_CENTER_BOTTOM);

		//radsuit
		if(hpl.countinv("WornRadsuit"))drawimage(
			"SUITC0",(64,-4),DI_SCREEN_CENTER_BOTTOM|DI_ITEM_CENTER_BOTTOM
		);


		//health
		if(hd_debug)drawstring(
			mAmountFont,FormatNumber(hpl.health),
			(0,mxht),DI_TEXT_ALIGN_CENTER|DI_SCREEN_CENTER_BOTTOM,
			hpl.health>70?Font.CR_OLIVE:(hpl.health>33?Font.CR_GOLD:Font.CR_RED)
		);else DrawHealthTicker();


		//frags
		if(deathmatch||fraglimit>0)drawstring(
			mHUDFont,FormatNumber(CPlayer.fragcount),
			(74,mhht),DI_TEXT_ALIGN_LEFT|DI_SCREEN_CENTER_BOTTOM,
			Font.CR_RED
		);


		//heartbeat/playercolour tracker
		if(hpl.beatmax){
			float cpb=hpl.beatcount*1./hpl.beatmax;
			drawimage(
				"GREENPXL",(-8,-6-cpb*2),DI_SCREEN_CENTER_BOTTOM|DI_TRANSLATABLE,
				cpb,scale:(3,3+hpl.bloodpressure*0.03)
			);
		}

		//armour
		DrawArmour(
			state==HUD_Fullscreen?(-55,-4):(0,-mIndexFont.mFont.GetHeight()*2),
			DI_ITEM_CENTER_BOTTOM|DI_SCREEN_CENTER_BOTTOM
		);


		//full hud consequences
		if(!gimmehud){
			drawweaponstash();
			drawammocounters(mxht);

			//encumbrance
			if(hpl.enc){
				drawstring(
					mAmountFont,formatnumber(hpl.enc),
					(8,mxht),DI_TEXT_ALIGN_LEFT|DI_SCREEN_LEFT_BOTTOM,
					hpl.overloaded<1.2?Font.CR_OLIVE:hpl.overloaded>2.?Font.CR_RED:Font.CR_GOLD
				);
				drawimage(
					"GREENPXL",
					(4,mxht+5),
					DI_SCREEN_LEFT_BOTTOM|DI_TRANSLATABLE|DI_ITEM_LEFT,
					1,scale:(1.,min(hpl.maxpocketspace,hpl.itemenc)*20./hpl.maxpocketspace)
				);
				drawimage(
					"BLETA0",
					(5,mxht+5),
					DI_SCREEN_LEFT_BOTTOM|DI_TRANSLATABLE|DI_ITEM_LEFT,
					0.4,scale:(1.,20.)
				);
				drawimage(
					"BLETA0",
					(3,mxht+5),
					DI_SCREEN_LEFT_BOTTOM|DI_TRANSLATABLE|DI_ITEM_LEFT,
					0.4,scale:(1.,20.)
				);
				bool blargh=hpl.flip&&hpl.itemenc>hpl.maxpocketspace;
				drawimage(
					blargh?"YELOPXL":"BLETA0",
					(4,mxht-(20-5)),
					DI_SCREEN_LEFT_BOTTOM|DI_TRANSLATABLE|DI_ITEM_LEFT|DI_ITEM_TOP,
					0.4,scale:(1.,blargh?3.:1.)
				);
			}

			//compass
			int STB_COMPRAD=12;vector2 compos=(-STB_COMPRAD,STB_COMPRAD)*2;
			double compangle=hpl.angle;
			drawstring(psmallfont,"S",
				(cos(compangle),sin(compangle))*STB_COMPRAD+compos,
				DI_TEXT_ALIGN_CENTER|DI_SCREEN_RIGHT_TOP,Font.CR_BLACK
			);
			compangle-=90;
			drawstring(psmallfont,"E",
				(cos(compangle),sin(compangle))*STB_COMPRAD+compos,
				DI_TEXT_ALIGN_CENTER|DI_SCREEN_RIGHT_TOP,Font.CR_GOLD
			);
			compangle-=90;
			drawstring(psmallfont,"N",
				(cos(compangle),sin(compangle))*STB_COMPRAD+compos,
				DI_TEXT_ALIGN_CENTER|DI_SCREEN_RIGHT_TOP,Font.CR_WHITE
			);
			compangle-=90;
			drawstring(psmallfont,"W",
				(cos(compangle),sin(compangle))*STB_COMPRAD+compos,
				DI_TEXT_ALIGN_CENTER|DI_SCREEN_RIGHT_TOP,Font.CR_RED
			);
			drawmypos();
		}

		//weapon readouts!
		if(cplayer.readyweapon&&cplayer.readyweapon!=WP_NOCHANGE)drawweaponstatus(cplayer.readyweapon);

		//weapon sprite
		if(
			!gimmehud
			||cvar.getcvar("hd_hudsprite",cplayer).getbool()
			||!cvar.getcvar("r_drawplayersprites",cplayer).getbool()
		)
		drawselectedweapon(58,-6,DI_SCREEN_CENTER_BOTTOM|DI_ITEM_LEFT_BOTTOM);

		//debug centre line
		if(hd_debug)drawimage(
			"GREENPXL",(0,0),DI_SCREEN_CENTER_BOTTOM,
			0.06,scale:(0.6,100)
		);

	}
	void drawnum(
		int num,double xpos,double ypos,
		int flags=DI_SCREEN_RIGHT_BOTTOM,
		int fnt=Font.CR_OLIVE,
		double alpha=1.
	){
		drawstring(
			mAmountFont,formatnumber(num),
			(xpos,ypos),flags|DI_TEXT_ALIGN_RIGHT,
			fnt,alpha
		);
	}
	void DrawStrings(
		HUDFont font,
		String brokenstring,
		Vector2 pos,
		int flags=0,
		int translation=Font.CR_DARKGRAY,
		double Alpha=1.,
		int wrapwidth=-1,
		int linespacing=0
	){
		double breakspace=linespacing+smallfont.getheight();
		string stringpiece="";

		while(brokenstring.length()>0){
			int nextbreakindex=brokenstring.indexof("\n");
			if(nextbreakindex<0){
				stringpiece=brokenstring;
				brokenstring="";
			}else{
				stringpiece=brokenstring.left(nextbreakindex);
				brokenstring=brokenstring.mid(nextbreakindex+1,brokenstring.length());
			}
			DrawString(font,stringpiece,pos,flags,translation,Alpha,wrapwidth,linespacing);
			pos.y+=breakspace;
		}
	}
	void DrawHealthTicker(
		vector2 drawpos=(-1,-7),
		int flags=DI_SCREEN_CENTER_BOTTOM
	){
		let cp=hdplayerpawn(cplayer.mo);
		if(!hpl.beatcount){
			for(int i=0;i<(STB_BEATERSIZE-2);i++){
				healthbars[i]=healthbars[i+2];
			}
			int erraticalness=(max(100-hpl.health,hpl.bloodpressure,0)>>4);
			healthbars[STB_BEATERSIZE-2]=clamp(4+random[heart](-erraticalness,erraticalness+1),1,8);
			healthbars[STB_BEATERSIZE-1]=clamp(random[heart](1,erraticalness+1),1,8);
		}
		for(int i=0;i<STB_BEATERSIZE;i++){
			drawimage(
				(cp.health>70?"GREENPXL":cp.health>33?"YELOPXL":"REDPXL"),
				drawpos+(i-(STB_BEATERSIZE>>2),0),
				flags|DI_ITEM_CENTER|(cp.health>70?DI_TRANSLATABLE:0),
				scale:(0.8,healthbars[i])
			);
		}
	}
	void drawambar(
		string ongfx,string offgfx,
		class<inventory> type,
		vector2 coords,
		int flags=DI_SCREEN_RIGHT_BOTTOM|DI_ITEM_RIGHT_BOTTOM
	){
		inventory inv=cplayer.mo.findinventory(type);
		if(!inv||!inv.amount){
			drawimage(offgfx,coords,flags);
		}else{
			int arbitrarymax=inv.maxamount;
			drawbar(
				ongfx,offgfx,
				min(arbitrarymax,inv.amount),arbitrarymax,
				coords,-1,
				SHADER_VERT,flags
			);
		}
	}
	void DrawArmour(vector2 armourcoords,int flags){
		let armour=HDArmourWorn(cplayer.mo.findinventory("HDArmourWorn"));
		if(armour){
			string armoursprite="ARMSA0";
			string armourback="ARMER0";
			if(armour.mega){
				armoursprite="ARMCA0";
				armourback="ARMER1";
			}
			drawbar(
				armoursprite,armourback,
				armour.durability,armour.mega?HDCONST_BLUEARMOUR:HDCONST_GREENARMOUR,
				armourcoords,-1,SHADER_VERT,
				flags
			);
			drawstring(
				mamountfont,FormatNumber(armour.durability),
				armourcoords+(10,-7),flags|DI_ITEM_CENTER|DI_TEXT_ALIGN_RIGHT,
				Font.CR_BLACK
			);
		}
	}
	void DrawInvSel(int posx,int posy,int numposx,int numposy,int flags){
		if(CPlayer.mo.InvSel){
			inventory ivs=cplayer.mo.invsel;
			drawinventoryicon(ivs,(posx,posy),
				flags|DI_ITEM_CENTER
				|((
					ivs is "HDArmour"
					||ivs is "PortableStimpack"
					||ivs is "PortableMedikit"
				)?0:DI_TRANSLATABLE)
			);

			let pivs=HDPickup(ivs);
			let piws=HDWeapon(ivs);
			if(pivs){
				int pivsi=pivs.getsbarnum();
				if(pivsi!=-1000000)drawstring(
					mAmountFont,FormatNumber(pivsi),
					(numposx,numposy-7),flags|DI_TEXT_ALIGN_RIGHT,Font.CR_SAPPHIRE
				);
			}else if(piws){
				int piwsi=piws.getsbarnum();
				if(piwsi!=-1000000)drawstring(
					mAmountFont,FormatNumber(piwsi),
					(numposx,numposy-7),flags|DI_TEXT_ALIGN_RIGHT,Font.CR_SAPPHIRE
				);
			}

			drawstring(mAmountFont,FormatNumber(ivs.amount),
				(numposx,numposy),flags|DI_TEXT_ALIGN_RIGHT,Font.CR_OLIVE
			);
		}
	}
	void DrawSurroundingInv(int posx,int posy,int numposx,int numposy,int flags,int drawfull=true){
		int i=0;
		int thisindex=-1;
		inventory item;
		array<inventory> items;items.clear();
		for(item=cplayer.mo.inv;item!=NULL;item=item.inv){
			if(!item||!item.binvbar)continue;
			items.push(item);
			if(item==cplayer.mo.invsel)thisindex=i;

			if(drawfull&&!gimmehud){
				int bigyofs=-(ammosprites.size()/SBAR_MAXAMMOCOLS)*SBAR_AMMOROW-20;
				textureid icon=getinventoryicon(item,0);
				int xoffs=(i%5)*20;
				bool isthis=i==thisindex;
				drawtexture(icon,
					(-18-xoffs,bigyofs-20*(i/5)),
					DI_ITEM_CENTER_BOTTOM|DI_SCREEN_RIGHT_BOTTOM
					|((
						item is "PortableStimpack"
						||item is "PortableMedikit"
						||item is "HDArmour"
					)?0:DI_TRANSLATABLE),
					alpha:isthis?1.:0.6,scale:isthis?(1.,1.):(0.6,0.6)
				);
			}

			i++;
		}
		if(thisindex<0||items.size()<2)return;
		int lastindex=items.size()-1;
		int previndex=thisindex?thisindex-1:lastindex;
		int nextindex=thisindex==lastindex?0:thisindex+1;
		inventory drawitems[2];
		if(items.size()>2)drawitems[0]=items[previndex];
		drawitems[1]=items[nextindex];
		for(i=0;i<2;i++){
			if(!drawitems[i])continue;
			textureid icon=getinventoryicon(drawitems[i],0);
			int xoffs=!i?-10:10;
			drawtexture(icon,
				(posx+xoffs,posy-17),
				flags|DI_ITEM_CENTER_BOTTOM
					|((
						item is "PortableStimpack"
						||item is "PortableMedikit"
						||item is "HDArmour"
					)?0:DI_TRANSLATABLE),
				alpha:0.6,scale:(0.6,0.6)
			);
		}
	}
	void drawselectedweapon(int posx,int posy,int flags){
		let w=hdweapon(cplayer.readyweapon);
		if(!w)return;
		string wx;double ws;
		[wx,ws]=w.getpickupsprite();
		if(wx!="")drawimage(wx,(posx,posy),flags,scale:(ws,ws));
	}
	array<string> wepsprites;
	array<double> wepspritescales;
	array<int> wepspriteofs;
	array<int> wepspritecounts;
	void drawweaponstash(bool rt=false,int yofs=0){
		for(int i=wepsprites.size()-1;i>=0;i--){
			double scl=wepspritescales[i];
			int xofs=rt?-8:8;
			int yofsfinal=yofs-wepspriteofs[i];
			drawimage(wepsprites[i],(xofs,yofsfinal),
				(rt?DI_SCREEN_RIGHT_BOTTOM:DI_SCREEN_LEFT_BOTTOM)|
				(rt?DI_ITEM_RIGHT:DI_ITEM_LEFT)|DI_ITEM_BOTTOM,
				scale:(scl,scl)
			);
			int count=wepspritecounts[i];
			if(count>1)drawstring(
				psmallfont,count.."x",
				(xofs-2,yofsfinal-3),
				(rt?DI_SCREEN_RIGHT_BOTTOM:DI_SCREEN_LEFT_BOTTOM)|
				(rt?DI_ITEM_RIGHT:DI_ITEM_LEFT)|DI_ITEM_BOTTOM|DI_TEXT_ALIGN_LEFT,
				Font.CR_DARKGRAY
			);
		}
	}
	array<string> ammosprites;
	array<string> ammotypes;
	array<double> ammoscales;
	void drawammocounters(int mxht){
		actor cp=cplayer.mo;
		int ii=0;
		for(int i=0;i<ammosprites.size();i++){
			let count=cp.countinv(ammotypes[i]);
			if(!count)continue;
			drawimage(ammosprites[i],
				(-8-(ii%SBAR_MAXAMMOCOLS)*16,mxht-(ii/SBAR_MAXAMMOCOLS)*SBAR_AMMOROW),
				DI_SCREEN_RIGHT_BOTTOM|DI_ITEM_RIGHT_BOTTOM,
				//alpha:count?1.:0.2,
				scale:(ammoscales[i],ammoscales[i])
			);
			drawstring(
				mamountfont,""..count,
				(-6-(ii%SBAR_MAXAMMOCOLS)*16,mxht-(ii/SBAR_MAXAMMOCOLS)*SBAR_AMMOROW),
				DI_SCREEN_RIGHT_BOTTOM|DI_ITEM_RIGHT_BOTTOM|DI_TEXT_ALIGN_RIGHT,
				Font.CR_OLIVE
			);
			ii++;
		}
	}
	void drawbattery(int posx,int posy,int flags=0,bool reloadorder=false){
		let hpl=hdplayerpawn(cplayer.mo);
		string cellsprite="CELLA0";
		let bttc=HDBattery(hpl.findinventory("HDBattery"));
		if(bttc&&bttc.mags.size()>0){
			if(bttc.chargemode){
				if(bttc.chargemode==HDBattery.BATT_CHARGEMAX)drawimage("CELPA0",(posx+2,posy+6),flags:flags,scale:(0.3,0.3));
				else if(bttc.chargemode==HDBattery.BATT_CHARGETOP)drawimage("CELPA0",(posx,posy+4),flags:flags,scale:(0.3,0.3));
			}
			int amt;
			if(reloadorder){
				amt=GetNextLoadMag(bttc);
			}else amt=bttc.mags[bttc.mags.size()-1];
			if(amt<1)cellsprite="CELLD0";
			else if(amt<=6)cellsprite="CELLC0";
			else if(amt<=13)cellsprite="CELLB0";
		}else cellsprite="CELLD0";
		drawimage(cellsprite,(posx,posy),flags:flags,alpha:bttc?1.:0.3);
	}
	enum HDSBarNums{
		SBAR_MAXAMMOCOLS=8,
		SBAR_AMMOROW=14,
	}
}





