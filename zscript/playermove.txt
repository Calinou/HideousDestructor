// ------------------------------------------------------------
// Movement checks.
// ------------------------------------------------------------
extend class HDPlayerPawn{
	//input is no longer considered in CheckPitch since it's already in HD's TurnCheck.
	override void CheckPitch(){
		if(player.centering){
			if (abs(Pitch)>2.){
				Pitch*=(2./3.);
			}else{
				Pitch=0.;
				player.centering = false;
				if(PlayerNumber()==consoleplayer)LocalViewPitch=0;
			}
		}else pitch=clamp(pitch,player.minpitch,player.maxpitch);
	}
	override void CheckCrouch(bool totallyfrozen){}
	void CrouchCheck(){
		if(CheckFrozen())return;
		let player=self.player;
		UserCmd cmd=player.cmd;
		if(CanCrouch()&&player.health>0){ //guess what i deleted lololol
			int crouchdir=player.crouching;
			if(!crouchdir){
				crouchdir=(cmd.buttons & BT_CROUCH)?-1:1;
			}
			else if(cmd.buttons & BT_CROUCH){
				player.crouching=0;
			}
			if(crouchdir==1 && player.crouchfactor<1 && pos.z+height<ceilingz){
				CrouchMove(1);
			}
			else if (crouchdir==-1 && player.crouchfactor>0.5){
				CrouchMove(-1);
			}
		}else player.Uncrouch();
		player.crouchoffset=-(viewheight)*(1-player.crouchfactor);
	}
	override void CrouchMove(int direction){
		let player=self.player;
		bool notpredicting=!(player.cheats & CF_PREDICTING);

		double defaultheight = FullHeight;
		double savedheight = Height;
		double crouchspeed = direction*CROUCHSPEED;
		double oldheight = player.viewheight;

		crouchspeed*=clamp(
			(health+100)*0.6
			-(direction==1?overloaded*3:overloaded*0.5)
			-(fatigue>20?fatigue*2:fatigue)
			-((stunned&&direction==1)?80:0)
			+stimcount+zerk*0.04,
			40,zerk>0?999:144
		)*0.01;

		player.crouchdir=direction;
		player.crouchfactor+=crouchspeed;

		// check whether the move is ok
		Height = defaultheight * player.crouchfactor;
		if(!TryMove(Pos.XY, false, NULL)){
			Height = savedheight;
			if (direction > 0){
				// doesn't fit
				player.crouchfactor -= crouchspeed;
				return;
			}
		}else if(notpredicting){
			if(!(level.time%10))fatigue++;
			if(player.onground && zerk>0 && direction>0 && height<fullheight*0.6)vel.z+=4;
		}
		Height = savedheight;

		player.crouchfactor = clamp(player.crouchfactor, 0.5, 1.);
		player.viewheight = ViewHeight * player.crouchfactor;
		player.crouchviewdelta = player.viewheight - ViewHeight;

		// Check for eyes going above/below fake floor due to crouching motion.
		CheckFakeFloorTriggers(pos.Z + oldheight, true);

		if(notpredicting)gunbraced=false;
	}
	override void MovePlayer(){
		let player = self.player;
		UserCmd cmd = player.cmd;
		bool notpredicting = !(player.cheats & CF_PREDICTING);

		//reduced turning while supported.
		if(
			isFocussing
			&&!countinv("IsMoving")
		){
			int aimshift = CVar.GetCVar('hd_aimsensitivity', player).GetInt();
			player.cmd.yaw>>=aimshift;
			player.cmd.pitch>>=aimshift;
			if(!gunbraced){
				vector2 iyp=(360./65536.*0.05)*(double(cmd.yaw),double(-cmd.pitch));
				if(notpredicting&&!mousehijacked)A_MuzzleClimb(iyp*2,iyp,iyp,iyp);
			}
		}
		//reduced turning while crouched.
		else if(player.crouchfactor<0.7){
			int thrsh=(8*65536/360);
			int absch=abs(player.cmd.yaw);
			if(absch>thrsh){
				absch=(absch-thrsh)>>1;
				player.cmd.yaw-=player.cmd.yaw>0?absch:-absch;
			}
			absch=abs(player.cmd.pitch);
			if(absch>thrsh){
				absch=(absch-thrsh)>>1;
				player.cmd.pitch-=player.cmd.pitch>0?absch:-absch;
			}
		}


		//some hacky shit with interpolations to remove HD's BEST QUALITY.
		A_SetAngle(angle+0.0000001*player.cmd.yaw,SPF_INTERPOLATE);
		A_SetPitch(pitch-0.0000001*player.cmd.pitch,SPF_INTERPOLATE);


		player.onground = (pos.z <= floorz) || bOnMobj || bMBFBouncer || (player.cheats & CF_NOCLIP2);

		// killough 10/98:
		//
		// We must apply thrust to the player and bobbing separately, to avoid
		// anomalies. The thrust applied to bobbing is always the same strength on
		// ice, because the player still "works just as hard" to move, while the
		// thrust applied to the movement varies with 'movefactor'.

		if(cmd.forwardmove||cmd.sidemove){
			double forwardmove=0;double sidemove=0;
			double bobfactor=0;
			double friction=0;double movefactor=0;
			double fm=0;double sm=0;

			[friction, movefactor] = GetFriction();
			bobfactor = friction < ORIG_FRICTION ? movefactor : ORIG_FRICTION_FACTOR;

			//bobbing adjustments
			if(stunned)bobfactor*=4.;
			else if(cansprint && runwalksprint>0)bobfactor*=1.6;
			else if(runwalksprint<0||mustwalk){
				if(player.crouchfactor==1)bobfactor*=0.4;
				else bobfactor*=0.7;
			}

			if(!player.onground && !bNoGravity && !waterlevel){
				// [RH] allow very limited movement if not on ground.
				movefactor*=level.aircontrol;
				bobfactor*=level.aircontrol;
			}

			//"override double,double TweakSpeeds()"...
			double basespeed=speed*12.;
			if(cmd.forwardmove){
				fm=basespeed;
				if(cmd.forwardmove<0)fm*=-0.8;
			}
			if(cmd.sidemove>0)sm=basespeed;
			else if(cmd.sidemove<0)sm=-basespeed;
			if(!player.morphTics){
				double factor=1.;
				for(let it=Inv;it;it=it.Inv){
					factor *= it.GetSpeedFactor();
				}
				fm*=factor;
				sm*=factor;
			}

			// When crouching, speed <s>and bobbing</s> have to be reduced
			if(CanCrouch() && player.crouchfactor != 1 && runwalksprint>=0){
				fm *= player.crouchfactor;
				sm *= player.crouchfactor;
			}

			if(fm&&sm)movefactor*=HDCONST_ONEOVERSQRTTWO;

			forwardmove = fm * movefactor * (35 / TICRATE);
			sidemove = sm * movefactor * (35 / TICRATE);

			if(forwardmove){
				Bob(Angle, cmd.forwardmove * bobfactor / 256., true);
				ForwardThrust(forwardmove, Angle);
			}
			if(sidemove){
				let a = Angle - 90;
				Bob(a, cmd.sidemove * bobfactor / 256., false);
				Thrust(sidemove, a);
			}

			if(
				notpredicting
				&&(forwardmove||sidemove)
			){
				PlayRunning();
			}

			if(player.cheats & CF_REVERTPLEASE){
				player.cheats &= ~CF_REVERTPLEASE;
				player.camera = player.mo;
			}
		}
	}
}
