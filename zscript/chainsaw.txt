// ------------------------------------------------------------
// Chainsaw
// ------------------------------------------------------------
class Lumberjack:HDWeapon replaces Chainsaw{
	default{
		weapon.selectionorder 801;
		weapon.slotnumber 1;
		weapon.bobstyle "Alpha";
		weapon.bobrangex 0.3;
		weapon.bobrangey 1.4;
		weapon.bobspeed 2.1;
		weapon.ammotype1 "LumberCell";
		weapon.ammotype2 "HDCellPacks";
		weapon.kickback 2;
		scale 0.4;
		inventory.pickupmessage "You got the chainsaw! Go find some meat!";
	}
	states{
	ready:
		BEVG C 0 A_TakeInventory("WasChoppingFlesh");
		BEVG C 0 A_JumpIfInventory("SawOn",1,"ready2");
		BEVG C 1{
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER4);
		}goto ReadyEnd;
	ready2:
		BEVG CD 3{
			A_GiveInventory("IsWeaponBFG",1);
			A_TakeInventory("SawOn",1);
			if((countinv("SawOn")>4)&&(countinv("LumberCell")>400)){  
				A_SetTics(2);
				A_PlaySound("weapons/sawfull",CHAN_WEAPON);
			}else if((countinv("SawOn")>1)&&(countinv("LumberCell")>100)){
				A_PlaySound("weapons/sawidle",CHAN_WEAPON);
			}else{
				A_SetTics(random(2,4));
				A_PlaySound("weapons/sawidle",CHAN_WEAPON);
			}
			A_WeaponReady();
		}
		goto ReadyEnd;
	select0:
		BEVG A 0 A_TakeInventory("SawOn");
		goto select0big;
	deselect0:
		BEVG A 0 A_TakeInventory("SawOn");
		goto deselect0big;
	hold:
		BEVG A 0 A_JumpIfInventory("LumberCell",1,"saw");
		goto nope;
	fire:
		BEVG C 2;
		BEVG C 4 A_JumpIfInventory("LumberCell",1,"saw");
		goto beatdown;
	saw:
		BEVG AB 1{
			A_GiveInventory("SawOn",1);
			if(!random(0,3))A_TakeInventory("LumberCell",1);
			if(countinv("LumberCell")<61)A_GiveInventory("LumberEmptyCell");
			if((countinv("LumberCell")>450)&&(countinv("SawOn")>11)){  
				ACS_NamedExecuteAlways("MuzzleClimb",0,(random(0,1)*2-1)*random(3,8),(random(0,1)*2-1)*random(3,12));
				A_Saw("weapons/sawfull","weapons/sawhit",5,"HDSawPuff");
				A_FireProjectile("HDSawGibber");
				A_AlertMonsters();
			}else if((countinv("LumberCell")>150)&&(countinv("SawOn")>6)){
				ACS_NamedExecuteAlways("MuzzleClimb",0,(random(0,1)*2-1)*random(1,4),(random(0,1)*2-1)*random(2,6));
				A_Saw("weapons/sawfull","weapons/sawhit",3,"HDSawPuff");
				A_FireProjectile("HDSawGibber");
				A_SetTics(2);
				A_AlertMonsters();
			}else if((countinv("LumberCell")>40)&&(countinv("SawOn")>1)){
				ACS_NamedExecuteAlways("MuzzleClimb",0,(random(0,1)*2-1)*random(1,4),(random(0,1)*2-1)*random(2,6));
				A_Saw("weapons/sawfull","weapons/sawhit",1,"HDSawPuff");
				if(random(1,2)==1){A_FireProjectile("HDSawGibber");}
				A_SetTics(random(2,4));
				A_AlertMonsters();
			}else{
				ACS_NamedExecuteAlways("MuzzleClimb",0,random(-2,2),random(-2,2));
				A_PlaySound("weapons/sawidle",CHAN_WEAPON);
				A_FireProjectile("HDSawPuffShitty");
				A_SetTics(random(3,6));
				//slow drain
				if(!random(0,2))A_SetInventory(
					"LumberCell",min(countinv("LumberCell"),countinv("LumberCell")+1)
				);
			}
		}
		BEVG B 1 A_Refire();
		goto ready;

	altfire:
	beatdown:
		BEVG C 0 A_TakeInventory("IsWeaponBFG");
		BEVG C 0 A_JumpIfInventory("PowerStrength",1,"beatdownstrong");
		BEVG C 1 offset(0,33);
		BEVG C 1 offset(0,32);
		BEVG DC 1 A_SetPitch(pitch-1,SPF_INTERPOLATE);
		BEVG DC 2 A_SetPitch(pitch-1,SPF_INTERPOLATE);
		BEVG CC 2 A_SetPitch(pitch-2,SPF_INTERPOLATE);
		BEVG C 0 A_Refire("beatdown2");
		goto whack;
	beatdownstrong:
		BEVG D 1 A_SetPitch(pitch-4,SPF_INTERPOLATE);
		BEVG C 1 A_SetPitch(pitch-6,SPF_INTERPOLATE);
		BEVG C 1 A_SetPitch(pitch-8,SPF_INTERPOLATE);
		BEVG C 0 A_Refire("beatdown2");
		goto whack;
	althold:
	beatdown2:
		BEVG C 1{
			A_SetAngle(angle+frandom(-0.1,0.08),SPF_INTERPOLATE);
			A_SetPitch(pitch+frandom(-0.05,0.1),SPF_INTERPOLATE);
		}
		BEVG C 0 A_Refire("beatdown2");
	whack:
		BEVG D 1 A_JumpIf(pitch>25,"nowhack");
		BEVG AB 1 offset(0,36) A_SetPitch(pitch+10,SPF_INTERPOLATE);
		BEVG AAAAA 0 A_CustomPunch(random(1,5),0,0,"HDNullPuff",46);
		BEVG A 1 offset(0,35){
			if(countinv("PowerStrength")>0){A_CustomPunch(random(10,20),0,0,"HDNullPuff",46);}  
			A_SetPitch(pitch+10,SPF_INTERPOLATE);
		}
		BEVG B 2 offset(0,34);
		BEVG C 2 offset(0,33);
	nowhack:
		BEVG C 2 offset(0,32);
		BEVG CCCCC 1 A_WeaponReady(WRF_NOFIRE);
		BEVG C 0 A_JumpIfInventory("PowerStrength",1,6);
		BEVG CCCCC 1 A_WeaponReady(WRF_NOFIRE);
		BEVG C 0 A_Refire("beatdown2");
		goto ready;

	reload:
		BEVG C 0{
			if(
				(countinv("LumberCell")>1140)  
				||(countinv("HDCellPacks")+countinv("HDCellAmmo")<1)
			){return resolvestate("nope");}
			return resolvestate("unmag");
		}

	user4:
	unload:
		BEVG C 0{
			if(countinv("LumberCell")+countinv("LumberEmptyCell")<1){
				return resolvestate("nope");
			}A_GiveInventory("JustUnloading");return resolvestate(null);
		}
	unmag:
		BEVG A 1 offset(0,33);
		BEVG A 1 offset(0,35);
		BEVG A 1 offset(0,37);
		BEVG A 1 offset(0,39);
		BEVG A 2 offset(0,44);
		BEVG A 2 offset(0,52);
		BEVG A 3 offset(2,62);
		BEVG A 4 offset(4,74);
		BEVG A 7 offset(6,78)A_PlaySound("weapons/rifleload",CHAN_WEAPON);
		BEVG A 0{
			A_PlaySound("weapons/grenopen",CHAN_WEAPON);
			if(
				(countinv("PressingUnload")+countinv("PressingReload")<1)
				||(countinv("HDCellAmmo")>invoker.AmmoCap("HDCellAmmo")-countinv("LumberCell")/60)      
				||(
					(countinv("LumberCell")>=1200)  
					&&(A_JumpIfInventory("HDCellPacks",0,"null"))
				)
				||((countinv("LumberCell")<1)&&(A_JumpIfInventory("HDCellPackEmpty",0,"null")))
			){
				return resolvestate("dropmag");
			}
			return resolvestate("pocketmag");
		}
	dropmag:
		BEVG A 0{
			if(countinv("LumberEmptyCell")||countinv("LumberCell")){
				actor a;int b;
				[b,a]=A_SpawnItemEx("HDCellPickup",
					cos(pitch)*10,0,height-10-10*sin(pitch),
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				a.A_SetInventory("HDCellAmmo",countinv("LumberCell")/60);
			}
			A_TakeInventory("LumberCell");
			A_TakeInventory("LumberEmptyCell");
		}goto magout;
	pocketmag:
		BEVG A 6 offset(7,80){
			A_PlaySound("weapons/pocket");
			ACS_NamedExecuteAlways("MuzzleClimb",0,(random(0,1)*2-1)*random(3,8),(random(0,1)*2-1)*random(3,12));
			if(countinv("LumberCell")>1140){A_GiveInventory("HDCellPacks");}
			else if(countinv("LumberCell")>60){A_GiveInventory("HDCellAmmo",countinv("LumberCell")/60);}          
			else{A_GiveInventory("HDCellPackEmpty");}
			A_TakeInventory("LumberCell");
		}
		BEVG A 7 offset(6,81) A_PlaySound("weapons/pocket");
		goto magout;

	magout:
		BEVG A 0 A_TakeInventory("LumberEmptyCell");
		BEVG A 0 A_JumpIfInventory("JustUnloading",1,"reloadend");
	loadmag:
		BEVG A 4 offset(7,79) ACS_NamedExecuteAlways("MuzzleClimb",0,(random(0,1)*2-1)*random(3,8),(random(0,1)*2-1)*random(3,12));
		BEVG A 2 offset(6,78) A_PlaySound("weapons/pocket");
		BEVG AA 5 offset(5,76) ACS_NamedExecuteAlways("MuzzleClimb",0,(random(0,1)*2-1)*random(3,8),(random(0,1)*2-1)*random(3,12));
		BEVG A 0{
			if(countinv("HDCellPacks")>0){          
				A_GiveInventory("LumberCell",1200);
				A_TakeInventory("HDCellPacks",1,TIF_NOTAKEINFINITE);
			}else{
				A_TakeInventory("Counter");
				A_GiveInventory("Counter",random(1,20));
				if(countinv("Counter")>countinv("HDCellAmmo")){          
					A_TakeInventory("Counter",countinv("Counter")-countinv("HDCellAmmo"));
				}
				A_GiveInventory("LumberCell",countinv("Counter")*60);
				A_TakeInventory("HDCellAmmo",countinv("Counter"),TIF_NOTAKEINFINITE);
			}
			A_TakeInventory("LumberEmptyCell");
		}
	reloadend:
		BEVG A 6 offset(5,72);
		BEVG A 5 offset(4,74)A_PlaySound("weapons/huntopen",CHAN_WEAPON);
		BEVG A 4 offset(2,62);
		BEVG A 3 offset(0,52);
		BEVG A 4 offset(0,44);
		BEVG A 1 offset(0,37);
		BEVG A 1 offset(0,35);
		BEVG C 1 offset(0,33);
		goto ready;



	spawn:
		CSAW A -1;
	}

	//for tracking ammo in drops and pickups
	override void postbeginplay(){
		super.postbeginplay();
		weaponstatus[0]=1200;
	}
	override void attachtoowner(actor user){
		if(weaponstatus[0]>0)user.A_SetInventory("LumberCell",weaponstatus[0]);
		else user.A_SetInventory("LumberEmptyCell",-weaponstatus[0]);
		super.attachtoowner(user);
	}
	override void detachfromowner(){
		weaponstatus[0]=owner.countinv("LumberCell");
		if(!weaponstatus[0])weaponstatus[0]=-owner.countinv("LumberEmptyCell");
		owner.A_TakeInventory("LumberCell");
		owner.A_TakeInventory("LumberEmptyCell");
		super.detachfromowner();
	}
}




