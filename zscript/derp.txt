// ------------------------------------------------------------
// D.E.R.P. Robot
// ------------------------------------------------------------
class DERPBot:HDUPK{
	int cmd;
	default{
		+ismonster +noblockmonst +shootable
		+friendly +nofear +dontgib +noblood
		painchance 240;painthreshold 12;
		damagefactor "Thermal",0.7;damagefactor "Normal",0.8;
		radius 5;height 8;deathheight 8;maxdropoffheight 4;maxstepheight 4;
		bloodcolor "22 22 22";scale 0.6;
		health 100;mass 20;
		maxtargetrange 256;
		activesound "derp/crawl";
		hdupk.pickupmessage "Picked up a Defence, Engagement, Reconnaissance and Patrol robot.";
	}
	bool DerpTargetCheck(bool face=false){
		if(!target)return false;
		if(face){
			A_PlaySound("derp/crawl");
			A_FaceTarget(2,2,FAF_TOP);
		}
		actor derpuf;int garbage;
		[derpuf,garbage]=lineattack(
			angle,256,pitch,0,"none",
			"CheckPuff",flags:LAF_NORANDOMPUFFZ|LAF_NOINTERACT|LAF_OVERRIDEZ,
			offsetz:2
		);
		return (derpuf && derpuf.tracer==target);
	}
	void DerpAlert(string msg="Derpy derp!"){
		if(master)master.A_Log(string.format("\cd[DERP]  %s",msg),true);
	}
	void DerpShot(){
		A_PlaySound("weapons/pistol",0,1,0,4);
		if(!random(0,11)){
			if(bfriendly)A_AlertMonsters(0,AMF_TARGETEMITTER);
			else A_AlertMonsters();
		}
		actor b=spawn("HDBullet9",pos+(0,0,2));
		b.pitch=pitch;b.angle=angle;b.target=self;b.vel+=vel;
	}
	void A_DerpAttack(){
		if(DerpTargetCheck(false))DerpShot();
	}
	void UpdateCmd(){
		if(master)cmd=master.countinv("DERPmode");
	}
	states{
	spawn:
		DERP A 0 A_Stop();
		DERP A 0{
			if(!countinv("Clip")){
				A_GiveInventory("Clip",1);
				if(!(master is "PlayerPawn")){
					A_GiveInventory("DERPAmmo",15);
					cmd=random(0,3);
				}
			}
			setstatelabel("spawn2");
		}
	give:
		DERP A 0{
			if(cmd!=1){
				A_PlaySound("weapons/rifleclick2",CHAN_AUTO);
				cmd=1;
			}
			if(countinv("DERPAmmo")&&(
				(
					(target.countinv("DERPUsable")&&health>0)
					||(target.countinv("DERPDEAD")&&health<=0)
				)||(
					countinv("DERPAmmo")==15
					&&target.A_JumpIfInventory("HDPistolMag",0,"null")
				)||(
					HDF.MaxInv(target,"HDPistolAmmo")
					-target.countinv("HDPistolAmmo")
					<countinv("DERPAmmo")
				)
			)){
				target.A_PlaySound("weapons/rifleclick",CHAN_AUTO);
				actor mmm=spawn("HD9mPMag",pos);
				if(mmm){
					mmm.A_ChangeVelocity(1,random(-1,1),2,CVF_RELATIVE);
					mmm.stamina=countinv("DERPAmmo");
					A_TakeInventory("DERPAmmo");
				}
			}else if(
				(!target.countinv("DERPUsable")&&health>0)
				||(!target.countinv("DERPDEAD")&&health<=0)
			){
				if(health>0)target.A_GiveInventory("DERPUsable");
				else target.A_GiveInventory("DERPDEAD");

				if(countinv("DERPAmmo")==15)target.A_GiveInventory("HDPistolMag",1);
				target.A_GiveInventory("HDPistolAmmo",countinv("DERPAmmo"));
				destroy();return;
			}
		}goto spawn;
	spawn2:
		DERP A 10 A_ClearTarget();
		goto patrol;
	patrol:
		DERP A 3{
			A_ClearTarget();
			A_LookEx(LOF_NOSOUNDCHECK, 0,512, 0,200, "see");
			UpdateCmd();
			if(cmd==0){ //turret
				A_SetAngle(angle+20);
			}else if(cmd>1){ //follow or patrol
				A_Wander();
				A_Recoil(-0.3);
			}
			//ambush(1) does nothing, not even make noise
			if(cmd!=1){
				A_PlaySound("derp/crawl",CHAN_BODY);
			}
		}loop;
	see:
		DERP A 0{
			if(getzat(0)==pos.z) bnodropoff=false;
			else bnodropoff=true;

			if(!countinv("DERPAmmo")) setstatelabel("noammo");
		}
		DERP AAAAAAAA 3{
			UpdateCmd();
			if(cmd==0){ //turret
				A_Chase("missile","missile",CHF_DONTMOVE|CHF_DONTTURN);
			}else if(cmd==2){ //patrol
				A_Chase();
				A_Recoil(-0.3);
			}else if(cmd==3){ //follow
				A_Wander();
				A_Recoil(-0.3);
			}
			//ambush(1) does nothing, not even make noise
			if(cmd!=1){
				A_PlaySound("derp/crawl",CHAN_BODY);
			}
		}
		goto patrol;
	noshot:
		DERP AAAAAAA 3{
			if(cmd>1){
				A_Wander();
				A_Recoil(-0.3);
				A_PlaySound("derp/crawl",CHAN_BODY,0.6);
			}
		}goto see;
	pain:
		DERP A 20{
			A_PlaySound("derp/crawl",CHAN_BODY);
			angle+=randompick(1,-1)*random(2,8)*10;
			pitch-=random(10,20);
			vel.z+=2;
		}
	missile:
		DERP A 0{
			//abort shot if ambush or follow
			UpdateCmd();
			if(cmd==1||cmd==3)setstatelabel("patrol");
		}
	ready:
		DERP A 0 A_PlaySound("derp/crawl",CHAN_BODY,0.6);
		DERP AAA 1 A_FaceTarget(20,20,0,0,FAF_TOP,-4);
		DERP A 0 A_JumpIfTargetInLOS(1,1);
		loop;
	aim:
		DERP A 0 A_JumpIf(!DerpTargetCheck(false),"noshot");
		DERP A 2{
			if(!DerpTargetCheck(false)) setstatelabel("noshot");
		}
		DERP A 0 DerpAlert("\cjEngaging hostile.");
	fire:
		DERP A 0 A_JumpIfHealthLower(1,"dead");
		DERP A 0 A_JumpIfInventory("DERPAmmo",1,"noreallyfire");
		goto noammo;
	noreallyfire:
		DERP A 0 A_FaceTarget(0.5,0.5,0,0,FAF_TOP,-4);
		DERP C 1 bright light("SHOT") DerpShot();
		DERP D 1 A_SpawnItemEx("HDSpent9mm", -3,1,-1, random(-1,-3),random(-1,1),random(-3,-4), 0,SXF_NOCHECKPOSITION|SXF_SETTARGET);
		DERP A 2{
			if(getzat(0)<pos.z) A_ChangeVelocity(cos(pitch)*-2,0,sin(pitch)*2,CVF_RELATIVE);
			else A_ChangeVelocity(cos(pitch)*-0.4,0,sin(pitch)*0.4,CVF_RELATIVE);
			A_TakeInventory("DERPAmmo",1);
		}
		DERP A 1{
			A_FaceTarget(10,10,0,0,FAF_TOP,-4);
			if(!target||target.health<1){  
				DerpAlert("\cf  Hostile eliminated.");
			}
		}
	yourefired:
		DERP A 0 A_JumpIfHealthLower(1,"patrol",AAPTR_TARGET);
		DERP A 0 A_JumpIfTargetInLOS("fire",2,JLOSF_DEADNOJUMP,256.0,0);
		DERP A 0 A_JumpIfTargetInLOS("aim",360,JLOSF_DEADNOJUMP,512.0,0);
		goto noshot;
		DERP A 0 A_CheckLOF("noshot",CLOFF_SKIPTARGET|CLOFF_JUMPNONHOSTILE|CLOFF_JUMPOBJECT, 0,0, 0,0, 7,0);
		goto fire;
	death:
		DERP A 0{
			if(master is "EnemyDERP") master.destroy();
			else DerpAlert("\cg  Operational fault.\cj Standby for repairs.");
			A_PlaySound("weapons/bigcrack",CHAN_AUTO);
			A_SpawnItemEx("HDSmoke",0,0,1, vel.x,vel.y,vel.z+1, 0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM);
			A_SetSolid();
			A_SpawnChunks("BigWallChunk",12);
		}
	dead:
		DERP A -1;
	noammo:
		DERP A 10{
			A_ClearTarget();
			DerpAlert("\cjOut of ammo. Await retrieval.");
			bnodropoff=true;
			if(!master)setstatelabel("dead");
		}
	chasemaster:
		DERP A 4{
			if(distance3d(master)<40){
				A_FaceMaster(30,0);
				A_PlaySound("derp/crawl",CHAN_BODY);
				A_Recoil(-0.4);
			}else A_SetTics(20);
		}loop;
	}
}


//keep the usable a separate actor so we can add more interfaces in the future
class DERPUsable:HDPickup{
	default{
		+inventory.transfer
		scale 0.6;
		inventory.amount 1; inventory.maxamount 1;
		inventory.icon "DERPEX";
		inventory.pickupmessage "Picked up a Defence, Engagement, Reconnaissance and Patrol robot.";
		inventory.pickupsound "derp/crawl";
		translation 0;
	}
	override void detachfromowner(){
		A_SetInventory("DERPAmmo",owner.countinv("DERPAmmo"));
		owner.A_TakeInventory("DERPAmmo");
		translation=owner.translation;
		super.detachfromowner();
	}
	states{
	pickup:
		TNT1 A 0{
			A_GiveInventory("DERPterm");
			A_GiveInventory("DERPATTog");
			A_GiveInventory("DERPtermTURRET");
			A_GiveInventory("DERPtermAMBUSH");
			A_GiveInventory("DERPtermPATROL");
			A_GiveInventory("DERPtermFOLLOW");
		}stop;
	use:
		TNT1 A 0 A_JumpIfInventory("HDPistolMag",1,"reallyuse");
		TNT1 A 0 A_JumpIfInventory("HDSMGMag",1,"reallyuse");
		TNT1 A 0 A_Print("\cd[DERP]\cj  Please insert a loaded 9mm magazine before deploying.");
		fail;
	reallyuse:
		TNT1 A 0{
			actor a;int b;
			[b,a]=A_SpawnItemEx("DERPBot",12,0,height-12, vel.x+cos(angle)*cos(pitch)*6,vel.y+sin(angle)*cos(pitch)*6,vel.z-sin(pitch)*6, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_ABSOLUTEMOMENTUM|SXF_SETMASTER|SXF_TRANSFERTRANSLATION|SXF_SETTARGET);
			a.A_GiveInventory("DERPAmmo",15);
			if(countinv("HDPistolMag"))A_TakeInventory("HDPistolMag",1,TIF_NOTAKEINFINITE);
			else if(countinv("HDSMGMag"))A_TakeInventory("HDSMGMag",1,TIF_NOTAKEINFINITE);
		}stop;
	spawn:
		DERP A -1;
	}
}



//ammo and status
class DERPAmmo:HDAmmo{
	default{
		+inventory.untossable
		inventory.maxamount 15;
	}
}
class DERPmode:InventoryFlag{
	default{
		inventory.maxamount 3;
	}
}
//dropped corpse
class DERPDEAD:DERPUsable{
	default{
		-inventory.invbar
	}
}



//controllers
class DERPterm:ActionItem{
	states{
	use:
		TNT1 A 0 A_Print("\cd[DERP]\cj List of available commands:\n             derpt   \cjturret mode\n             derpp   \cjpatrol mode\n             derptz   \cjambush mode\n             derppz   \cjfollow mode");
		fail;
	}
}
class DERPATTog:ActionItem{
	states{
	use:
		TNT1 A 0{
			if(countinv("DERPmode")==1){
				A_TakeInventory("DERPmode");
				A_Print("\cd[DERP]\ca  TURRET \cjmode");
			}else{
				A_TakeInventory("DERPmode");
				A_GiveInventory("DERPmode",1);
				A_Print("\cd[DERP]\cc  AMBUSH \cjmode");
			}
		}fail;
	}
}
class DERPtermTURRET:ActionItem{
	states{
	use:
		TNT1 A 0{
			A_TakeInventory("DERPmode");
			A_Print("\cd[DERP]\ca  TURRET \cjmode");
		}fail;
	}
}
class DERPtermAMBUSH:DERPtermTURRET{
	states{
	use:
		TNT1 A 0{
			A_SetInventory("DERPmode",1);
			A_Print("\cd[DERP]\cc  AMBUSH \cjmode");
		}fail;
	}
}
class DERPtermPATROL:DERPtermTURRET{
	states{
	use:
		TNT1 A 0{
			A_SetInventory("DERPmode",2);
			A_Print("\cd[DERP]\cg  PATROL \cjmode");
		}fail;
	}
}
class DERPtermFOLLOW:DERPtermTURRET{
	states{
	use:
		TNT1 A 0{
			A_SetInventory("DERPmode",3);
			A_Print("\cd[DERP]\cj  FOLLOW \cjmode");
		}fail;
	}
}


//evil roguebot
class EnemyDERP:DERPBot{
	default{
		-friendly
		translation 1;
	}
}

