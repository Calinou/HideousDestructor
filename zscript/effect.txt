// ------------------------------------------------------------
//   Misc. effects
// ------------------------------------------------------------

//debris actor: simplified physics, just bounce until dead and lie still, +noblockmap
//basically we just need to account for conveyors and platforms
class HDDebris:HDActor{
	bool stopped;
	int grav;
	double wdth;
	default{
		+noblockmap -solid -shootable +dontgib +forcexybillboard +notrigger +cannotpush
		height 2;radius 2;
		bouncesound "misc/casing2";bouncefactor 0.8;maxstepheight 2;
		+rollsprite;+rollcenter;
	}
	override void postbeginplay(){
		super.postbeginplay();
		stopped=false;
		grav=getgravity();
		if(bwallsprite)grav*=frandom(0.4,0.7);
		wdth=radius*1.8;
	}
	override void Tick(){
		if(globalfreeze||level.Frozen)return;
		if(stopped){
			actor.tick();
			if(vel==(0,0,0)){
				brelativetofloor=true;
				bnointeraction=true;
			}
			return;
		}else{
			vel.z-=grav;
			double spd=max(abs(vel.x),abs(vel.y))/wdth;
			vector2 frac=vel.xy/spd;
			if(bwallsprite)vel.xy+=(frandom(-1,1),frandom(-1,1));
			for(int i=0;i<spd;i++){
				if(!trymove(pos.xy+frac,true)){
					A_PlaySound(bouncesound);
					vel.xy+=(frandom(-spd,spd),frandom(-spd,spd));
					vel.xy*=-bouncefactor;
				}
			}
			addz(vel.z,true);
			if(
				pos.z<=floorz
				||pos.z+height>ceilingz
			){
				if(pos.z<=floorz)setz(floorz);else setz(ceilingz-height);
				if(abs(vel.z)>2){
					A_PlaySound(bouncesound);
					vel.xy+=(frandom(-spd,spd),frandom(-spd,spd));
				}
				vel.xy*=bouncefactor;
				vel.z*=-bouncefactor;
			}
			if(floorz==pos.z && max(abs(vel.x),abs(vel.y),abs(vel.z))<1){
				if(findstate("death"))setstatelabel("death");else destroy();
				if(bdestroyed)return; //if nexttic() is called below, it would crash
				stopped=true;
				setz(floorz);
				bmovewithsector=true;
			}
			nexttic();
		}
	}
}

//the wallchunk!
class WallChunk:HDDebris{
	default{
		+noteleport
		scale 0.16;bouncefactor 0.3;bouncesound "none";
	}
	int flip;
	override void postbeginplay(){
		super.postbeginplay();
		scale.x*=randompick(-1,1)*frandom(0.6,1.3);
		scale.y*=frandom(0.6,1.3);
		bwallsprite=randompick(0,0,0,1); //+wallsprite crashes software
		roll=random(0,3)*90;
		flip=random(1,4);
		if(!random(0,9))A_PlaySound("misc/wallchunks");
		frame=random(0,3);
	}
	states{
	spawn:
		DUST # 1{
			A_SetScale(-scale.x,scale.y);
			A_SetTics(flip);
			angle=angle+45*flip;
			if(pos.z-floorz<1)A_Countdown();
		}wait;
		---- BCD 0;
	death:
		---- A 1 A_SetTics(random(10,20)<<3);
		stop;
	}
}


//puffs for smoke, bulletpuffs, flames, etc.
class HDPuff:HDActor{
	double decel;double fade;double grow;int fadeafter;double minalpha;double startvelz;double grav;
	property decel:decel;
	property fade:fade;
	property grow:grow;
	property fadeafter:fadeafter;
	property minalpha:minalpha;
	property startvelz:startvelz;
	default{
		+puffgetsowner +hittracer
		+noblockmap -solid +cannotpush +nointeraction
		+rollsprite +rollcenter +forcexybillboard
		height 0;radius 0;renderstyle "translucent";gravity 0.1;

		hdpuff.decel 0.9;
		hdpuff.fade 0.98;
		hdpuff.fadeafter 10;
		hdpuff.grow 0.14;
		hdpuff.minalpha 0.1;
		hdpuff.startvelz 2.;
	}
	override void postbeginplay(){
		HDActor.postbeginplay();
		roll=random(0,3)*90;
		scale.x*=randompick(-1,1);
		grow*=scale.x;
		vel.z+=startvelz;
		grav=getgravity();
	}
	override void Tick(){
		if(globalfreeze||level.Frozen) return;

		alpha*=fade;
		if(alpha<minalpha){
			destroy();
			return;
		}
		scale.x+=grow;scale.y=scale.x;
		vel*=decel;
		vel.z-=grav;
		if(
			(vel.x||vel.y)
			&&!trymove(pos.xy+vel.xy,true)
		)vel.xy=(0,0);
		if(vel.z){
			if(
				(vel.z>0 && pos.z+8>ceilingz)||
				(vel.z<0 && pos.z<floorz)
			)vel.z=0;
			addz(vel.z);
		}
		if(pos.z>ceilingz)setz(ceilingz-8);
		else if(pos.z<floorz)setz(floorz);
		nexttic();
	}
}
class HDBulletPuff:HDPuff{
	default{
		stamina 5;missiletype "WallChunk";alpha 0.8;

		hdpuff.decel 0.7;
		hdpuff.fadeafter 0;
		hdpuff.fade 0.9;
		hdpuff.grow 0.1;
		hdpuff.minalpha 0.1;
		hdpuff.startvelz 4;
		gravity 0.1;
	}
	override void postbeginplay(){
		super.postbeginplay();
		A_PlaySound("misc/bullethit",0,0.02*stamina*stamina);
		A_ChangeVelocity(-0.4,0,frandom(0.1,0.4),CVF_RELATIVE);
		trymove(pos.xy+vel.xy,false);
		int stm=stamina;
		fadeafter=frandom(0,1);
		scale*=frandom(0.9,1.1);
		for(int i=0;i<stamina;i++){
			actor ch=spawn(missilename,self.pos,ALLOW_REPLACE);
			ch.vel=self.vel+(random(-stm,stm),random(-stm,stm),random(-2,12));
		}
	}
	states{
	spawn:
		PUFF CD 8;wait;
	}
}
class BulletPuffBig:HDBulletPuff{
	default{
		stamina 5;scale 0.6;
	}
}
class BulletPuffMedium:HDBulletPuff{
	default{
		stamina 4;scale 0.5;
	}
}
class BulletPuffSmall:HDBulletPuff{
	default{
		stamina 3;scale 0.4;missiletype "TinyWallChunk";
	}
}
class FragPuff:HDBulletPuff{
	default{
		stamina 1;scale 0.5;
	}
}
class PenePuff:HDBulletPuff{
	default{
		stamina 4;scale 0.6;
	}
	states{
	spawn:
		PUFF ABCD 2;wait;
	}
}
class HDSmoke:HDPuff{
	default{
		scale 1;gravity 0.05;alpha 0.7;
		hdpuff.fadeafter 3;
		hdpuff.decel 0.96;
		hdpuff.fade 0.96;
		hdpuff.grow 0.02;
		hdpuff.minalpha 0.005;
	}
	override void postbeginplay(){
		int count=hdmath.count("HDSmoke");
		if(count>100){
//			if(hd_debug)A_Log(string.format("%i is too many smoke",count));
			destroy();return;
		}
		super.postbeginplay();
	}
	states{
	spawn:
		//PUF2 B 4;//
		SMOK A 4;
		---- BCD -1{frame=random(1,3);}wait;
	}
}
class HDGunSmoke:HDSmoke{
	default{
		scale 0.3;renderstyle "add";alpha 0.4;
		hdpuff.decel 0.97;
		hdpuff.fade 0.8;
		hdpuff.grow 0.06;
		hdpuff.minalpha 0.01;
		hdpuff.startvelz 0;
	}
	override void postbeginplay(){
		super.postbeginplay();
		a_changevelocity(cos(pitch)*4,0,-sin(pitch)*4,CVF_RELATIVE);
		vel+=(frandom(-0.1,0.1),frandom(-0.1,0.1),frandom(0.4,0.9));
	}
}
class HDGunSmoker:IdleDummy{
	states{
	spawn:
	death:
		TNT1 A 1 nodelay{
			for(int i=0;i<15;i+=5){
				A_SpawnItemEx("HDGunSmoke",
					cos(pitch)*i,0,-sin(pitch)*i,
					cos(pitch)*4,0,-sin(pitch)*4,
					0,SXF_NOCHECKPOSITION
				);
			}
		}
		stop;
	}
}
class HDFlameRed:HDPuff{
	default{
		renderstyle "add";
		alpha 0.6;scale 0.3;gravity 0.05;
		
		hdpuff.fadeafter 3;
		hdpuff.grow -0.01;
		hdpuff.fade 0.8;
		hdpuff.decel 0.8;
		hdpuff.startvelz 4;
	}
	states{
	spawn:
		BAL1 ABCDE 1 bright light("REDFIRE");
	death:
		TNT1 A 0{
			grow=0.01;
			fade=0.9;
			decel=0.9;
			vel.z+=2;
			minalpha=0.1;
			addz(-vel.z);
			A_SetTranslucent(0.6,0);
			scale=(0.4,0.4);gravity=0.1;
		}
		//PUF2 C -1{frame=random(0,3);}//
		SMOK CD -1{frame=random(0,3);}
		wait;
	}
}
class HDSmokeSmall:HDFlameRed{
	override void postbeginplay(){
		hdactor.postbeginplay();
		setstatelabel("death");
	}
}


class HDExplosion:IdleDummy{
	default{
		+forcexybillboard
		alpha 0.9;renderstyle "add";
	}
	states{
	spawn:
	death:
		MISL B 0 nodelay{
			vel.z+=4;
			A_PlaySound("world/explode");
		}
		MISL BB 0 A_SpawnItemEx("ParticleWhiteSmall", 0,0,0, vel.x+random(-2,2),vel.y+random(-2,2),vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		MISL BBBB 0 A_SpawnItemEx("HDSmoke", 0,0,0, vel.x+frandom(-2,2),vel.y+frandom(-2,2),vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		MISL B 0 A_Jump(256,"fade");
	fade:
		MISL B 1 light("EX1") bright A_FadeOut(0.1);
		MISL C 1 light("EX2") bright A_FadeOut(0.2);
		MISL DD 1 light("EX3") bright A_FadeOut(0.2);
		TNT1 A 20;
		stop;
	}
}


//transfer sprite frame fader
//deathheight = amount to fade every 4 tics
class HDCopyTrail:IdleDummy{
	default{
		+noclip +rollsprite +rollcenter +nointeraction
		deathheight 0.6;
	}
	states{
	spawn:#### A -1;stop;
	}
	override void Tick(){
		clearinterpolation();
		if(globalfreeze||level.Frozen)return;
		scale.x+=frandom(-0.01,0.01);scale.y=scale.x;
		accuracy++;
		if(accuracy>=4){
			accuracy=0;
			alpha*=deathheight;
			vel*=deathheight;
			if(alpha<0.04){destroy();return;}
		}
		setxyz(pos+vel);
		//don't even bother with nexttic, it's just one frame!
	}
}
extend class HDActor{
	void A_Trail(double spread=0.6){
		vector3 v;
		v=(random(-10,10),random(-10,10),random(-10,10));
		if(v==(0,0,0)) v.z=1;
		v=v.unit();
		A_SpawnItemEx("HDCopyTrail",
			0,0,0,vel.x+v.x,vel.y+v.y,vel.z+v.z,0,
			SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSCALE|
			SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERROLL|
			SXF_ABSOLUTEVELOCITY|SXF_TRANSFERTRANSLATION|SXF_NOCHECKPOSITION|
			SXF_TRANSFERSTENCILCOL|SXF_TRANSFERPOINTERS
		);
	}
}

//distant noise generator designed to imitate speed of sound
//generates a noisemaker for each player with its own delay based on distance
//special usages: deathsound=sound to make; mass=length of the sound
class DistantDummy:IdleDummy{
	default{
		deathsound "world/riflefar";mass 20;
	}
	double dist;
	states{
	spawn:
		TNT1 A 0 nodelay{
			if(target)A_AlertMonsters();
			for(int i=0;i<MAXPLAYERS;i++){
				if((playeringame[i])&&(players[i].mo)){
					dist=(players[i].mo.pos-pos).length();
					if(dist>HDCONST_MINDISTANTSOUND){ //don't bother if too close
						actor id=spawn("DistantNoisemaker",pos);
						if(id){
							id.target=players[i].mo;
							id.deathsound=self.deathsound;
							id.stamina=dist/HDCONST_SPEEDOFSOUND;
							id.mass=self.mass;
						}
					}
				}
			}
		}stop;
	}
}
class DistantNoisemaker:IdleDummy{
	default{
		stamina 10;mass 20;
		deathsound "world/riflefar";
	}
	states{
	spawn:
		TNT1 A 1 nodelay A_SetTics(stamina);
		TNT1 A 0 A_Jump(256,"spawn2");
	spawn2:
		TNT1 A 0 A_PlaySound(deathsound,CHAN_AUTO,1,0,24);
		TNT1 A 1{
			if(target && mass>0){
				self.mass--;
				setxyz(target.pos);
			}else{destroy();return;}
		}wait;
	}
}
class DistantRifle:DistantDummy{
	default{deathsound "world/riflefar";mass 18;}
}
class DistantShotgun:DistantDummy{
	default{deathsound "world/shotgunfar";mass 34;}
}
class DistantRocket:DistantDummy{
	default{deathsound "world/rocketfar";mass 21;}
}
class DistantPlasma:DistantDummy{
	default{deathsound "world/plasmafar";mass 14;}
}
class DistantBFG:DistantDummy{
	default{deathsound "world/bfgfar";mass 44;}
}
class DoubleDistantRifle:DistantRifle{
	override void postbeginplay(){
		super.postbeginplay();
		spawn("DistantRifle",pos,ALLOW_REPLACE);
	}
}
class DoubleDistantShotgun:DistantShotgun{
	override void postbeginplay(){
		super.postbeginplay();
		spawn("DistantShotgun",pos,ALLOW_REPLACE);
	}
}


//Quake effect affecting each player differently depending on distance
//DistantQuaker.Quake(self,8,40,4096,10,256,512,256);
class DistantQuaker:IdleDummy{
	int intensity;
	double frequency;
	bool wave;
	//Quake effect affecting each player differently depending on distance
	//DistantQuaker.Quake(self,8,40,4096,10,256,512,256);
	static void Quake(
		actor caller,
		int intensity=3,
		int duration=35,
		int quakeradius=1024,
		int frequency=10,
		int speed=HDCONST_SPEEDOFSOUND,
		int minwaveradius=HDCONST_MINDISTANTSOUND,
		int dropoffrate=HDCONST_MINDISTANTSOUND
	){
		if(
			caller.ceilingpic==skyflatnum
			||caller.ceilingz-caller.floorz>HDCONST_MINDISTANTSOUND
		){
			intensity=clamp(intensity-1,1,9);
			duration*=0.9;
		}
		double dist;
		for(int i=0;i<MAXPLAYERS;i++){
			if(playeringame[i] && players[i].mo){
				dist=players[i].mo.distance3d(caller);
				if(dist<=quakeradius){
					let it=DistantQuaker(caller.spawn("DistantQuaker",players[i].mo.pos));
					if(it){
						if(dist<=dropoffrate)it.intensity=intensity;
							else it.intensity=clamp(intensity-floor(dist/dropoffrate),1,9);
						if(dist>minwaveradius)it.wave=true;else it.wave=false;  
						if(it.intensity<3)it.deathsound="null";
							else it.deathsound="world/quake";
						it.stamina=floor(dist/speed);
						it.mass=duration;
						it.frequency=frequency;
						it.target=players[i].mo;
					}
				}
			}
		}
	}
	states{
	spawn:
		TNT1 A 1 nodelay A_SetTics(stamina);
		TNT1 A 0{
			if(wave){
				A_PlaySound("weapons/subfwoosh",CHAN_AUTO,0.1*intensity);
				if(target && target.pos.z<target.floorz+8)
					A_QuakeEx(0,0,intensity,mass,0,16,deathsound,
					QF_SCALEDOWN|QF_WAVE,0,0,frequency,0,mass*0.62);
			}else{
				A_QuakeEx(intensity*2,intensity*2,intensity*2,mass,0,16,deathsound,
				QF_SCALEDOWN,highpoint:mass*0.62);
			}
		}
		TNT1 A 1{
			if(target && mass>0){
				mass--;
				setxyz(target.pos);
			}else{
				destroy();
				return;
			}
		}wait;
	}
}


//SO MUCH BLOOD
class BloodSplatSilent:HDPuff{
	default{
		alpha 0.8;gravity 0.3;

		hdpuff.startvelz 1.6;
		hdpuff.fadeafter 0;
		hdpuff.decel 0.86;
		hdpuff.fade 0.88;
		hdpuff.grow 0.03;
		hdpuff.minalpha 0.1;
	}
	states{
	spawn:
		BLUD ABC 4{
			if(floorz==pos.z){
//				actor aaa=spawn("HDBloodTrailFloor",pos); //maybe???
//				if(aaa){aaa.scale=scale;aaa.alpha=alpha;}
				destroy();
			}
		}wait;
	}
}
class BloodSplat:BloodSplatSilent replaces Blood{
	override void postbeginplay(){
		super.postbeginplay();
		A_PlaySound("misc/bulletflesh",0,0.02);
	}
}
class BloodSplattest:BloodSplat replaces BloodSplatter{}
class NotQuiteBloodSplat:BloodSplat{
	override void postbeginplay(){
		super.postbeginplay();
		A_PlaySound("misc/bulletflesh",0,0.02);
		actor p=spawn("PenePuff",pos,ALLOW_REPLACE);
		p.target=target;p.master=master;p.vel=vel*0.3;
		scale*=frandom(0.2,0.5);
	}
}
class BloodTrail:HDPuff{
	default{
		alpha 0.7;scale 0.2;gravity 0.02;
	}
	states{
	spawn:
		BLOD A -1;
	}
}
class MegaBloodSplatter:IdleDummy{
	override void postbeginplay(){
		actor.postbeginplay();
		if(!A_CheckSight("null")){
			for(int i=0;i<20;i++){
				actor b=spawn("BloodSplatSilent",self.pos,ALLOW_REPLACE);
				b.vel=self.vel+(random(-4,4),random(-4,4),random(-1,7));
				b.translation=self.translation;
			}
		}
	}
}
class HDBloodTrailFloor:Actor{
	default{
		+flatsprite +noblockmap
		+nointeraction +movewithsector
		height 0;radius 0;alpha 0.6;
	}
	override void postbeginplay(){
		super.postbeginplay();
		angle=random(0,3)*90;
		frame=random(0,3);
		scale*=frandom(0.6,1.2);
		setz(floorz);
	}
	override void tick(){
		super.tick();
	}
	states{
	spawn:
		BLUD # 100 nodelay A_FadeOut(0.05);
		wait;
		BLUD ABCD 0;
		stop;
	}
}


//Ominous shards of green energy
class FragShard:IdleDummy{
	default{
		renderstyle "add";+forcexybillboard;scale 0.3;alpha 0;
	}
	override void tick(){
		if(globalfreeze||level.Frozen) return;
		trymove(self.pos.xy+vel.xy,true);
		if(alpha<1)alpha+=0.05;
		addz(vel.z,true);
		nexttic();
	}
	states{
	spawn:
		BFE2 D 20 bright{
			if(stamina>0) A_SetTics(stamina);
		}stop;
	}
}
extend class HDActor{
	//A_ShardSuck(self.pos+(0,0,32),20);
	virtual void A_ShardSuck(vector3 aop,int range=4){
		actor a=self.spawn("FragShard",aop);
		a.setxyz(aop+(random(-range,range)*6,random(-range,range)*6,random(-range,range)*6));
		a.vel=(aop-a.pos)*0.05;
		a.stamina=20;
	}
}

//Teleport fog
class TeleFog:IdleDummy replaces TeleportFog{
	default{
		renderstyle "add";alpha 0.6;
	}
	override void postbeginplay(){
		actor.postbeginplay();
		scale.x*=randompick(-1,1);
		A_PlaySound("misc/teleport");
	}
	states{
	spawn:
		TFOG AA 2 nodelay bright light("BFS1") A_FadeIn(0.2);
		TFOG BBCCCDDEEFGHII 2 bright light("BFS1"){
			A_ShardSuck(self.pos+(0,0,random(1,4)*12+24));
		}
		TFOG JJJJ random(2,3) bright light("BFS1"){
			alpha-=0.2;
			A_ShardSuck(self.pos+(0,0,random(1,4)*12+24));
		}stop;
	nope:
		TNT1 A 20 light("BFS1");
		stop;
	}
}


