// ------------------------------------------------------------
//   The player!
// ------------------------------------------------------------

class HDPlayerPawn:PlayerPawn{
	vector3 lastpos;vector3 lastvel;double lastangle;double lastpitch;
	vector3 poschange;double anglechange;double pitchchange;
	double zat;
	actor playercorpse;
	name lastweapon;
	bool barehanded;
	bool mustwalk;bool cansprint;
	double feetangle;
	int runwalksprint;
	int stunned;
	default{
		+interpolateangles
	}
	override void PostBeginPlay(){
		super.PostBeginPlay();
		lastpos=pos;
		lastangle=angle;
		lastpitch=pitch;
		lastvel=vel;
		beatcap=35;beatmax=35;
		feetangle=angle;
	}
	states{
	see0:
		"----" A 0{
			A_TakeInventory("IsSupported");
			if((zat>=pos.z)&&(random(1,3)==3)){  
				if(health<random(35,45)){
					if(countinv("IsCrouching")<1){A_ChangeVelocity(random(-4,2),frandom(-3,3),random(-1,0),CVF_RELATIVE);}
					A_ScaleVelocity(frandom(0.7,1.0));
				}else if(health<random(60,65)){
					if(countinv("IsCrouching")<1){A_ChangeVelocity(random(-2,1),frandom(-1,1),random(-1,0),CVF_RELATIVE);}
					A_ScaleVelocity(frandom(0.9,1.0));
				}
			}
			if(stunned>0){
				viewbob=1.4;
				return resolvestate("seestun");
			}
			else if(cansprint && runwalksprint>0){
				viewbob=1.2;
				return resolvestate("seesprint");
			}
			else if(runwalksprint<0){
				return resolvestate("seewalk");
			}
			return resolvestate(null);
		}
		"####" ABCD 4{
			if(viewbob>0.8){viewbob-=0.1;}
			else if(viewbob<0.8){viewbob+=0.1;}
		}
		"----" A 0{return resolvestate("spawn");}
	seestun:
		"####" ABCD random(2,10) {
			A_GiveInventory("IsMoving",2);
		}
		"----" A 0{return resolvestate("spawn");}
	seewalk:
		"####" ABCD 6 {
			if(height>30 && runwalksprint<0){
				A_TakeInventory("IsMoving",5);
				if(viewbob>1.2){viewbob=1.2;}
				else if(viewbob>0.2){viewbob-=0.1;}
			}
			else if(height<30){viewbob=1.8;}
			else if(viewbob<0.8){viewbob+=0.1;}
		}
		"----" A 0{return resolvestate("spawn");}
	seesprint:
		"----" A 4 A_TakeInventory("PowerFrightener");
		"####" B 2;
		"####" C 4;
		"####" D 2;
		"----" A 0{return resolvestate("spawn");}
	}
	//HIGHLY EXPERIMENTAL: ignore some collisions in the space between head and shoulders
	override bool cancollidewith(actor other,bool passive){
		if(height<40) return super.cancollidewith(other,passive); //ignore if crouched
		int dx=floor(abs(other.pos.x-self.pos.x));
		int dy=floor(abs(other.pos.y-self.pos.y));
		if(dy>dx) dx=dy;  
		int dz=floor(other.pos.z-self.pos.z);
		if(
			dz>44 //bottom of head
			&& dx>other.radius+3 //head radius
		){
			return false;
		}
		return super.cancollidewith(other,passive);
	}
	override void Tick(){
		if (!player||!player.mo||player.mo!= self){Super.Tick();return;} //anti-voodoodoll

		poschange=lastpos-pos;
		anglechange=HDMath.AngleChange(lastangle,angle);
		pitchchange=lastpitch-pitch;
		lastpos=pos;
		lastangle=angle;
		lastpitch=pitch;
		zat=getzat();

		if(getcvar("gender")==0){A_GiveInventory("IsMale");A_TakeInventory("IsFemale");}
		else if(getcvar("gender")==1){A_GiveInventory("IsFemale");A_TakeInventory("IsMale");}
		else {A_TakeInventory("IsFemale");A_TakeInventory("IsMale");}

		super.Tick();

		//only do anything below this while the player is alive!
		if(bkilled) return;
		HeartTicker();

		//"falling" damage
		int fall=(lastvel-vel).length();
		if(1==0 && fall>10){
			A_PlaySound("weapons/smack",CHAN_AUTO);
			if(barehanded)fall-=4;
			if(fall>15){
				if(countinv("PowerStrength"))fall*=0.5;
				damagemobj(self,self,fall*random(1,4),"falling");
				stunned+=fall*random(5,10)*4;
				beatmax-=fall*0.5;
				if(!barehanded && random(1,fall)>7){
					A_DropInventory(player.readyweapon.getclassname());
				}
			}
		}
		lastvel=vel;
		if(stunned>0)stunned--;

		//see if player is intentionally walking, running or sprinting
		//-1 = walk, 0 = run, 1 = sprint
		if(getplayerinput(MODINPUT_BUTTONS) & BT_SPEED) runwalksprint=1;
		else if(getcvar("cl_run"))runwalksprint=0;
		else runwalksprint=-1;

		//check if hands free
		if(
			(player.readyweapon is "Ring")
			||(player.readyweapon is "HDFragGrenades")
			||(player.readyweapon is "NullWeapon")
		)barehanded=true;else barehanded=false;

		//don't know where to put this: reduce stepheight if crouched
		if(height<40 && !barehanded) maxstepheight=12;
		else maxstepheight=24;

		//jumping/mantling
		JumpCheck();

		//turning mods
		MuzzleBlock();
		Gunertia();

		//conditions for forcing walk
		if(
			stunned>0
			||(beatmax<14 && !(getplayerinput(MODINPUT_OLDBUTTONS) & BT_SPEED))
			||StumbleCheck()
		){
			mustwalk=true;
			runwalksprint=-1;
		}else mustwalk=false;

		//conditions for allowing sprint
		if(
			!mustwalk
			&& barehanded
			&& (
				beatmax>20 ||
				(beatmax>12 && getplayerinput(MODINPUT_OLDBUTTONS) & BT_SPEED) ||
				countinv("PowerStrength")
			)
		)cansprint=true;else cansprint=false;

		//apply all movement speed modifiers
		if(mustwalk || runwalksprint<0) speed=0.4;
		else if(runwalksprint>0 && cansprint){
			if(!getplayerinput(MODINPUT_SIDEMOVE))speed=2.2;
			else if(getplayerinput(MODINPUT_FORWARDMOVE)<0)speed=1.6;
		}
		else speed=1;
		if(countinv("PowerStrength"))speed*=1.5;

		//lowering weapon
		if(
			getplayerinput(MODINPUT_BUTTONS) & BT_SPEED
			|| getplayerinput(MODINPUT_BUTTONS) & BT_JUMP
		){
			if(!barehanded){
				lastweapon=player.readyweapon.getclassname();
				if(!countinv("NullWeapon"))A_GiveInventory("NullWeapon");
				A_GiveInventory("NulledWeapon");
				A_SelectWeapon("NullWeapon");
			}
		}else if(
			player.readyweapon is "NullWeapon"
			&& countinv(lastweapon)>0
		){
			A_SelectWeapon(lastweapon);
		}

		//move pivot point a little behind the player's view
		if(zat-pos.z==0){
			if(abs(anglechange)>1){
				int dir=90;
				if(anglechange<0) dir=-90;
				trymove(self.pos.xy+(cos(angle+dir)*0.8,sin(angle+dir)*0.8),false);
			}
			if(abs(pitchchange)>1 && -30<pitch<30){
				double rate=0.1;
				trymove(self.pos.xy-(cos(angle)*rate*pitchchange,
				sin(angle)*rate*pitchchange),false);
			}
		}

		//check use key
		if(
			getplayerinput(MODINPUT_BUTTONS) & BT_USE
			&& !(getplayerinput(MODINPUT_OLDBUTTONS) & BT_USE)
		){
			vector3 ap=(
				cos(pitch)*cos(angle),
				cos(pitch)*sin(angle),
				-sin(pitch)
			);
			actor a=spawn("userpickerupper",ap+(0,0,height-12));
			a.target=self;
			a.vel=ap*4;
		}
	}
}



//Camera actor for player's scope
class ViewDummy:IdleDummy{
	override void postbeginplay(){
		A_CheckProximity("spawndropped","PlayerPawn",10,1, CPXF_COUNTDEAD|CPXF_SETMASTER|CPXF_ANCESTOR|CPXF_CLOSEST|CPXF_NOZ);
	}
	override void Tick(){
		if(!master){
			destroy();
			return;
		}else{
			self.angle=master.angle;
			self.pitch=master.pitch;
			self.setxyz(master.pos+(
				cos(pitch)*cos(angle)*6,
				cos(pitch)*sin(angle)*6,
				sin(-pitch)*6+master.height-4
			));
			nexttic();
		}
	}
}

//Projectile for using things that aren't switches and doors
class userpickerupper:hdactor{
	default{
		projectile;
		height 3;radius 3;+solid;
	}
	states{
	spawn:
		BLET A 1 nodelay{
			if(vel.xy==(0,0))vel.x=minvel;
			for(int i=0;i<10;i++){
				if(!trymove(pos.xy+vel.xy,true)){
					if(blockingline) return;
					if(blockingmobj){
						if( (//blockingmobj.findstate("grabbed",true) && (
							blockingmobj is "Weapon"
							|| blockingmobj is "CustomInventory"
							|| blockingmobj is "Inventory")
						){
							blockingmobj.target=self.target;
							blockingmobj.vel-=vel*2+(0,0,target.height);
							blockingmobj.vel+=target.vel;
						}
					}
				}
				addz(vel.z);
			}
		}stop;
	}
}