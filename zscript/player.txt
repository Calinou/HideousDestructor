// ------------------------------------------------------------
// The player!
// ------------------------------------------------------------
const HDCONST_SPRINTMAXHEARTRATE=20;
const HDCONST_SPRINTFATIGUE=30;
const HDCONST_WALKFATIGUE=40;
const HDCONST_DAMAGEFATIGUE=80;
class HDPlayerPawn:PlayerPawn{
	vector3 lastpos;vector3 lastvel;double lastangle;double lastpitch;double lastheight;
	bool teleported;

	int oldinput;
	double oldfm;double oldsm;
	double iyaw;double ipitch;
	double zat;

	actor playercorpse;
	actor scopecamera;

	weapon lastweapon;
	bool barehanded;
	
	double overloaded;

	bool mustwalk;bool cansprint;
	int runwalksprint;

	double feetangle;

	int stunned;
	int fatigue;
	int nocrosshair;

	bool hasgrabbed;
	int corpsekicktimer;

	default{
		+interpolateangles
		-telestomp
		telefogsourcetype "";
		telefogdesttype "";

		-playerpawn.nothrustwheninvul
		-pickup
		+forceybillboard //zoom actor will fuck up otherwise

		height 52;radius 12;
		mass 150;gibhealth 180;

		player.viewheight 48;
		player.attackzoffset 21;
		player.damagescreencolor "12 06 04";
		player.jumpz 0;
		player.colorrange 112,127;
		maxstepheight 24;
		player.gruntspeed 16.0;
		player.displayname "Marine";
		player.crouchsprite "PLYC";
	}
	override void PostBeginPlay(){
		super.PostBeginPlay();
		lastpos=pos;
		lastangle=angle;
		lastpitch=pitch;
		lastvel=vel;
		lastheight=height;
		beatcap=35;beatmax=35;
		feetangle=angle;

		scopecamera=spawn("ScopeCamera",pos+(0,0,height-6));
		scopecamera.target=self;

		if(player&&player.bot&&hd_nobots&&!countinv("WipedOut"))ReplaceBot();
		else if(hd_forcepistolstart){
			A_GiveInventory("DoomguyLoadout");
		}
		A_TakeInventory("NullWeapon");

		A_SetTeleFog("TeleportFog","TeleportFog");
	}
	states{
	spawn:
		PLAY A 4;
	spawn2:
		#### E 5;
		---- A 0{
			A_TakeInventory("IsMoving");
		}
		---- AAAAAA 5{
			if(
				!barehanded
				&&zerk<1
				&&zat==pos.z
				&&!countinv("IsSupported")
				&&!countinv("IsMoving")
				&&!countinv("WeaponBusy")
			){
				vector3 posbak=pos;
				setxyz(pos+(cos(angle),sin(angle),0)*16);
				double zat2=getzat();
				setxyz(posbak);
				zat2-=(zat+height);
				if(-27<zat2 && zat2<0){
					A_GiveInventory("IsSupported");
					muzzleclimb1.y-=0.1;
					muzzleclimb2.y+=0.05;
					muzzleclimb3.y+=0.05;
					A_PlaySound("weapons/rifleclick2",CHAN_BODY,0.3);
				}else A_TakeInventory("IsSupported");
			}else if(countinv("WeaponBusy"))A_TakeInventory("IsSupported");
		}
		loop;
	see:
		//this state is needed for the player setup preview to work
		---- A 0 {setstatelabel("see0");}
	seepreview:
		PLAY ABCDABCDABCDABCDABCD 4;
		PLAY E 25;
		PLAY FEEF 1;
		PLAY E 15;
		PLAY F 1;
		PLAY E 15;
		PLAY FEEFEEF 1;
		PLAY E 35;
		loop;
	see0:
		---- A 0{
			A_TakeInventory("IsSupported");
			overloaded=CheckEncumbrance();
			feetangle=angle;
			if(zat>=pos.z && !random(1,2)){
				if(health<random(35,45)){
					if(player.crouchfactor<0.7)A_ChangeVelocity(
						random(-4,2),frandom(-3,3),random(-1,0),CVF_RELATIVE
					);
					vel.xy*=frandom(0.7,1.0);
				}else if(health<random(60,65)){
					if(player.crouchfactor<0.7)A_ChangeVelocity(
						random(-2,1),frandom(-1,1),random(-1,0),CVF_RELATIVE
					);
					vel.xy*=frandom(0.9,1.0);
				}
			}
			if(stunned){
				return resolvestate("seestun");
			}
			else if(cansprint && runwalksprint>0){
				if(bloodpressure<30)bloodpressure+=2;
				return resolvestate("seesprint");
			}
			else if(runwalksprint<0){
				return resolvestate("seewalk");
			}
			return resolvestate(null);
		}
		#### ABCD 4;
		---- A 0{return resolvestate("spawn");}
	seestun:
		#### ABCD random(2,10) {
			A_GiveInventory("IsMoving",2);
		}
		---- A 0{return resolvestate("spawn");}
	seewalk:
		#### ABCD 6 {
			if(height>30 && runwalksprint<0)A_TakeInventory("IsMoving",5);
		}
		---- A 0{return resolvestate("spawn");}
	seesprint:
		---- A 4 A_TakeInventory("PowerFrightener");
		#### B 2;
		#### C 4;
		#### D 2;
		---- A 0{return resolvestate("spawn");}

	missile:
		#### E 4{
			overloaded=CheckEncumbrance();
			if(
				player&&hdweapon(player.readyweapon)
			)hdweapon(player.readyweapon).notshot=0;
			A_TakeInventory("PowerFrightener");
		}
		---- A 0 A_Jump(256,"spawn2");
	melee:
		#### F 2 bright light("SHOT"){
			if(findinventory("HDBlurSphere"))
				HDBlursphere(findinventory("HDBlurSphere")).intensity-=100;
			if(
				player&&hdweapon(player.readyweapon)
			)hdweapon(player.readyweapon).notshot=0;
			A_TakeInventory("PowerFrightener");
			if(!random(0,5)){A_GiveInventory("EvadeNow",1,AAPTR_PLAYER_GETTARGET);}
		}
		---- A 0 A_Jump(256,"missile");
	}
	override void Tick(){
		if (!player||!player.mo||player.mo!=self){Super.Tick();return;} //anti-voodoodoll

		lastpos=pos;
		zat=getzat();

		//log all new inputs
		int input=player.cmd.buttons;
		double fm=player.cmd.forwardmove;
		double sm=player.cmd.sidemove;

		//only do anything below this while the player is alive!
		if(bkilled||health<1){
			super.Tick();
			return;
		}

		//set pitch and angle based on raw input to be modified later
		//DO NOT use these with MovePlayer
		iyaw=player.cmd.yaw*(360./65536.);
		ipitch=player.cmd.pitch*(360./65536.);



		super.Tick();



		HeartTicker(fm,sm,input);
		if(inpain>0)inpain--;

		//prevent odd screwups that leave you unable to throw grenades or something
		if(!countinv("Ring"))GiveBasics();
		if(!player.readyweapon)A_SelectWeapon("Ring");

		//same thing with scope camera
		if(!scopecamera)scopecamera=spawn("ScopeCamera",pos);
		scopecamera.target=self;

		//check if teleported
		//fastest you can voluntarily go (berserk, invuln, soulsphere) is mid-90s
		if((lastpos-pos).length()>100)teleported=true;else teleported=false;

		//if this is put into playermove bad things happen
		if(!teleported)TurnCheck();
		JumpCheck(fm,sm);
		CrouchCheck();

		//prevent some support exploits
		if(max(abs(vel.x),abs(vel.y),abs(vel.z))>1)A_TakeInventory("IsSupported");

		//add inventory flags for inputs
		if(
			input&BT_RELOAD
			||input&BT_USER1
			||input&BT_USER2
			||input&BT_USER3
			||input&BT_USER4
		)A_GiveInventory("WeaponBusy");
		if(runwalksprint>=0&&(fm||sm))A_GiveInventory("IsMoving");

		//"falling" damage
		int fallvel=0;
		if(!teleported)fallvel=(lastvel-vel).length();
		if(fallvel>10){
			if(barehanded)fallvel-=4;
			if(fallvel<=15)A_PlaySound("weapons/smack",CHAN_AUTO,0.4);
			else{
				A_PlaySound("weapons/smack",CHAN_AUTO);
				if(countinv("PowerStrength"))fallvel*=0.5;
				int fdmg=random(fallvel*2,fallvel*3);
				damagemobj(self,self,fdmg,"falling");
				stunned+=fdmg*random(20,25);
				beatmax-=fallvel*0.5;
				if(random(1,fallvel)>7){
					if(player.readyweapon && !(player.readyweapon is "Ring"))
						A_DropInventory(player.readyweapon.getclassname());
				}
			}
		}
		stunned=max(stunned-1,0);


		//see if player is intentionally walking, running or sprinting
		//-1 = walk, 0 = run, 1 = sprint
		if(input & BT_SPEED) runwalksprint=1;
		else if(6400<max(abs(fm),abs(sm)))runwalksprint=0;
		else runwalksprint=-1;

		//check if hands free
		if(
			(player.readyweapon is "Ring")
			||(player.readyweapon is "HDFragGrenades")
			||(player.readyweapon is "Tripwire")
			||(player.readyweapon is "NullWeapon")
		)barehanded=true;else barehanded=false;

		//don't know where to put this: reduce stepheight if crouched
		if(height<40 && !barehanded) maxstepheight=12;
		else maxstepheight=24;


		//conditions for forcing walk
		if(
			stunned
			||(!zerk && fatigue>HDCONST_WALKFATIGUE && stimcount<8)
			||StumbleCheck(fm,sm)
			||health<25
		){
			mustwalk=true;
			runwalksprint=-1;
		}else mustwalk=false;

		//conditions for allowing sprint
		if(
			!mustwalk
			&&barehanded
			&&(
				zerk||
				stimcount>10||
				fatigue<HDCONST_SPRINTFATIGUE
			)
		)cansprint=true;else cansprint=false;

		//encumbrance
		double maxspeed=min(
			2.8
			*(countinv("PowerStrength")?1.5:1.)
			*(height<40?0.6:1.),
			countinv("WornRadsuit")?1.8:
			(countinv("BlackArmour")?2.2:
			(countinv("BlueArmour")?2.6:
			countinv("GreenArmour")?3.0:999.))
		);
		if(overloaded>0){
			maxspeed=max(0.1,4.-overloaded);
			if(maxspeed<0.36){
				viewbob=clamp(viewbob+0.2,0,1.4);
				mustwalk=true;
				cansprint=false;
			}
			else if(maxspeed<0.4){
				viewbob=clamp(viewbob+0.1,0,1.3);
				cansprint=false;
			}else if(maxspeed<1.){
				viewbob=clamp(viewbob+0.1,0,1.2);
				cansprint=false;
			}else if(overloaded<1.2){
				viewbob=clamp(viewbob+0.1,0,1.1);
			}
		}

		//apply all movement speed modifiers
		speed=1.-overloaded*0.02;
		//walk
		if(mustwalk||runwalksprint<0)speed=0.36;
		else if(cansprint && runwalksprint>0){
			//sprint
			if(!sm && fm>0)speed=2.8;
			else speed=1.6;
		}
		//cap speed depending on weapon status
		if(countinv("WeaponBusy"))speed=min(speed,0.6);
		else if(
			//weapons so bulky they get in the way physically
			//as a rule of thumb, anything that uses the "swinging" weapon bob
			player.readyweapon is "Vulcanette"||
			player.readyweapon is "BFG9k"
		)speed=min(speed,0.8);
		if(countinv("PowerStrength"))speed*=1.5;
		if(height<40)speed*=0.6;
		speed=min(speed,maxspeed);

		//then snap to 1 of only 3 speeds if necessary
		if(multiplayer && hd_3speed){
			if(speed>2.)speed=2.6;  
			else if(speed>0.5)speed=1.;
			else speed=0.36;
		}


		//lowering weapon for sprint/mantle/jump
		if(
			input & BT_SPEED
			||input & BT_JUMP
		){
			if(!barehanded){
				if(player.readyweapon)lastweapon=player.readyweapon;
				if(!countinv("NullWeapon"))A_GiveInventory("NullWeapon");
				A_GiveInventory("NulledWeapon");
				A_SelectWeapon("NullWeapon");
			}
		}else if(
			player.readyweapon is "NullWeapon"
		){
			if(lastweapon&&lastweapon.owner==self)A_SelectWeapon(lastweapon.getclassname());
			else A_SelectWeapon("Ring");
		}else if(player.readyweapon is "Ring")lastweapon=null;

		//display crosshair
		if(
			countinv("WeaponBusy")||
			countinv("PowerInvulnerable")||
			(
				input&BT_RELOAD
//				||input&BT_USER1
//				||input&BT_USER2
				||input&BT_USER3
				||input&BT_USER4
				||input&BT_JUMP
			)||
			abs(iyaw)>4096
		)nocrosshair=12;
		else if(
			player.fov>120||player.fov<80
		)nocrosshair=1;
		else nocrosshair--;

		//check use key
		if(input & BT_USE){
			bpickup=true;
			if(!(oldinput & BT_USE)){
				hasgrabbed=false;
			}
			//pickerupper
			overloaded=CheckEncumbrance();
			if(!hasgrabbed){
				vector3 ap=(
					cos(pitch)*cos(angle),
					cos(pitch)*sin(angle),
					-sin(pitch)
				);
				actor a=spawn("userpickerupper",pos-ap+(0,0,height-16));
				a.target=self;
				a.vel=ap*4;
			}
			if(!corpsekicktimer && height>45 && beatmax>10 && zat==pos.z){
				actor k=spawn("fastprojectile",pos);k.angle=angle;
				k.A_SetSize(4,12);//k.bfloorhugger=true;
				k.A_ChangeVelocity(5,0,0,CVF_RELATIVE);
				k.A_SetSize(6,10);k.target=self;
				for(int i=7;i;i--){
					if(!k.TryMove(k.pos.xy+k.vel.xy,true) && k.blockingmobj){
						i=1;
						if(
							k.blockingmobj.bcorpse
							||k.blockingmobj is "HDFragGrenade"
							||k.blockingmobj is "HDFragGrenadeRoller"
						){
							int forc=80;if(zerk>0)forc*=3;
							corpsekicktimer=20+unstablewoundcount*0.5;
							k.blockingmobj.vel+=(k.vel+(0,0,4))*forc/k.blockingmobj.mass;
							k.blockingmobj.A_PlaySound("misc/punch");
						}else if(
							k.blockingmobj.bismonster
							||(
								k.blockingmobj is "PlayerPawn"
								&& !isteammate(k.blockingmobj)
							)
						){
							corpsekicktimer=17+unstablewoundcount*0.5;
							A_SpawnItemEx("KickProjectile",0,0,4,vel.x,vel.y,vel.z,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM);
						}else{
							double forc=0.4;if(zerk>0)forc=1.2;
							corpsekicktimer=20+unstablewoundcount*0.6;
							vel-=(k.vel+(0,0,4))*forc;
							k.blockingmobj.A_PlaySound("misc/punch");
						}
						fatigue++;bloodpressure++;
						stunned+=2;
					}
				}
			}
		}else{
			bpickup=false;
		}
		if(corpsekicktimer>0)corpsekicktimer--;


		//record old shit
		oldfm=fm;
		oldsm=sm;
		lastvel=vel;
		lastangle=angle;
		lastpitch=pitch;

		oldinput=input;
	}
}




//Camera actor for player's scope
class ScopeCamera:IdleDummy{
	override void Tick(){
		if(!target){
			destroy();
			return;
		}
		angle=target.angle;
		pitch=target.pitch;
		vector2 fwd=angletovector(target.angle,2);

		if(abs(pitch)>89)setxyz(target.pos+(
			fwd*max(0.5,cos(pitch))*2,
			sin(-pitch)*6+target.height-4
		));else setxyz(target.pos+(
			fwd*cos(pitch)*6,
			sin(-pitch)*6+target.height-4
		));
		nexttic();
	}
}



//stuff to reset upon entering a new level
extend class HDHandlers{
	override void PlayerEntered(PlayerEvent e){
		let p=HDPlayerPawn(players[e.PlayerNumber].mo);
		if(p){
			p.levelreset();
			setplayerlives(e.playernumber);
			if(deathmatch)p.spawn("TeleFog",p.pos);
		}
	}
}
extend class HDPlayerPawn{
	//reset various... things.
	void levelreset(){
		lastpos=pos;
		lastangle=angle;
		lastpitch=pitch;
		lastvel=vel;
		lastheight=height;
		beatcap=35;beatmax=35;
		fatigue=0;
		stunned=0;
		stimcount=0;
		zerk=0;
		feetangle=angle;
		hasgrabbed=false;
		beatmax=35;beatcap=35;bloodpressure=0;beatcounter=0;
		stimcount=0;zerk=0;
		oldwoundcount+=woundcount+unstablewoundcount;aggravateddamage=0;
		oldwoundcount--;burncount--;woundcount=0;unstablewoundcount=0;

		overloaded=CheckEncumbrance();

		if(countinv("WipedOut"))A_GiveInventory("InvReset");
		else{
			A_TakeInventory("WeaponBusy");
			A_TakeInventory("IsMoving");
			A_TakeInventory("IsInHell");
			A_TakeInventory("WipedOut");
			A_TakeInventory("IsSupported");
			A_TakeInventory("WoundCount");
		}

		bshadow=false;
		a_setrenderstyle(1.,STYLE_Normal);
		let hbl=HDBlurSphere(findinventory("HDBlurSphere"));
		if(hbl){
			hbl.worn=false;
			hbl.stamina=0;
		}

		A_GiveInventory("PowerFrightener",1);
		ConsolidateAmmo();
	}
}


