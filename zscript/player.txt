// ------------------------------------------------------------
//   The player!
// ------------------------------------------------------------
const HDCONST_SPRINTMAXHEARTRATE=20;
class HDPlayerPawn:PlayerPawn{
	vector3 lastpos;vector3 lastvel;double lastangle;double lastpitch;double lastheight;
	vector3 poschange;
	double fm;double sm;
	double oldfm;double oldsm;
	int iyaw;int ipitch;
	double zat;

	actor playercorpse;

	name lastweapon;
	bool barehanded;
	double overloaded;

	bool mustwalk;bool cansprint;
	int runwalksprint;

	double feetangle;

	int stunned;
	int nocrosshair;

	int input;int oldinput;

	bool hasgrabbed;
	int corpsekicktimer;

	default{
		+interpolateangles
	}
	override void PostBeginPlay(){
		super.PostBeginPlay();
		lastpos=pos;
		lastangle=angle;
		lastpitch=pitch;
		lastvel=vel;
		lastheight=height;
		beatcap=35;beatmax=35;
		feetangle=angle;
		if(getcvar("hd_hudsprite"))A_GiveInventory("HUDSprite");
			else A_TakeInventory("HUDSprite");
		killoldfires();
		consolidateweapons();
	}
	states{
	spawn:
		PLAY A 1;
		---- A 3{
			A_GiveInventory("IsAlive");
		}
	spawn2:
		#### E 5{
			A_TakeInventory("IsTurning",1);
			A_TakeInventory("IsHit");
			A_TakeInventory("IsJumping");
		}
		---- A 0{
			if(getdistance(1,AAPTR_PLAYER_GETTARGET)<256) A_GiveInventory("EvadeNow",1,AAPTR_PLAYER_GETTARGET);
			if(health>40) A_TakeInventory("IsHurt");
			A_TakeInventory("IsMoving");
		}
		---- AAAAAA 5{
			if(!barehanded && regenbers<1 && zat==pos.z && !countinv("IsSupported") && !countinv("IsMoving")){
				vector3 posbak=pos;
				setxyz(pos+(cos(angle),sin(angle),0)*16);
				double zat2=getzat();
				setxyz(posbak);
				zat2-=(zat+height);
				if(-27<zat2 && zat2<0){
					A_GiveInventory("IsSupported");
					A_SetPitch(pitch-0.5,SPF_FORCECLAMP|SPF_INTERPOLATE);
					A_PlaySound("weapons/rifleclick2",CHAN_WEAPON,0.3);
//					A_PrintBold("THE GUN IS GOOD");
				}else A_TakeInventory("IsSupported");
			}else if(countinv("WeaponBusy"))A_TakeInventory("IsSupported");
		}
		loop;
	see0:
		---- A 0{
			A_TakeInventory("IsSupported");
			overloaded=CheckEncumbrance();

			if((zat>=pos.z)&&(random(1,3)==3)){  
				if(health<random(35,45)){
					if(countinv("IsCrouching")<1){A_ChangeVelocity(random(-4,2),frandom(-3,3),random(-1,0),CVF_RELATIVE);}
					A_ScaleVelocity(frandom(0.7,1.0));
				}else if(health<random(60,65)){
					if(countinv("IsCrouching")<1){A_ChangeVelocity(random(-2,1),frandom(-1,1),random(-1,0),CVF_RELATIVE);}
					A_ScaleVelocity(frandom(0.9,1.0));
				}
			}
			if(stunned){
				viewbob=1.4;
				return resolvestate("seestun");
			}
			else if(cansprint && runwalksprint>0){
				viewbob=1.2;
				if(bloodpressure<30)bloodpressure+=2;
				return resolvestate("seesprint");
			}
			else if(runwalksprint<0){
				return resolvestate("seewalk");
			}
			return resolvestate(null);
		}
		#### ABCD 4{
			if(viewbob>0.8){viewbob-=0.1;}
			else if(viewbob<0.8){viewbob+=0.1;}
		}
		---- A 0{return resolvestate("spawn");}
	seestun:
		#### ABCD random(2,10) {
			A_GiveInventory("IsMoving",2);
		}
		---- A 0{return resolvestate("spawn");}
	seewalk:
		#### ABCD 6 {
			if(height>30 && runwalksprint<0){
				A_TakeInventory("IsMoving",5);
				if(viewbob>1.2){viewbob=1.2;}
				else if(viewbob>0.3){viewbob-=0.1;}
			}
			else if(height<30){viewbob=1.8;}
			else if(viewbob<0.8){viewbob+=0.1;}
		}
		---- A 0{return resolvestate("spawn");}
	seesprint:
		---- A 4 A_TakeInventory("PowerFrightener");
		#### B 2;
		#### C 4;
		#### D 2;
		---- A 0{return resolvestate("spawn");}

	missile:
		#### E 4{
			overloaded=CheckEncumbrance();
			A_TakeInventory("NotShot");
			A_TakeInventory("PowerFrightener");
		}
		---- A 0 A_Jump(256,"spawn2");
	melee:
		---- A 0{
			A_TakeInventory("NotShot");
			A_TakeInventory("JustStarted");
			A_TakeInventory("PowerFrightener");
			if(!random(0,5)){A_GiveInventory("EvadeNow",1,AAPTR_PLAYER_GETTARGET);}
		}
		#### E 2 A_Jump(24,1);
		goto missile;
		#### F 2 bright light("SHOT");
		goto missile;
	}
	override void Tick(){
		if (!player||!player.mo||player.mo!= self){Super.Tick();return;} //anti-voodoodoll

		poschange=lastpos-pos;
		lastpos=pos;
		zat=getzat();

		//log all inputs
		input=getplayerinput(MODINPUT_BUTTONS);
		oldinput=getplayerinput(MODINPUT_OLDBUTTONS);
		fm=getplayerinput(MODINPUT_FORWARDMOVE);
		sm=getplayerinput(MODINPUT_SIDEMOVE);
		iyaw=getplayerinput(MODINPUT_YAW);
		ipitch=getplayerinput(MODINPUT_PITCH);

		int gender=player.getgender();
		if(!gender){A_GiveInventory("IsMale");A_TakeInventory("IsFemale");}
		else if(gender==1){A_GiveInventory("IsFemale");A_TakeInventory("IsMale");}
		else{A_TakeInventory("IsFemale");A_TakeInventory("IsMale");}

		super.Tick();


		//passive inventory checks
		if(player.readyweapon)GunHeatSmoke(player.readyweapon.getclassname());

		//only do anything below this while the player is alive!
		if(bkilled||health<1||countinv("WipedOut")) return;
		HeartTicker();

		//prevent odd screwups that leave you unable to throw grenades or something
		if(!countinv("Ring"))GiveBasics();
		if(!player.readyweapon)A_SelectWeapon("Ring");

		//add inventory flags for inputs
		//remove ONLY when a deprecated inventory flags has been removed from all code!
		A_TakeInventory("IsSprinting");
		A_TakeInventory("IsCrouching");
		A_TakeInventory("PressingFire");
		A_TakeInventory("PressingAltfire");
		A_TakeInventory("PressingReload");
		A_TakeInventory("PressingZoom");
		A_TakeInventory("PressingFireMode");
		A_TakeInventory("PressingAltReload");
		A_TakeInventory("PressingUnload");
		if(input&BT_ATTACK)A_GiveInventory("PressingFire");
		if(input&BT_ALTATTACK)A_GiveInventory("PressingAltfire");
		if(input&BT_RELOAD){
			A_GiveInventory("PressingReload",1);A_GiveInventory("WeaponBusy");}
		if(input&BT_ZOOM){
			A_GiveInventory("PressingZoom",1);A_GiveInventory("WeaponBusy");}
		if(input&BT_USER1){
			A_GiveInventory("PressingAltReload",1);A_GiveInventory("WeaponBusy");}
		if(input&BT_USER2){
			A_GiveInventory("PressingFireMode",1);A_GiveInventory("WeaponBusy");}
		if(input&BT_USER4){
			A_GiveInventory("PressingUnload",1);A_GiveInventory("WeaponBusy");}
		if(countinv("WeaponBusy"))A_TakeInventory("IsWeaponReady");
		if(height<40)A_GiveInventory("IsCrouching");
		if(input&BT_SPEED)A_GiveInventory("IsSprinting");
		if(fm||sm)A_GiveInventory("IsMoving");


		//"falling" damage
		int fall=(lastvel-vel).length();
		if(fall>10){
			if(barehanded)fall-=4;
			if(fall<=15)A_PlaySound("weapons/smack",CHAN_AUTO,0.4);
			if(fall>15){
				A_PlaySound("weapons/smack",CHAN_AUTO);
				if(countinv("PowerStrength"))fall*=0.5;
				damagemobj(self,self,fall*random(1,4),"falling");
				stunned+=fall*random(5,10)*4;
				beatmax-=fall*0.5;
				if(random(1,fall)>7){
					if(player.readyweapon && !(player.readyweapon is "Ring"))
						A_DropInventory(player.readyweapon.getclassname());
					A_SelectWeapon("Ring");
				}
			}
		}
		stunned=max(stunned-1,0);

		//see if player is intentionally walking, running or sprinting
		//-1 = walk, 0 = run, 1 = sprint
		if(input & BT_SPEED) runwalksprint=1;
		else if(6400<max(abs(fm),abs(sm)))runwalksprint=0;
		else runwalksprint=-1;

		//check if hands free
		if(
			(player.readyweapon is "Ring")
			||(player.readyweapon is "HDFragGrenades")
			||(player.readyweapon is "NullWeapon")
		)barehanded=true;else barehanded=false;

		//don't know where to put this: reduce stepheight if crouched
		if(height<40 && !barehanded) maxstepheight=12;
		else maxstepheight=24;

		//jumping/mantling
		JumpCheck();

		//turning mods
		TurnCheck();


		//conditions for forcing walk
		if(
			stunned
			||(!regenbers && beatmax<14 && stimcount<8)
			||StumbleCheck()
			||health<25
		){
			mustwalk=true;
			runwalksprint=-1;
		}else mustwalk=false;

		//conditions for allowing sprint
		if(
			!mustwalk
			&& barehanded
			&&(
				regenbers ||
				stimcount>10 ||
				beatmax>HDCONST_SPRINTMAXHEARTRATE
			)
			&&!countinv("PowerIronFeet")
		)cansprint=true;else cansprint=false;

		//apply all movement speed modifiers
		speed=1.;
		if(mustwalk || runwalksprint<0) speed=0.4;
		else if(runwalksprint>0 && cansprint){
			if(!sm)speed=2.8;
			else if(fm<0)speed=1.6;
		}
		if(countinv("PowerStrength"))speed*=1.5;
		if(height<40)speed*=0.6;

		//...except encumbrance which goes here
		if(overloaded){
			speed*=max(1-(overloaded*0.2),0.1);
			if(overloaded>3){
				viewbob=clamp(viewbob+0.2,0,1.4);
				mustwalk=true;
				cansprint=false;
			}
			if(overloaded>2.5){
				viewbob=clamp(viewbob+0.1,0,1.3);
				mustwalk=true;
				cansprint=false;
			}
			if(overloaded>2){
				viewbob=clamp(viewbob+0.1,0,1.2);
				mustwalk=true;
				cansprint=false;
			}
			else if(overloaded>1.5){
				viewbob=clamp(viewbob+0.1,0,1.1);
				mustwalk=true;
				cansprint=false;
			}
			else if(overloaded>1){
				cansprint=false;
			}
		}

		//...and capping speeds
		if(multiplayer && hd_3speed){
			if(speed>2.)speed=2.6;  
			else if(speed>0.6)speed=1.;
			else speed=0.4;
		}


		//lowering weapon for sprint/mantle/jump
		if(
			input & BT_SPEED
			|| input & BT_JUMP
		){
			if(!barehanded){
				if(player.readyweapon)lastweapon=player.readyweapon.getclassname();
				if(!countinv("NullWeapon"))A_GiveInventory("NullWeapon");
				A_GiveInventory("NulledWeapon");
				A_SelectWeapon("NullWeapon");
			}
		}else if(
			player.readyweapon is "NullWeapon"
			&&lastweapon&&countinv(lastweapon)
		){
			A_SelectWeapon(lastweapon);
		}

		//display crosshair
		//replace with reference in ready state as weapons are replaced
		if(!crosshairforce){
			if(
				countinv("WeaponBusy")||
				countinv("PowerInvulnerable")||
				(
					input&BT_RELOAD
					||input&BT_ZOOM
					||input&BT_USER1
					||input&BT_USER2
					||input&BT_USER3
					||input&BT_USER4
					||input&BT_JUMP
				)||
				abs(iyaw)>4096
			)nocrosshair=12;
			else if(
				player.fov>120||player.fov<80
			)nocrosshair=1;
			else if(!nocrosshair && !barehanded)CallACS("CrossHairs");
			else nocrosshair--;
		}

		//check use key
		if(input & BT_USE){
			bpickup=true;
			A_GiveInventory("GimmeHud");
			if(getcvar("hd_hudsprite"))
				A_GiveInventory("HUDSprite");
				else A_TakeInventory("HUDSprite");
			if(!(oldinput & BT_USE)){
				hasgrabbed=false;
			}
			//pickerupper
			overloaded=CheckEncumbrance();
			if(!hasgrabbed){
				vector3 ap=(
					cos(pitch)*cos(angle),
					cos(pitch)*sin(angle),
					-sin(pitch)
				);
				actor a=spawn("userpickerupper",pos-ap+(0,0,height-16));
				a.target=self;
				a.vel=ap*4;
			}
			if(!corpsekicktimer && height>45 && beatmax>10 && floorz==pos.z){
				actor k=spawn("fastprojectile",pos);k.angle=angle;
				k.A_SetSize(4,12);k.bfloorhugger=true;
				k.A_ChangeVelocity(5,0,0,CVF_RELATIVE);
				k.A_SetSize(6,10);k.target=self;
				for(int i=7;i;i--){
					if(!k.TryMove(k.pos.xy+k.vel.xy,true) && k.blockingmobj){
						i=1;
						if(
							k.blockingmobj.bcorpse
							||k.blockingmobj is "HDFragGrenade"
							||k.blockingmobj is "HDFragGrenadeRoller"
						){
							int forc=80;if(regenbers>0)forc*=3;
							corpsekicktimer=20+unstablewoundcount*0.5;
							k.blockingmobj.vel+=(k.vel+(0,0,4))*forc/k.blockingmobj.mass;
							k.blockingmobj.A_PlaySound("misc/punch");
						}else if(
							k.blockingmobj.bismonster
							||(
								k.blockingmobj is "PlayerPawn"
								&& !isteammate(k.blockingmobj)
							)
						){
							corpsekicktimer=17+unstablewoundcount*0.5;
							A_SpawnItemEx("KickProjectile",0,0,4,vel.x,vel.y,vel.z,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM);
						}
						if(!random(0,4))beatmax--;bloodpressure++;
						stunned+=2;
					}
				}
			}
		}else{
			bpickup=false;
			A_TakeInventory("GimmeHud");
		}
		if(corpsekicktimer>0)corpsekicktimer--;


		oldfm=getplayerinput(MODINPUT_FORWARDMOVE);
		oldsm=getplayerinput(MODINPUT_SIDEMOVE);
		lastvel=vel;
	}
}




//Camera actor for player's scope
class ViewDummy:IdleDummy{
	override void postbeginplay(){
		A_CheckProximity("spawndropped","PlayerPawn",10,1, CPXF_COUNTDEAD|CPXF_SETMASTER|CPXF_ANCESTOR|CPXF_CLOSEST|CPXF_NOZ);
	}
	override void Tick(){
		if(!master){
			destroy();
			return;
		}else{
			angle=master.angle;
			pitch=master.pitch;
			setxyz(master.pos+(
				cos(pitch)*cos(angle)*6,
				cos(pitch)*sin(angle)*6,
				sin(-pitch)*6+master.height-4
			));
			nexttic();
		}
	}
}




//stuff to reset upon entering a new level
class HDHandlers:EventHandler{
	override void PlayerEntered(PlayerEvent e){
		let p=HDPlayerPawn(players[e.PlayerNumber].mo);
		if(p){
			p.levelreset();
			if(p.countinv("CustomLoadout")){
				p.GiveCustomLoadout();
				p.A_TakeInventory("CustomLoadout");
			}
			if(!p.countinv("Ring"))p.GiveBasics();
		}
	}
}
extend class HDPlayerPawn{
	//reset various... things.
	void levelreset(){
		actor cam=spawn("ViewDummy",pos);
		cam.changetid(playernumber()-32000);
		cam.target=self;

		lastpos=pos;
		lastangle=angle;
		lastpitch=pitch;
		lastvel=vel;
		lastheight=height;
		beatcap=35;beatmax=35;
		feetangle=angle;
		hasgrabbed=false;
		beatmax=35;beatcap=35;bloodpressure=0;beatcounter=0;
		stimcount=0;regenbers=0;
		oldwoundcount+=woundcount+unstablewoundcount;aggravateddamage=0;
		oldwoundcount--;burncount--;woundcount=0;unstablewoundcount=0;

		overloaded=CheckEncumbrance();

		A_TakeInventory("WeaponBusy");
		A_TakeInventory("IsMoving");
		A_TakeInventory("IsSprinting");
		A_TakeInventory("IsHit");
		A_TakeInventory("JustUnloading");
		A_TakeInventory("IsInHell");
		A_TakeInventory("UsingMeds");
		A_TakeInventory("WipedOut");
		A_TakeInventory("RegenBers");
		A_TakeInventory("IsSupported");

		A_GiveInventory("JustStarted",1);
		A_GiveInventory("PowerFrightener",1);

		A_TakeInventory("LethalDamage",1);

		ConsolidateWeapons();
	}
}

