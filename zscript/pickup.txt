//-------------------------------------------------
// Pickup Archetypes
//-------------------------------------------------

//Projectile for using things that aren't switches and doors
class userpickerupper:hdactor{
	default{
		projectile;
		height 4;radius 3;
	}
	override void postbeginplay(){
		if(vel.xy==(0,0))vel.x=minvel;
		for(int i=0;i<12;i++){
			if(!trymove(pos.xy+vel.xy,true)){
				if(blockingmobj){
					if(
						blockingmobj.findstate("grab",true) &&
						blockingmobj is "HDUPK"
					){
						blockingmobj.target=self.target;
						blockingmobj.setstatelabel("grab");
						return;
					}
				}
				else if(blockingline)return;
			}
			else addz(vel.z);
		}
		destroy();
	}
}

/*
 special uses:
 painsound: pickup sound
*/
class HDUPK:HDActor{
	//do NOT use this for pickupable casings, 1x1 is intolerably pixelbitchy!
	default{
		+solid
		height 8;radius 8;
		activesound "misc/i_pkup";
	}
	override bool cancollidewith(actor other,bool passive){
		if(other is "userpickerupper") return true;
		return false;
	}
	states{
	inactive:
	active:
	grab:
		---- A 0 A_FaceTarget(0,0,0,0,FAF_TOP);
		#### ## 2 A_ChangeVelocity(cos(-pitch)*6,-1,sin(-pitch)*7+4,CVF_RELATIVE);
		---- A 0{
			//in case of death or teleport mid-grab
			if(target.bkilled || getdistance(target)>64) setstatelabel("spawn");
			else{
				setorigin(target.pos+(0,0,target.height-24),true);
				A_PlaySound(activesound);
				setstatelabel("give");
			}
		}
	give:
		//put here everything that needs to be given to the player
		//remember to like do sounds and shit too
		---- A 0 A_JumpIfInventory("Clip",0,"spawn",AAPTR_TARGET);
		---- A 0 A_GiveInventory("Clip",10,AAPTR_TARGET);
		stop;
	spawn:
		CLIP A -1{vel=(0,0,0);}
	spawn2:
		---- A -1;
	givegunloopend:
		---- A 0{
			setorigin(target.pos+(0,0,target.height-24),true);
		}
		stop;
	}
}


//just so I don't have to redefine these every time
class HDPickup:CustomInventory{
	default{
		+inventory.invbar +inventory.persistentpower
		inventory.interhubamount 999999;
		radius 20; height 16; scale 0.8;
	}
	states{
	spawn:
		TNT1 A 0 nodelay{
			if(missilename){
				actor a=spawn(missilename,pos,ALLOW_REPLACE);
				a.vel=vel;destroy();return;
			}
		}stop;
	}
}



