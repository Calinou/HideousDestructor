//-------------------------------------------------
// Pickup Archetypes
//-------------------------------------------------

//Projectile for using things that aren't switches and doors
class userpickerupper:hdactor{
	default{
		+solid
		height 4;radius 3;
	}
	override bool cancollidewith(actor other,bool passive){
		if(
			other is "HDUPK"
		)return true;
		return false;
	}
	override void postbeginplay(){
		if(vel.xy==(0,0))vel.x=minvel;
		for(int i=0;i<14;i++){
			if(!trymove(pos.xy+vel.xy,true)){
				if(blockingmobj){
					if(
						blockingmobj is "HDUPK"
					){
						blockingmobj.target=self.target;
						if(blockingmobj.findstate("grab",true))blockingmobj.setstatelabel("grab");
						let ppp=HDPlayerPawn(target);if(ppp)ppp.hasgrabbed=true;
						destroy();return;
					}
					else if(
						blockingmobj is "CustomInventory"||
						blockingmobj is "Inventory"||
						blockingmobj is "Ammo"
					){
						blockingmobj.touch(self.target);
					}
					else if(blockingline){destroy();return;}
				}
			}
			addz(vel.z);
			if(floorz>pos.z && floorz<target.height+target.pos.z)setz(floorz);
		}
		destroy();
	}
}

/*
 special uses:
 activesound: pickup sound
 hdupk.pickuptype: default type of inventory item it replaces
 hdupk.[big]pickupscale: default scale and bloated scale, as 2 numbers
 accuracy: max # of pickuptype a single unit can store
*/
class HDUPK:HDActor{
	//do NOT use this for pickupable casings, 1x1 is intolerably pixelbitchy!
	name pickuptype;
	property pickuptype:pickuptype;
	double pickupscale1;
	double pickupscale2;
	double bigpickupscale1;
	double bigpickupscale2;
	vector2 pickupscale;
	vector2 bigpickupscale;
	property pickupscale:pickupscale1,pickupscale2;
	property bigpickupscale:bigpickupscale1,bigpickupscale2;
	default{
		+solid
		height 8;radius 8;
		activesound "misc/i_pkup";
	}
	override bool cancollidewith(actor other,bool passive){
		if(bpushable)return super.cancollidewith(other,passive);
		if(other is "userpickerupper") return true;
		return false;
	}
	override void postbeginplay(){
		super.postbeginplay();

		if(!pickupscale1)pickupscale1=scale.x;
		if(!pickupscale2)pickupscale2=pickupscale1;
		pickupscale=(pickupscale1,pickupscale2);

		if(!bigpickupscale1)bigpickupscale1=pickupscale1;
		if(!bigpickupscale2)bigpickupscale2=pickupscale2;
		bigpickupscale=(bigpickupscale1,bigpickupscale2);

		if(!accuracy) return;
		while(stamina>accuracy){
			actor a=spawn(getclassname(),pos,ALLOW_REPLACE);
			a.stamina=accuracy;
			stamina-=accuracy;
			a.vel=vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
		}
		if(stamina>1){
			scale=bigpickupscale;
		}else{
			stamina=1;
			scale=pickupscale;
		}
	}
	virtual void A_HDUPKGive(){
		if(!pickuptype){
			setstatelabel("give");
			return;
		}
		int increase=target.countinv(pickuptype);
		A_GiveToTarget(pickuptype,stamina);
		increase=target.countinv(pickuptype)-increase;
		if(!increase){ //didn't pick any up
			setstatelabel("spawn");
			return;
		}
		A_PlaySound(activesound);
		stamina-=increase;
		if(stamina){ //only picked some up
			if(stamina>1)scale=bigpickupscale;else scale=pickupscale;
			setstatelabel("spawn");
			return;
		}
	}
	states{
	inactive:
	active:
	grab:
		---- AA 2{
			vel+=(
				target.pos.x-pos.x,
				target.pos.y-pos.y,
				target.pos.z+target.height*0.6-pos.z+2
			)*0.3;
		}
		---- A 0{
			//in case of death or teleport mid-grab
			if(target.bkilled || getdistance(target)>64) setstatelabel("spawn");
			else{
				setorigin(target.pos+(0,0,target.height-24),true);
				A_HDUPKGive();
			}
		}
	give:
		"----" A 0;
		stop;
	spawn:
		CLIP A -1 A_Stop();
	spawn2:
		---- A -1;
	givegunloopend:
		---- A 0{
			setorigin(target.pos+(0,0,target.height-24),true);
		}
		stop;
	}
}


//just so I don't have to redefine these every time
//special use: amount becomes hdupk's stamina
class HDPickup:CustomInventory{
	default{
		+inventory.invbar +inventory.persistentpower
		inventory.interhubamount 999999;
		radius 20; height 16; scale 0.8;
	}
	states{
	spawn:
		TNT1 A 1;
		TNT1 A 0{
			if(missilename){
				actor a=spawn(missilename,pos,ALLOW_REPLACE);
				a.vel=vel;if(invoker.amount>1)a.stamina=invoker.amount;
				destroy();return;
			}
		}stop;
	}
}

/*
experimental, ignore
extend class HDPickup{
	hdplayerpawn onr;
	override void AttachToOwner(Actor user){
		//this is already done for weapons.
		super.attachtoowner(user);
		if(user){
			target=onr;
			if(user is "HDPlayerPawn")onr=HDPlayerPawn(user);
		}
		if(onr)A_Log(string.format("%s picked up %s",onr.player.getusername(),getclassname()));
	}
	override inventory CreateTossable(int amount){
		A_Log("CreateTossable called.");
		return super.createtossable(amount);
	}
	override inventory CreateCopy(actor other){
		A_Log("CreateCopy called.");
		return super.createcopy(other);
	}
	override bool SpecialDropAction(actor dropper){
		A_Log("SpecialDropAction called.");
		return super.specialdropaction(dropper);
	}
	override void DetachFromOwner(){
		A_Log("DetachFromOwner called.");
		super.detachfromowner();
	}
}

*/

