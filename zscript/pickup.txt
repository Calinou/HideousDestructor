//-------------------------------------------------
// Pickup Archetypes
//-------------------------------------------------

//Projectile for using things that aren't switches and doors
class userpickerupper:hdactor{
	default{
		projectile;
		height 4;radius 3;
	}
	override void postbeginplay(){
		if(vel.xy==(0,0))vel.x=minvel;
		for(int i=0;i<14;i++){
			if(!trymove(pos.xy+vel.xy,true)){
				if(blockingmobj){
					if(
						blockingmobj.findstate("grab",true) &&
						blockingmobj is "HDUPK"
					){
						blockingmobj.target=self.target;
						blockingmobj.setstatelabel("grab");
						destroy();return;
					}
					else if(blockingline){A_Log("LINE");destroy();return;}
				}
			}
			addz(vel.z);
			if(floorz>pos.z && floorz<target.height+target.pos.z)setz(floorz);
		}
		destroy();
	}
}

/*
 special uses:
 painsound: pickup sound
 hdupk.pickuptype: default type of inventory item it replaces
 accuracy: max # of pickuptype a single unit can store
*/
class HDUPK:HDActor{
	//do NOT use this for pickupable casings, 1x1 is intolerably pixelbitchy!
	name pickuptype;
	property pickuptype:pickuptype;
	default{
		+solid
		height 8;radius 8;
		activesound "misc/i_pkup";
	}
	override bool cancollidewith(actor other,bool passive){
		if(other is "userpickerupper") return true;
		return false;
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(!accuracy) return;
		int doublemax=2*accuracy;
		while(stamina>accuracy){
			actor a=spawn(getclassname(),pos,ALLOW_REPLACE);
			if(stamina>=doublemax){
				a.stamina=accuracy;
				stamina-=accuracy;
			}else{
				a.stamina=1;
				stamina--;
			}
			a.vel=vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
		}
		if(stamina>1){
			scale=(0.51,0.39);
		}else{
			stamina=1;
			scale=(0.4,0.4);
		}
	}
	virtual void A_HDUPKGive(){
		if(!pickuptype){
			setstatelabel("give");
			return;
		}
		int increase=target.countinv(pickuptype);
		A_GiveToTarget(pickuptype,stamina);
		increase=target.countinv(pickuptype)-increase;
		if(!increase){ //didn't pick any up
			setstatelabel("spawn");
			return;
		}
		A_PlaySound(activesound);
		stamina-=increase;
		if(stamina){ //only picked some up
			scale=(0.4,0.4);
			setstatelabel("spawn");
			return;
		}
	}
	states{
	inactive:
	active:
	grab:
		---- AA 2{
			vel+=(
				target.pos.x-pos.x,
				target.pos.y-pos.y,
				target.pos.z+target.height*0.6-pos.z+2
			)*0.3;
		}
		---- A 0{
			//in case of death or teleport mid-grab
			if(target.bkilled || getdistance(target)>64) setstatelabel("spawn");
			else{
				setorigin(target.pos+(0,0,target.height-24),true);
				A_HDUPKGive();
			}
		}
	give:
		"----" A 0;
		stop;
	spawn:
		CLIP A -1 A_Stop();
	spawn2:
		---- A -1;
	givegunloopend:
		---- A 0{
			setorigin(target.pos+(0,0,target.height-24),true);
		}
		stop;
	}
}


//just so I don't have to redefine these every time
//special use: amount becomes hdupk's stamina
class HDPickup:CustomInventory{
	default{
		+inventory.invbar +inventory.persistentpower
		inventory.interhubamount 999999;
		radius 20; height 16; scale 0.8;
	}
	states{
	spawn:
		TNT1 A 0 nodelay{
			if(missilename){
				actor a=spawn(missilename,pos,ALLOW_REPLACE);
				a.vel=vel;a.stamina=invoker.amount;
				destroy();return;
			}
		}stop;
	}
}



