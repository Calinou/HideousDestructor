//-------------------------------------------------
// Pickup Archetypes
//-------------------------------------------------

//Projectile for using things that aren't switches and doors
class userpickerupper:hdactor{
	actor picktarget;
	actor pickobj;
	default{
		+solid +noblockmonst +notrigger +noteleport +cannotpush
		height 2;radius 2;
	}
	override bool cancollidewith(actor other,bool passive){
		return(
			other is "HDUPK"
			||other is "Inventory"
		);
	}
	override void postbeginplay(){
		picktarget=target;
		if(vel.xy==(0,0))vel.x=minvel;
		for(int i=0;i<10;i++){
			if(!trymove(pos.xy+vel.xy,true,true)){
				if(blockingmobj){
					blockingmobj.target=picktarget;
					if(
						blockingmobj is "HDUPK"
						&&blockingmobj.findstate("grab",true)
					){
						hdupk(blockingmobj).picktarget=picktarget;
						blockingmobj.setstatelabel("grab");
						let ppp=HDPlayerPawn(picktarget);if(ppp)ppp.hasgrabbed=true;
						destroy();return;
					}
					else if(
						blockingmobj is "HDUPK"
						||blockingmobj is "HDPickup"
						||blockingmobj is "HDWeapon"
					){
						pickobj=blockingmobj;
						let ppp=HDPlayerPawn(target);if(ppp)ppp.hasgrabbed=true;
						setstatelabel("grabpickup");
						return;
					}
				}
				if(blockingline){destroy();return;}
			}
			addz(vel.z);
			if(floorz>pos.z && floorz<target.height+target.pos.z){  
				setz(floorz);
				vel.z=0;
			}
		}
		destroy();
	}
	states{
	grabpickup:
		TNT1 A 0{bsolid=false;}
		TNT1 AA 2{
			if(!pickobj){destroy();return;}
			pickobj.vel+=(
				picktarget.pos.x-pickobj.pos.x,
				picktarget.pos.y-pickobj.pos.y,
				picktarget.pos.z+picktarget.height*0.6-pickobj.pos.z
			)*0.3+(0,0,2);
		}
		TNT1 A 0{
			if(!pickobj){destroy();return;}
			pickobj.A_Stop();

			pickobj.A_CallSpecial(
				pickobj.special,pickobj.args[0],
				pickobj.args[1],pickobj.args[2],
				pickobj.args[3],pickobj.args[4]
			);

			//in case of death or teleport mid-grab
			if(
				picktarget
				&&!picktarget.bkilled
				&&picktarget.health>0          
				&&pickobj.distance3d(picktarget)<64
			){
				let ht=hdupk(pickobj);
				if(ht){
					ht.picktarget=picktarget;
					ht.a_hdupkgive();
					return;
				}

				let pt=hdpickup(pickobj);
				if(pt){pt.actualpickup(picktarget);return;}

				let wt=hdweapon(pickobj);
				if(wt){wt.actualpickup(picktarget);return;}

				let tt=inventory(pickobj);
				if(tt){tt.touch(picktarget);return;}
			}
		}stop;
	}
}


//Usable pickup.
class HDPickup:CustomInventory{
	actor picktarget;
	default{
		+inventory.invbar +inventory.persistentpower
		+solid +noblockmonst +notrigger
		inventory.interhubamount int.MAX;

		radius 8; height 10; scale 0.8;
		inventory.pickupsound "weapons/pocket";
		accuracy 1;
	}
	override inventory createtossable(int amount){
		actor onr=owner;
		inventory iii=super.createtossable(amount);
		if(iii)iii.translation=onr.translation;
		return iii;
	}
	override void doeffect(){
		if(!amount)goawayanddie();
	}
	override void touch(actor toucher){}
	virtual void actualpickup(actor other){
		if(!other)other=picktarget;
		if(!other)return;
		name gcn=getclassname();
		int maxtake=HDMath.MaxInv(other,gcn)-other.countinv(gcn);
		if(maxtake<1){
			setstatelabel("spawn2");return;
		}else if(maxtake<amount){
			amount-=maxtake;
			other.A_GiveInventory(gcn,maxtake);
			if(amount>0)setstatelabel("spawn2");  
		}else trypickup(other);
		other.A_PlaySound(pickupsound,CHAN_AUTO);
		other.A_Log(string.format("\cg%s",pickupmessage()),true);
	}
	override bool cancollidewith(actor other,bool passive){
		return(other is "userpickerupper");
	}
	states{
	spawn:
		TNT1 A 1;
		TNT1 A 0{
			while(invoker.amount>invoker.accuracy){  
				inventory aa=inventory(spawn(invoker.getclassname(),invoker.pos));
				aa.amount=invoker.accuracy;invoker.amount-=invoker.accuracy;
				aa.vel=invoker.vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
			}
			invoker.setstatelabel("spawn2");
		}stop;
	}
}

//custom ammotype
class HDAmmo:HDPickup{
	int basemaxamount;
	property basemaxamount:basemaxamount;
	default{
		-inventory.invbar
	}
	states{use:TNT1 A 0;fail;spawn2:---- A -1;}
}




/*
 special uses:
 activesound: pickup sound
 hdupk.pickuptype: default type of inventory item it replaces
 hdupk.pickupmessage: self-explanatory
 accuracy: max # of pickuptype a single unit can store
*/
class HDUPK:HDActor{
	//do NOT use this for pickupable casings, 1x1 is intolerably pixelbitchy!
	actor picktarget;
	class<inventory> pickuptype;
	string pickupmessage;
	property pickuptype:pickuptype;
	property pickupmessage:pickupmessage;
	default{
		+solid +noblockmonst +notrigger
		height 8;radius 8;
		activesound "misc/i_pkup";
		hdupk.pickupmessage "Picked something up.";
		hdupk.pickuptype "none";
	}
	override bool cancollidewith(actor other,bool passive){
		return(bpushable||other is "userpickerupper");
	}
	override void postbeginplay(){
		super.postbeginplay();

		if(!accuracy)return;
		if(accuracy<0)accuracy*=-1;
		while(stamina>accuracy){  
			actor a=spawn(getclassname(),pos,ALLOW_REPLACE);
			a.stamina=accuracy;
			stamina-=accuracy;
			a.vel=vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
		}
		if(stamina>1){  
		}else{
			stamina=1;
		}
	}
	virtual void A_HDUPKGive(){
		if(pickuptype=="none"){
			target=picktarget;
			setstatelabel("give");
			return;
		}
		int increase=picktarget.countinv(pickuptype);
		picktarget.A_GiveInventory(pickuptype,stamina);
		increase=picktarget.countinv(pickuptype)-increase;
		if(!increase){ //didn't pick any up
			setstatelabel("spawn");
			return;
		}
		picktarget.A_PlaySound(activesound,5);
		picktarget.A_Log(string.format("\cg%s",pickupmessage),true);
		stamina-=increase;
		if(stamina>0){ //only picked some up  
			setstatelabel("spawn");
			return;
		}
	}
	states{
	grab:
		---- AA 2{
			vel+=(
				picktarget.pos.x-pos.x,
				picktarget.pos.y-pos.y,
				picktarget.pos.z+picktarget.height*0.6-pos.z
			)*0.3+(0,0,2);
		}
		---- A 0{
			//in case of death or teleport mid-grab
			if(picktarget.bkilled||distance3d(picktarget)>64){  
				A_Stop();
				setstatelabel("spawn");
			}else{
				setorigin(picktarget.pos+(0,0,picktarget.height-24),true);
				A_HDUPKGive();

				A_CallSpecial(
					special,args[0],
					args[1],args[2],
					args[3],args[4]
				);
			}
		}
	give:
		---- A 0;
		stop;
	spawn:
		CLIP A -1;
	spawn2:
		---- A -1;
	}
}


//some people put keys in the weirdest of sectors.
//One particular Oblige trick makes them impossible to pick up as HDUPKs.
class HDHPK:HDUPK{
	override bool cancollidewith(actor other,bool passive){
		if(other is "userpickerupper") return true;
		if(other is "playerpawn" && other.bpickup){
			target=other;
			let ppp=HDPlayerPawn(target);if(ppp && !ppp.hasgrabbed){
				ppp.hasgrabbed=true;
				if(findstate("give",true))setstatelabel("give");
			}
			return false;
		}return false;
	}
}
