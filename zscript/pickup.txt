//-------------------------------------------------
// Pickup Archetypes
//-------------------------------------------------
class GrabThinker:Thinker{
	actor picktarget;
	actor pickobj;
	int ticker;
	override void postbeginplay(){
		super.postbeginplay();
	}
	override void tick(){
		if(!picktarget||!pickobj){destroy();return;}
		super.tick();
		ticker++;
		if(ticker<4)pickobj.setorigin(
			0.5*(
				(picktarget.pos+(0,0,picktarget.height-10))
				+pickobj.pos
			),true
		);else{
			if(
				!pickobj
				||!picktarget
				||picktarget.health<1
			){
				destroy();
				return;
			}
			pickobj.A_CallSpecial(
				pickobj.special,pickobj.args[0],
				pickobj.args[1],pickobj.args[2],
				pickobj.args[3],pickobj.args[4]
			);

			let ht=hdupk(pickobj);
			if(ht){
				ht.picktarget=picktarget;
				ht.a_hdupkgive();
				destroy();
				return;
			}

			let pt=hdpickup(pickobj);
			if(pt){pt.actualpickup(picktarget);destroy();return;}

			let wt=hdweapon(pickobj);
			if(wt){wt.actualpickup(picktarget);destroy();return;}

			let tt=inventory(pickobj);
			if(tt){tt.touch(picktarget);destroy();return;}
		}
	}
}

//Usable pickup.
class HDPickup:CustomInventory{
	actor picktarget;
	bool droptranslation;
	property droptranslation:droptranslation;
	double bulk;
	property bulk:bulk;
	default{
		+inventory.invbar +inventory.persistentpower
		+noblockmonst +notrigger +dontgib
		inventory.interhubamount int.MAX;

		hdpickup.droptranslation true;
		hdpickup.bulk 0;

		radius 8; height 10; scale 0.8;
		inventory.pickupsound "weapons/pocket";
		accuracy 1;
	}
	virtual double getbulk(){return amount*bulk;}
	override inventory createtossable(int amount){
		inventory iii=super.createtossable(amount);
		if(droptranslation&&owner){
			actor onr=owner;
			if(iii)iii.translation=onr.translation;
		}
		return iii;
	}
	override void doeffect(){
		if(!amount)goawayanddie();
	}
	override void touch(actor toucher){}
	virtual void actualpickup(actor other){
		if(!other)other=picktarget;
		if(!other)return;
		if(heat.getamount(self)>50)return;
		name gcn=getclassname();
		int maxtake=HDMath.MaxInv(other,gcn)-other.countinv(gcn);
		if(balwayspickup){
			inventory.touch(other);
			return;
		}else if(maxtake<1){
			setstatelabel("spawn2");return;
		}else if(maxtake<amount){
			amount-=maxtake;
			other.A_GiveInventory(gcn,maxtake);
			if(amount>0)setstatelabel("spawn2");  
		}else trypickup(other);
		other.A_PlaySound(pickupsound,CHAN_AUTO);
		other.A_Log(string.format("\cg%s",pickupmessage()),true);
	}
	states{
	use:	TNT1 A 0;
		fail;
	spawn:
		TNT1 A 1;
		TNT1 A 0{
			while(invoker.amount>invoker.accuracy){  
				inventory aa=inventory(spawn(invoker.getclassname(),invoker.pos));
				aa.amount=invoker.accuracy;invoker.amount-=invoker.accuracy;
				aa.vel=invoker.vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
			}
			invoker.vel+=(frandom(-0.6,0.6),frandom(-0.6,0.6),frandom(-0.6,0.6));
			invoker.setstatelabel("spawn2");
		}stop;
	}
}

//custom ammotype
class HDAmmo:HDPickup{
	int basemaxamount;
	property basemaxamount:basemaxamount;
	default{
		-inventory.invbar
		hdpickup.droptranslation false;
	}
	//bulk must be calculated in encumbrance so hd_onemanarmy can be read
	override double getbulk(){return 0;}
	states{use:TNT1 A 0;fail;spawn2:---- A -1;}
}




/*
 special uses:
 hdupk.pickupsound: pickup sound
 hdupk.pickuptype: default type of inventory item it replaces
 hdupk.pickupmessage: self-explanatory
 accuracy: max # of pickuptype a single unit can store
*/
class HDUPK:HDActor{
	//do NOT use this for pickupable casings, 1x1 is intolerably pixelbitchy!
	actor picktarget;
	class<inventory> pickuptype;
	string pickupmessage;
	sound pickupsound;
	property pickuptype:pickuptype;
	property pickupmessage:pickupmessage;
	property pickupsound:pickupsound;
	default{
		+solid
		height 8;radius 8;
		hdupk.pickupsound "weapons/pocket";//"misc/i_pkup";
		hdupk.pickupmessage "Picked something up.";
		hdupk.pickuptype "none";
	}
	override bool cancollidewith(actor other,bool passive){return false;}
	override void postbeginplay(){
		super.postbeginplay();

		if(!accuracy)return;
		if(accuracy<0)accuracy*=-1;
		while(stamina>accuracy){  
			actor a=spawn(getclassname(),pos,ALLOW_REPLACE);
			a.stamina=accuracy;
			stamina-=accuracy;
			a.vel=vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
		}
		if(stamina>1){  
		}else{
			stamina=1;
		}
	}
	virtual void A_HDUPKGive(){
		if(pickuptype=="none"){
			target=picktarget;
			setstatelabel("give");
			if(!bdestroyed)return;
			picktarget.A_PlaySound(pickupsound,5);
			picktarget.A_Log(string.format("\cg%s",pickupmessage),true);
			return;
		}
		int increase=picktarget.countinv(pickuptype);
		picktarget.A_GiveInventory(pickuptype,stamina);
		increase=picktarget.countinv(pickuptype)-increase;
		if(heat.getamount(self)>50)increase=0;
		if(!increase){ //didn't pick any up
			setstatelabel("spawn");
			return;
		}
		picktarget.A_PlaySound(pickupsound,5);
		picktarget.A_Log(string.format("\cg%s",pickupmessage),true);
		stamina-=increase;
		if(stamina>0){ //only picked some up  
			setstatelabel("spawn");
			return;
		}
	}
	states{
	grab:
		---- AAAA 1{
			setorigin(
				0.5*((picktarget.pos+(0,0,picktarget.height-10))+pos)
			,true);
		}
		---- A 0{
			//in case of death or teleport mid-grab
			if(
				!picktarget
				||picktarget.health<1
			){
				setstatelabel("spawn");
			}else{
				setorigin(picktarget.pos+(0,0,picktarget.height-24),true);
				A_HDUPKGive();

				A_CallSpecial(
					special,args[0],
					args[1],args[2],
					args[3],args[4]
				);
			}
		}
	give:
		---- A 0;
		stop;
	spawn:
		CLIP A -1;
	spawn2:
		---- A -1;
	}
}
