//-------------------------------------------------
// Pickup Archetypes
//-------------------------------------------------

//Projectile for using things that aren't switches and doors
class userpickerupper:hdactor{
	default{
		+solid +noblockmonst +notrigger +noteleport +cannotpush
		height 2;radius 2;
	}
	override bool cancollidewith(actor other,bool passive){
		if(
			other is "HDUPK"
			||other is "Inventory"
		)return true;
		return false;
	}
	override void postbeginplay(){
		if(vel.xy==(0,0))vel.x=minvel;
		for(int i=0;i<14;i++){
			if(!trymove(pos.xy+vel.xy,true)){
				if(blockingmobj){
					if(
						blockingmobj is "HDUPK"
					){
						blockingmobj.target=self.target;
						if(blockingmobj.findstate("grab",true))blockingmobj.setstatelabel("grab");
						let ppp=HDPlayerPawn(target);if(ppp)ppp.hasgrabbed=true;
if(hd_debug)A_Log("Consider HDPickup for this.");
						destroy();return;
					}
					else if(
						blockingmobj is "HDPickup"
					){
						tracer=blockingmobj;
						let ppp=HDPlayerPawn(target);if(ppp)ppp.hasgrabbed=true;
						setstatelabel("grabpickup");return;
					}
					else if(blockingline){destroy();return;}
				}
			}
			addz(vel.z);
			if(floorz>pos.z && floorz<target.height+target.pos.z)setz(floorz);
		}
		destroy();
	}
	states{
	grabpickup:
		TNT1 A 0{bsolid=false;}
		TNT1 AA 2{
			tracer.vel+=(
				target.pos.x-tracer.pos.x,
				target.pos.y-tracer.pos.y,
				target.pos.z+target.height*0.6-tracer.pos.z+2
			)*0.3;
		}
		TNT1 A 0{
			tracer.A_Stop();
			//in case of death or teleport mid-grab
			if(
				target
				&&!target.bkilled
				&&target.health>0        
				&&tracer.getdistance(target)<64
			){
				let ht=hdupk(master);
				if(ht){
					ht.target=target;
					ht.a_hdupkgive();
				}

				let pt=hdpickup(tracer);
				if(pt)pt.actualpickup(target);

				let tt=inventory(tracer);
				if(tt)tt.touch(target);
			}
		}stop;
	}
}

/*
 special uses:
 activesound: pickup sound
 hdupk.pickuptype: default type of inventory item it replaces
 hdupk.[big]pickupscale: default scale and bloated scale, as 2 numbers
 accuracy: max # of pickuptype a single unit can store
*/
class HDUPK:HDActor{
	//do NOT use this for pickupable casings, 1x1 is intolerably pixelbitchy!
	name pickuptype;
	property pickuptype:pickuptype;
	double pickupscale1;
	double pickupscale2;
	double bigpickupscale1;
	double bigpickupscale2;
	vector2 pickupscale;
	vector2 bigpickupscale;
	property pickupscale:pickupscale1,pickupscale2;
	property bigpickupscale:bigpickupscale1,bigpickupscale2;
	default{
		+solid +noblockmonst +notrigger
		height 8;radius 8;
		activesound "misc/i_pkup";
	}
	override bool cancollidewith(actor other,bool passive){
		if(bpushable)return super.cancollidewith(other,passive);
		if(other is "userpickerupper") return true;
		return false;
	}
	override void postbeginplay(){
		super.postbeginplay();

		if(!pickupscale1)pickupscale1=scale.x;
		if(!pickupscale2)pickupscale2=pickupscale1;
		pickupscale=(pickupscale1,pickupscale2);

		if(!bigpickupscale1)bigpickupscale1=pickupscale1;
		if(!bigpickupscale2)bigpickupscale2=pickupscale2;
		bigpickupscale=(bigpickupscale1,bigpickupscale2);

		if(!accuracy) return;
		if(accuracy<0) accuracy*=-1;
		while(stamina>accuracy){
			actor a=spawn(getclassname(),pos,ALLOW_REPLACE);
			a.stamina=accuracy;
			stamina-=accuracy;
			a.vel=vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
		}
		if(stamina>1){
			scale=bigpickupscale;
		}else{
			stamina=1;
			scale=pickupscale;
		}
	}
	virtual void A_HDUPKGive(){
		if(!pickuptype){
			setstatelabel("give");
			return;
		}
		int increase=target.countinv(pickuptype);
		A_GiveToTarget(pickuptype,stamina);
		increase=target.countinv(pickuptype)-increase;
		if(!increase){ //didn't pick any up
			setstatelabel("spawn");
			return;
		}
		A_PlaySound(activesound);
		stamina-=increase;
		if(stamina){ //only picked some up
			if(stamina>1)scale=bigpickupscale;else scale=pickupscale;
			setstatelabel("spawn");
			return;
		}
	}
	states{
	inactive:
	active:
	grab:
		---- AA 2{
			vel+=(
				target.pos.x-pos.x,
				target.pos.y-pos.y,
				target.pos.z+target.height*0.6-pos.z
			)*0.3+(0,0,2);
		}
		---- A 0{
			//in case of death or teleport mid-grab
			if(target.bkilled || getdistance(target)>64) setstatelabel("spawn");
			else{
				setorigin(target.pos+(0,0,target.height-24),true);
				A_HDUPKGive();
			}
		}
	give:
		"----" A 0;
		stop;
	spawn:
		CLIP A -1 A_Stop();
	spawn2:
		---- A -1;
	givegunloopend:
		---- A 0{
			setorigin(target.pos+(0,0,target.height-24),true);
		}
		stop;
	}
}


//some people put keys in the weirdest of sectors.
//One particular Oblige trick makes them impossible to pick up as HDUPKs.
class HDHPK:HDUPK{
	override bool cancollidewith(actor other,bool passive){
		if(other is "userpickerupper") return true;
		if(other is "playerpawn" && other.bpickup){
			target=other;
			let ppp=HDPlayerPawn(target);if(ppp && !ppp.hasgrabbed){
				ppp.hasgrabbed=true;
				if(findstate("give",true))setstatelabel("give");
			}
			return false;
		}return false;
	}
}



class HDPickup:CustomInventory{
	default{
		+inventory.invbar +inventory.persistentpower +solid
		inventory.interhubamount int.MAX;

		radius 8; height 10; scale 0.8;
		inventory.pickupsound "weapons/pocket";
		accuracy 1;
	}
	override void doeffect(){
		if(!amount)goawayanddie();
	}
	override void touch(actor toucher){}
	virtual void actualpickup(actor other){
		inventory.touch(other);
	}
	override bool cancollidewith(actor other,bool passive){
		if(other is "userpickerupper")return true;
		else if(bpushable)return super.cancollidewith(other,passive);
		return false;
	}
	states{
	spawn:
		TNT1 A 1;
		TNT1 A 0{
			if(missilename){
if(hd_debug)A_Log("Deprecated pickup.");
				actor a=spawn(missilename,pos,ALLOW_REPLACE);
				a.vel=invoker.vel;if(invoker.amount>1)a.stamina=invoker.amount;
				invoker.destroy();return;
			}else{
				while(invoker.amount>invoker.accuracy){
					actor a=spawn(invoker.getclassname(),invoker.pos,ALLOW_REPLACE);
					inventory aa=inventory(a);
					aa.amount=invoker.accuracy;invoker.amount-=invoker.accuracy;
					aa.vel=invoker.vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
				}
				invoker.setstatelabel("spawn2");
			}
		}stop;
	}
}

