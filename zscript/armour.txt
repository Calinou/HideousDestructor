//-------------------------------------------------
// Armour
//-------------------------------------------------
const HDCONST_BLUEARMOUR=33;
const HDCONST_GREENARMOUR=144;

class GreenArmour:HDMagAmmo{
	default{
		+inventory.invbar
		inventory.amount 1;
		inventory.maxamount 3;
		hdmagammo.maxperunit HDCONST_GREENARMOUR;
		inventory.icon "ARMSB0";
		hdpickup.refid HDLD_ARMGREN;
		inventory.pickupmessage "Picked up the security armour.";
	}
	bool mega;
	int cooldown;
	action void A_WearArmour(){
		invoker.syncamount();
		int dbl=invoker.mags[0];
		//if holding use, cycle to next armour
		if(player.cmd.buttons&BT_USE){
			invoker.mags.push(dbl);
			invoker.mags.delete(0);
			invoker.syncamount();
			return;
		}
		//strip intervening items on doubleclick
		string dropfirst="";
		if(countinv("HDBackpack"))dropfirst="HDBackpack";
		else if(countinv("WornRadsuit"))dropfirst="WornRadsuit";
		else if(countinv("GreenArmourWorn"))dropfirst="GreenArmourWorn";
		if(dropfirst!=""){
			if(invoker.cooldown)A_DropInventory(dropfirst);
			else{
				invoker.cooldown=5;
				A_Log(string.format(
					"Take off your %s first!%s",
					dropfirst=="HDBackpack"?"backpack":
					dropfirst=="WornRadsuit"?"environment suit":
					"current armour",
					getcvar("hd_helptext")?" (double-tap to do this)":""
				),true);
			}
			return;
		}
		//and finally put on the actual armour
		GreenArmour.ArmourChangeEffect(self);
		let worn=GreenArmourWorn(GiveInventoryType("GreenArmourWorn"));
		if(dbl>=1000){
			dbl-=1000;
			worn.mega=true;
		}
		worn.durability=dbl;
		invoker.amount--;
		invoker.mags.delete(0);

		invoker.syncamount();
	}
	override void doeffect(){
		if(cooldown>0)cooldown--;
		if(amount<1)destroy();
	}
	override void syncamount(){
		if(amount<1){destroy();return;}
		super.syncamount();
		mega=mags[0]>=1000;
		icon=texman.checkfortexture(mega?"ARMCB0":"ARMSB0",TexMan.Type_MiscPatch);
	}
	override void postbeginplay(){
		super.postbeginplay();
		mags.clear();
		mega=icon==texman.checkfortexture("ARMCB0",TexMan.Type_MiscPatch);
		mags.push((mega?(1000+HDCONST_BLUEARMOUR):HDCONST_GREENARMOUR));
		cooldown=0;
	}
	override void consolidate(){}
	override double getbulk(){
		syncamount();
		double blk=0;
		for(int i=0;i<amount;i++){
			if(mags[i]>=1000)blk+=ENC_BLUEARMOUR;
			else blk+=ENC_GREENARMOUR;
		}
		return blk;
	}
	override void actualpickup(actor other){
		cooldown=0;
		if(!other)return;
		//put on the armour right away
		if(
			other.player&&other.player.cmd.buttons&BT_USE
			&&!other.countinv("GreenArmourWorn")
		){
			GreenArmour.ArmourChangeEffect(other);
			let worn=GreenArmourWorn(other.GiveInventoryType("GreenArmourWorn"));
			int durability=mags[0];
			if(durability>=1000){
				durability-=1000;
				worn.mega=true;
			}
			worn.durability=durability;
			destroy();
			return;
		}
		//one megaarmour = 3 armour for maxinv purposes
		if(other.findinventory("GreenArmour")){
			let oa=GreenArmour(other.findinventory("GreenArmour"));
			if(oa.amount>=oa.maxamount)return;
			bool othermega=false;
			for(int i=0;i<oa.mags.size();i++){
				if(oa.mags[i]>=1000){
					othermega=true;
				}
			}
			if(othermega)return;
		}
		trypickup(other);
		//super.actualpickup(other); //WHY IS THIS NOT PICKING UP
	}
	static void ArmourChangeEffect(actor owner){
		owner.A_SetBlend("00 00 00",1,6,"00 00 00");
		owner.A_PlaySound("weapons/pocket",CHAN_BODY);
		owner.A_ChangeVelocity(0,0,2);
		let onr=HDPlayerPawn(owner);
		if(onr)onr.stunned+=40;
	}
	states{
	spawn:
		ARMS A -1 nodelay A_JumpIf(invoker.mega,1);
		ARMC A -1;
		stop;
	use:
		TNT1 A 0 A_WearArmour();
		fail;
	}
}
class GreenArmourWorn:HDPickup{
	int durability;
	bool mega;property ismega:mega;
	default{
		-inventory.invbar
		greenarmourworn.ismega false;
		hdpickup.refid HDLD_ARWGREN;
	}
	override void postbeginplay(){
		durability=mega?HDCONST_BLUEARMOUR:HDCONST_GREENARMOUR;
		super.postbeginplay();
		if(owner&&getcvar("hd_helptext")){
			string blah=string.format("You put on the %s armour. ",mega?"combat":"security");
			double qual=double(durability)/(mega?HDCONST_BLUEARMOUR:HDCONST_GREENARMOUR);
			if(qual<0.1)A_Log(blah.."Just don't get hit.",true);
			else if(qual<0.3)A_Log(blah.."You cover your shameful nakedness with your filthy rags.",true);
			else if(qual<0.6)A_Log(blah.."It's better than nothing.");
			else if(qual<0.75)A_Log(blah.."This armour has definitely seen better days.",true);
			else if(qual<0.95)A_Log(blah.."This armour does not pass certification.",true);
		}
	}
	override inventory createtossable(int amount){
		if(owner.countinv("HDBackpack")){
			owner.A_DropInventory("HDBackpack");
			return null;
		}
		if(owner.countinv("WornRadsuit")){
			owner.A_DropInventory("WornRadsuit");
			return null;
		}
		GreenArmour.ArmourChangeEffect(owner);
		let tossed=GreenArmour(owner.spawn("GreenArmour",
			(owner.pos.x,owner.pos.y,owner.pos.z+owner.height-20)
		));
		tossed.mags.clear();
		if(mega)durability+=1000;
		tossed.mags.push(durability);
		destroy();
		return tossed;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	}
}
class BlueArmour:HDPickup{
	default{
		hdpickup.refid HDLD_ARMGREN;
		inventory.pickupmessage "Picked up the security armour.";
	}
	states{
	spawn:
		TNT1 A 0 nodelay{
			let aaa=GreenArmour(spawn("GreenArmour",pos,ALLOW_REPLACE));
			aaa.mags.clear();
			aaa.mags.push(1000+HDCONST_BLUEARMOUR);
			aaa.syncamount();
		}stop;
	}
	override void attachtoowner(actor owner){
		owner.A_GiveInventory("GreenArmour");
		let ga=GreenArmour(owner.findinventory("GreenArmour"));
		ga.mags.push(1000+HDCONST_BLUEARMOUR);
		ga.syncamount();
		destroy();
	}
}
class BlueArmourWorn:HDPickup{
	default{
		inventory.icon "ARMCB0";
		hdpickup.refid HDLD_ARWBLUE;
	}
	override void attachtoowner(actor owner){
		owner.A_GiveInventory("GreenArmourWorn");
		let ga=GreenArmourWorn(owner.findinventory("GreenArmourWorn"));
		ga.durability=HDCONST_BLUEARMOUR;
		ga.mega=true;
		destroy();
	}
}


