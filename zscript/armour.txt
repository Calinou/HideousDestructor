//-------------------------------------------------
// Armour
//-------------------------------------------------
const HDCONST_BLACKARMOUR=33;
const HDCONST_BLUEARMOUR=70;
const HDCONST_GREENARMOUR=144;

//instead of basicarmour, we just use these:
class GreenArmour:InventoryFlag{
	default{
		+inventory.untossable
		inventory.maxamount HDCONST_GREENARMOUR;
	}
	states{spawn:TNT1 A 0;stop;}
}
class BlueArmour:GreenArmour{
	default{
		inventory.maxamount HDCONST_BLUEARMOUR;
	}
}
class BlackArmour:GreenArmour{
	default{
		inventory.maxamount HDCONST_BLACKARMOUR;
	}
}

//since you can only carry one suit, we only need one flag
class StoredArmour:InventoryFlag{
	default{
		inventory.maxamount HDCONST_GREENARMOUR;
	}
}

//here is the strip-armour actionitem (we need an actionitem still for the ccmd to work I think)
class HDDropArmour:ActionItem{
	states{
	use:
		TNT1 A 0{
			name arm="";
			if(countinv("BlackArmour"))arm="BlackArmour";
			else if(countinv("BlueArmour"))arm="BlueArmour";
			else if(countinv("GreenArmour"))arm="GreenArmour";
			else{
				inventory as=null;
				if(countinv("BlackArmourStored"))as=findinventory("BlackArmourStored");
				else if(countinv("BlueArmourStored"))as=findinventory("BlueArmourStored");
				else if(countinv("GreenArmourStored"))as=findinventory("GreenArmourStored");
				if(as)UseInventory(as);
				return;
			}
			int amt=countinv(arm);
			A_SetBlend("00 00 00",1,6,"00 00 00");
			vel.z+=2;
			actor a=spawn("HDArmourPickup",pos+(0,0,height*0.6),ALLOW_REPLACE);
			a.vel=vel+(cos(angle),sin(angle),4);
			a.A_GiveInventory(arm);
			a.stamina=amt;
			HDF.TransferFire(self,a,random(0,3));
			A_TakeInventory("BlackArmour");
			A_TakeInventory("BlueArmour");
			A_TakeInventory("GreenArmour");
			let onr=HDPlayerPawn(self);
			if(onr){
				onr.stunned+=40;
				if(!random(1,3)){
					int unband=min(random(1,10),onr.unstablewoundcount);
					onr.unstablewoundcount-=unband;
					onr.woundcount+=unband;
				}
			}
		}fail;
	}
}

//here is the armour pickup
class HDArmourPickup:HDUPK{
	override void postbeginplay(){
		super.postbeginplay();
		if(!(countinv("BlackArmour")+countinv("BlueArmour")+countinv("GreenArmour"))){
			if(!random(0,6)){
				A_GiveInventory("BlackArmour");
				stamina=HDCONST_BLACKARMOUR;
			}else if(!random(0,6)){
				A_GiveInventory("BlueArmour");
				stamina=HDCONST_BLUEARMOUR;
			}else{
				A_GiveInventory("GreenArmour");
				stamina=HDCONST_GREENARMOUR;
			}
		}
	}
	states{
	spawn:
		---- A 0 A_Stop();
		ARMS A -1{
			if(countinv("BlackArmour"))sprite=getspriteindex("ARMEA0");
			else if(countinv("BlueArmour"))sprite=getspriteindex("ARMCA0");
		}
		ARME A 0;ARMC A 0;
	give:
		---- A 0{
			if(target.countinv("StoredArmour")){
				if(
					!target.countinv("BlackArmour")
					&&!target.countinv("GreenArmour")
					&&!target.countinv("BlueArmour")
					&&!target.countinv("WornRadsuit")
				){
					HDF.TransferFire(self,target);
					class<inventory> at="GreenArmour";
					if(countinv("BlackArmour"))at="BlackArmour";
					else if(countinv("BlueArmour"))at="BlueArmour";
					target.A_GiveInventory(at,stamina);

					target.A_TakeInventory("SpiritualArmour");
					target.A_SetBlend("00 00 00",1,6,"00 00 00");
					target.A_PlaySound("weapons/pocket");
					target.A_ChangeVelocity(0,0,2);
					let onr=HDPlayerPawn(target);
					if(onr)onr.stunned+=40;

					destroy();return;
				}else{
					setstatelabel("spawn");
					return;
				}
			}
			HDF.TransferFire(self,target);
			A_PlaySound("weapons/pocket");
			if(countinv("BlackArmour"))target.A_GiveInventory("BlackArmourStored");
			else if(countinv("BlueArmour"))target.A_GiveInventory("BlueArmourStored");
			else target.A_GiveInventory("GreenArmourStored");
			target.A_GiveInventory("StoredArmour",stamina);
		}stop;
	}
}
class GreenArmourPickup:HDArmourPickup replaces GreenArmour{
	override void postbeginplay(){
		HDUPK.postbeginplay();
		A_GiveInventory("GreenArmour");
		stamina=HDCONST_GREENARMOUR;
	}
}
class BlueArmourPickup:HDArmourPickup replaces BlueArmour{
	override void postbeginplay(){
		HDUPK.postbeginplay();
		A_GiveInventory("BlueArmour");
		stamina=HDCONST_BLUEARMOUR;
	}
}
class BlackArmourPickup:HDArmourPickup replaces BlackArmour{
	override void postbeginplay(){
		HDUPK.postbeginplay();
		A_GiveInventory("BlackArmour");
		stamina=HDCONST_BLACKARMOUR;
	}
}
class GreenArmorPickup:RandomSpawner replaces GreenArmor{
	default{
		dropitem "BlueArmourPickup",256,2;
		dropitem "GreenArmourPickup",256,4;
	}
}
class BlueArmorPickup:RandomSpawner replaces BlueArmor{
	default{
		dropitem "BlueArmourPickup",256,3;
		dropitem "BlackArmourPickup",256,1;
	}
}


//and the usable item
class GreenArmourStored:ActionItem{
	default{
		+inventory.invbar -inventory.untossable
		missiletype "GreenArmour";
		inventory.icon "ARMSB0";
	}
	override void doeffect(){
		if(stamina>0)stamina--;
	}
	override void detachfromowner(){
		target=owner;
		super.detachfromowner();
	}
	states{
	spawn:
		//under no circumstances should this be spawned except by player dropping it
		TNT1 A 1;
		TNT1 A 0{
			if(target){
				actor a=spawn("HDArmourPickup",pos,ALLOW_REPLACE);a.vel=vel;
				name arm=missilename;
				a.A_GiveInventory(arm);
				a.stamina=target.countinv("StoredArmour");
				target.A_TakeInventory("StoredArmour");
			}
		}stop;
	use:
		TNT1 A 0{
			if(countinv("WornRadsuit")){
				if(getcvar("hd_helptext")) A_Log("Take off your environment suit first!",true);
			}else if(countinv("BlackArmour")+countinv("BlueArmour")+countinv("GreenArmour")){
				if(invoker.stamina>25||getcvar("hd_autostrip")){
					if(getcvar("hd_helptext")) A_Log("Taking off armour first.",true);
					invoker.stamina=0;
					UseInventory(FindInventory("HDDropArmour"));
				}else{
					if(getcvar("hd_helptext")&&!invoker.stamina) A_Log("You are already wearing armour. \cdhd_strip\c- in the console or double-tap the inventory icon to remove your current armour.",true);
					invoker.stamina+=35;
				}
			}else{
				A_TakeInventory("SpiritualArmour");
				A_SetBlend("00 00 00",1,6,"00 00 00");
				A_PlaySound("weapons/pocket");
				A_ChangeVelocity(0,0,2);
				let onr=HDPlayerPawn(self);
				if(onr)onr.stunned+=40;
	
				double qual=0;
				int stored=countinv("StoredArmour");
				A_TakeInventory("StoredArmour");
				if(invoker.missilename=="BlackArmour"){
					qual=HDCONST_BLACKARMOUR;
					A_GiveInventory("BlackArmour",stored);
				}
				else if(invoker.missilename=="BlueArmour"){
					qual=HDCONST_BLUEARMOUR;
					A_GiveInventory("BlueArmour",stored);
				}
				else if(invoker.missilename=="GreenArmour"){
					qual=HDCONST_GREENARMOUR;
					A_GiveInventory("GreenArmour",stored);
				}
				if(getcvar("hd_helptext")){
					if(qual)qual=stored/qual;else if(hd_debug)A_Log("armour calculation error.");
					if(qual<0.3) A_Log("You cover your shameful nakedness with your filthy rags.",true);
					else if(qual<0.6) A_Log("It's better than nothing.");
					else if(qual<0.75) A_Log("This armour has definitely seen better days.",true);
					else if(qual<0.95) A_Log("This armour does not pass certification.",true);
				}
				invoker.destroy();
			}
		}fail;
	}
}
class BlueArmourStored:GreenArmourStored{
	default{
		missiletype "BlueArmour";
		inventory.icon "ARMCB0";
	}
}
class BlackArmourStored:GreenArmourStored{
	default{
		missiletype "BlackArmour";
		inventory.icon "ARMEB0";
	}
}






