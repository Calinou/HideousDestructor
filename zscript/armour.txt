//-------------------------------------------------
// Armour
//-------------------------------------------------

const HDCONST_BLACKARMOUR=33;
const HDCONST_BLUEARMOUR=70;
const HDCONST_GREENARMOUR=144;

//instead of basicarmour, we just use these:
class GreenArmour:Ammo{
	default{
		inventory.maxamount HDCONST_GREENARMOUR;
		ammo.backpackmaxamount HDCONST_GREENARMOUR;
		ammo.backpackamount 0;+inventory.untossable
	}
	states{spawn:TNT1 A 0;stop;}
}
class BlueArmour:Ammo{
	default{
		inventory.maxamount HDCONST_BLUEARMOUR;
		ammo.backpackmaxamount HDCONST_BLUEARMOUR;
		ammo.backpackamount 0;+inventory.untossable
	}
	states{spawn:TNT1 A 0;stop;}
}
class BlackArmour:Ammo{
	default{
		inventory.maxamount HDCONST_BLACKARMOUR;
		ammo.backpackmaxamount HDCONST_BLACKARMOUR;
		ammo.backpackamount 0;+inventory.untossable
	}
	states{spawn:TNT1 A 0;stop;}
}

//since you can only carry one suit, we only need one flag
class StoredArmour:InventoryFlag{
	default{
		inventory.maxamount HDCONST_GREENARMOUR;
	}
}

//here is the strip-armour actionitem (we need an actionitem still for the ccmd to work I think)
class HDDropArmour:ActionItem{
	states{
	use:
		TNT1 A 0{
			name arm;
			if(countinv("BlackArmour"))arm="BlackArmour";
			else if(countinv("BlueArmour"))arm="BlueArmour";
			else if(countinv("GreenArmour"))arm="GreenArmour";
			else return;
			int amt=countinv(arm);
			A_SetBlend("00 00 00",1,6,"00 00 00");
			vel.z+=2;
			actor a=spawn("HDArmourPickup",pos,ALLOW_REPLACE);
			a.addz(height*0.6);a.vel=vel+(cos(angle),sin(angle),4);
			a.A_GiveInventory(arm);
			a.stamina=amt;
			A_TakeInventory("BlackArmour");
			A_TakeInventory("BlueArmour");
			A_TakeInventory("GreenArmour");
		}fail;
	}
}
//required because "UseInventory" is a lie
class HDDropArmourRTFN:HDDropArmour{
	states{
	pickup:
		TNT1 A 0;
		goto use;
	}
}

//here is the armour pickup
class HDArmourPickup:HDUPK{
	override void postbeginplay(){
		super.postbeginplay();
		if(!(countinv("BlackArmour")+countinv("BlueArmour")+countinv("GreenArmour"))){
			if(!random(0,6)){
				A_GiveInventory("BlackArmour");
				stamina=HDCONST_BLACKARMOUR;
			}else if(!random(0,6)){
				A_GiveInventory("BlueArmour");
				stamina=HDCONST_BLUEARMOUR;
			}else{
				A_GiveInventory("GreenArmour");
				stamina=HDCONST_GREENARMOUR;
			}
		}
	}
	states{
	spawn:
		---- A 0 A_Stop();
		ARMS A -1{
			if(countinv("BlackArmour")) setstatelabel("spawne");
			else if(countinv("BlueArmour")) setstatelabel("spawnc");
		}
	spawnc:
		ARMC A -1;
	spawne:
		ARME A -1;
	give:
		---- A 0{
			if(target.countinv("StoredArmour")){
				setstatelabel("spawn");
				return;
			}
			A_PlaySound("weapons/pocket");
			if(countinv("BlackArmour"))target.A_GiveInventory("BlackArmourStored");
			else if(countinv("BlueArmour"))target.A_GiveInventory("BlueArmourStored");
			else target.A_GiveInventory("GreenArmourStored");
			target.A_GiveInventory("StoredArmour",stamina);
		}stop;
	}
}
class GreenArmourPickup:HDArmourPickup replaces GreenArmour{
	override void postbeginplay(){
		HDUPK.postbeginplay();
		A_GiveInventory("GreenArmour");
		stamina=HDCONST_GREENARMOUR;
	}
}
class BlueArmourPickup:HDArmourPickup replaces BlueArmour{
	override void postbeginplay(){
		HDUPK.postbeginplay();
		A_GiveInventory("BlueArmour");
		stamina=HDCONST_BLUEARMOUR;
	}
}
class BlackArmourPickup:HDArmourPickup replaces BlackArmour{
	override void postbeginplay(){
		HDUPK.postbeginplay();
		A_GiveInventory("BlackArmour");
		stamina=HDCONST_BLACKARMOUR;
	}
}


//and the usable item
class GreenArmourStored:ActionItem{
	default{
		+inventory.invbar -inventory.untossable
		missiletype "GreenArmour";
		inventory.icon "ARMSB0";
	}
	states{
	spawn:
		//under no circumstances should this be spawned except by player dropping it
		TNT1 A 1;
		TNT1 A 0{
			bool p=false;
			for(int i=0;!p && i<MAXPLAYERS;i++){
				if(playeringame[i] && players[i].mo){
					if(
						distance3d(players[i].mo)<=64
					){
						p=true;
						target=players[i].mo;
					}
				}
			}
			if(target){
				actor a=spawn("HDArmourPickup",pos,ALLOW_REPLACE);a.vel=vel;
				name arm=missilename;
				a.A_GiveInventory(arm);
				a.stamina=target.countinv("StoredArmour");
				target.A_TakeInventory("StoredArmour");
			}
		}stop;
	use:
		TNT1 A 0{
			if(countinv("PowerIronFeet")){
				if(getcvar("hd_helptext")) A_Print("Take off your radiation suit first!");
			}else if(countinv("BlackArmour")+countinv("BlueArmour")+countinv("GreenArmour")){
				if(getcvar("hd_helptext")) A_Print("You are already wearing armour.\n\n
					Type \cdhd_strip\c- in the console\n\n
					to remove your current armour.
				");
			}else{
				A_TakeInventory("SpiritualArmour");
				A_SetBlend("00 00 00",1,6,"00 00 00");
				A_PlaySound("weapons/pocket");
				A_ChangeVelocity(0,0,2);
	
				double qual;
				int stored=countinv("StoredArmour");
				A_TakeInventory("StoredArmour");
				if(invoker.missilename=="BlackArmour"){
					qual=HDCONST_BLACKARMOUR;
					A_GiveInventory("BlackArmour",stored);
				}
				else if(invoker.missilename=="BlueArmour"){
					qual=HDCONST_BLUEARMOUR;
					A_GiveInventory("BlueArmour",stored);
				}
				else if(invoker.missilename=="GreenArmour"){
					qual=HDCONST_GREENARMOUR;
					A_GiveInventory("GreenArmour",stored);
				}
				if(getcvar("hd_helptext")){
					if(qual)qual=stored/qual;else if(hd_debug)A_Log("armour calculation error.");
					if(qual<0.3) A_Print("You cover your shameful\n\nnakedness with your filthy rags.");
					else if(qual<0.6) A_Print("It's better than nothing.");
					else if(qual<0.75) A_Print("This armour has definitely seen better days.");
					else if(qual<0.95) A_Print("This armour does not pass certification.");
				}
				invoker.destroy();
			}
		}fail;
	}
}
class BlueArmourStored:GreenArmourStored{
	default{
		missiletype "BlueArmour";
		inventory.icon "ARMCB0";
	}
}
class BlackArmourStored:GreenArmourStored{
	default{
		missiletype "BlackArmour";
		inventory.icon "ARMEB0";
	}
}






