// ------------------------------------------------------------
//   Additional player functions
// ------------------------------------------------------------

extend class HDPlayerPawn{
	actor antenna;
	void A_MoveAntenna(vector3 newpos){
		if(!antenna){
			antenna=spawn("IdleDummy");
			antenna.A_SetSize(3,3,3);
		}
		antenna.setorigin(newpos,false);
	}

	//check mantling
	//returns: -1 cannot mantle; 0 cannot mantle but on ground; 1 can mantle
	int MantleCheck(){
		bool onground;
		int res=-1;
		if(zat==pos.z){
			onground=true;
			res=0;
		}

		//determine max height
		int mantlemax=36;
		if((player.readyweapon is "NullWeapon" || player.readyweapon is "Ring") && beatmax>18){
			if(onground) mantlemax=64;
			else mantlemax=56;
		}
		//place the antenna
		A_MoveAntenna(pos+vel+(cos(angle)*18,sin(angle)*18,mantlemax));
		//check if blocked
		mantlemax=antenna.getzat();
		if((mantlemax-pos.z)<=maxstepheight) return res; //don't mantle steppables
		if(antenna.getzat(flags:GZF_CEILING)-mantlemax<1) return res; //can't squeeze fingers in
		if(antenna.pos.z<mantlemax) return res; //too high to reach and grab

		//thrust player upwards and forwards
		if(
			onground
			&& !(oldinput && BT_JUMP)
		){
			if(beatmax<24)vel.z+=4;
			else vel.z+=7;
			beatmax--;
		}else vel.z+=3;
		return 1;
	}
	//and jump. don't separate from mantling.
	void JumpCheck(){
		if(
			beatmax>14
			&& input & BT_JUMP //replace with event asap
			&& !MantleCheck()
			&& !(oldinput & BT_JUMP)
		){
			double jumppower=7;
			if(beatmax<20) jumppower=3;
			else if(beatmax<24) jumppower=5;
			double jz=jumppower*0.6;
			if(!sm){
				if(!fm) vel.z+=jz; //straight up
				else if(fm>0){ //forwards
					jumppower*=1.5;
					A_ChangeVelocity(jumppower,0,jz,CVF_RELATIVE);
				}else{ //backwards
					A_ChangeVelocity(-jumppower,0,jz,CVF_RELATIVE);
				}
			}else if(!fm){ //side jump
				if(sm>0) jumppower*=-1;
				A_ChangeVelocity(0,jumppower,jz,CVF_RELATIVE);
			}else{ //diagonal jump
				int smult=1;
				int fmult=1;
				if(fm<0) fmult=-1;
				if(sm>0) smult=-1;
				jumppower*=HDCONST_ONEOVERSQRTTWO;
				A_ChangeVelocity(jumppower*fmult,jumppower*smult,jz,CVF_RELATIVE);
			}
			if(height<40)beatmax-=5;
			else beatmax-=2;
		}
	}

	//Muzzle climb!
	void MuzzleClimb(
		double down,
		double left,
		bool doublemoving=true
	){
		if(doublemoving && countinv("ismoving")){down*=2;left*=2;}
		driftdown+=down;
		driftleft+=left;
	}

	//not actually checking to stumble, but to slow down on bad terrain
	bool StumbleCheck(){
		if(runwalksprint>0) return false;
		if(zat!=pos.z) return false;
		vector2 p=rotatevector((
			fm*0.004,
			sm*-0.004
		),angle);
		if(p==(0,0)) return false;
		A_MoveAntenna(pos+(p.x,p.y,zat));
		if(zat-antenna.getzat()>16) return true;
		return false;
	}

	//If you've got a weapon check going on for something unselected, put it here.
	//GunHeatSmoke(player.readyweapon.getclassname());
	void GunHeatSmoke(name w){
		int pg=0;
		if(countinv("ZM66Heat")){
			pg++;
			A_TakeInventory("ZM66Heat",1);
			if(
				w=="ZM66Rifle"||
				w=="ZM66GrenadeRifle"||
				w=="ZM66SemiRifle"
			)pg+=1000;
		}
		if(countinv("ChaingunHeat")){
			pg++;
			A_TakeInventory("ChaingunHeat",1);
			if(w=="Vulcanette")pg+=1000;
		}
		if(countinv("BrontornisHeat")){
			pg++;
			A_TakeInventory("BrontornisHeat",1);
			if(w=="Brontornis")pg+=1000;
		}
		if(countinv("LiberatorHeat")){
			pg++;
			A_TakeInventory("LiberatorHeat",1);
			if(
				w=="LiberatorRifle"||
				w=="LiberatorGrenadeRifle"
			)pg+=1000;
		}
		if(!pg)return;
		if(pg>1000){	//one of these puffs must emerge from muzzle
			pg-=1001;
			A_SpawnItemEx("HDGunSmoke",
				cos(pitch)*4,0,-sin(pitch)*4,
				cos(pitch)*4,0,-sin(pitch)*4,
				flags:SXF_NOCHECKPOSITION
			);
		}
		double ht=height*0.7;
		actor a;
		while(pg>0){
			pg--;
			a=spawn("HDGunSmoke",pos+(0,0,ht));
			a.pitch=-80;
			a.angle=angle-90;
			a.vel+=vel;
		}
	}


	//the heart
	const HDCONST_MINHEARTTICS = 5; //35/5*60=420 beats per minute!
	int beatcount;
	int beatmax;
	int beatcap;
	int beatcounter;
	int stimcount;
	int regenblues;
	int regenbers;
	int woundcount;
	int newwoundcount;
	int oldwoundcount;
	int aggravateddamage;
	void HeartTicker(){
		if(bkilled) return; //don't really need this...
		A_SetInventory("HeartBeatCounter",beatcount);

		//on every beat
		if(beatcount>0){
			beatcount--;
			pitch-=0.00001*beatcount*(1+2*(35-beatmax));
		}else{
			//remove these once we're done with them
			//lethal didn't mean the same as oldwoundcount but oh well
			if(countinv("RegenBlues")){
				regenblues+=countinv("RegenBlues");
				A_TakeInventory("RegenBlues");
			}
			if(countinv("RegenBers")){
				regenbers+=countinv("RegenBers");
				A_TakeInventory("RegenBers");
			}
			if(countinv("RegenStims")){
				stimcount+=countinv("RegenStims");
				A_TakeInventory("RegenStims");
			}
			if(countinv("AggravatedDamage")){
				aggravateddamage+=countinv("AggravatedDamage");
				A_TakeInventory("AggravatedDamage");
			}
			if(countinv("LethalDamage")){
				oldwoundcount+=countinv("LethalDamage");
				A_TakeInventory("LethalDamage");
			}

			//limit beatmax
			if(countinv("PowerStrength")) beatmax=clamp(beatmax,4,14);
			else beatmax=clamp(beatmax,HDCONST_MINHEARTTICS,35);

			if(beatmax<8)DamageMobj(self,self,1,"internal");

			//reset beatcount, subject to stims
			if(stimcount) beatcount=beatmax-random(1,2);
				else beatcount=beatmax;
			A_SetBlend("66 10 12",0.3-0.3*(health*0.01),beatcount);
			pitch+=0.002*beatcount*(1+(35-beatmax));
			beatcounter++;

			//sprinting
			if(cansprint && runwalksprint>0){
				beatmax--;
				if(beatmax<=HDCONST_SPRINTMAXHEARTRATE)beatmax-=10;
			}

			//adrenalized vessels begin to relax...
			if(newwoundcount>0 && (beatmax>32||beatmax>=beatcap)){
				newwoundcount--;woundcount++;
			}

			//magical healing stops imminent danger first
			if(regenblues>0 && woundcount+newwoundcount>0){
				newwoundcount--;woundcount--;
				regenblues--;
			}

			//zerk
			if(regenbers){
				regenbers--;
				healthing(1);
			}

			//don't go negative wound
			if(newwoundcount<0)newwoundcount=0;
			if(woundcount<0)woundcount=0;

			if(beatcounter%4==0){	//every 4 beats
				//recovering heart rate
				if(beatmax<beatcap) beatmax++;
			}
			if(beatcounter%12==0){	//every 12 beats
				//you're either gaining or losing health
//this is the real one, but we can't use it until the weapons are replaced
//				if(woundcount)A_DamageSelf(random(1,woundcount),"bleedout");
//this is the transitional one
if(countinv("WoundCount"))A_DamageSelf(random(1,woundcount),"bleedout");
				else healthing(1);

				if(stimcount>0)stimcount--;
				if(regenblues>0 && oldwoundcount+aggravateddamage>0){
					oldwoundcount-=2;aggravateddamage--;
					regenblues--;
					if(oldwoundcount<0)oldwoundcount=0;
					if(aggravateddamage<0)aggravateddamage=0;
				}
				if(woundcount>0 && beatmax<26 && random(1,7==1)){
					newwoundcount++;woundcount--;
				}
			}
			if(beatcounter%20==0){	//every 20 beats
				beatcap=clamp(beatcap+8,1,35);

				//updating beatcap (minimum heart rate)
				if(health<40) beatcap=clamp(beatcap,1,24);
				else if(health<60) beatcap=clamp(beatcap,1,32);
				if(woundcount>10) beatcap=clamp(beatcap,1,12);    
				else if(woundcount>5) beatcap=clamp(beatcap,1,24);

				//keep stim below cap as long as it's above 12
				if(stimcount>0 && beatcap>12)    
					beatcap=clamp(beatcap,12,beatcap-1);
			}
			if(beatcounter==120){	//every 120 beats
				beatcounter=0;	//reset
				if(random(70,health)==100-aggravateddamage)oldwoundcount--;
			}
		}
	}
}

class HDMuzzleBlocker:HDActor{
	default{
		-solid -nogravity -shootable +noblockmonst +noblockmap
		height 1;radius 1;
	}
}