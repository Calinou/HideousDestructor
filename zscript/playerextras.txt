// ------------------------------------------------------------
// Additional player functions
// ------------------------------------------------------------
extend class HDPlayerPawn{
	actor antenna;
	void A_MoveAntenna(vector3 newpos){
		if(!antenna){
			antenna=spawn("IdleDummy");
			antenna.A_SetSize(3,3,3);
		}
		antenna.setorigin(newpos,false);
	}

	//check mantling
	//returns: -1 cannot mantle; 0 cannot mantle but on ground; 1 can mantle
	int MantleCheck(){
		bool onground;
		int res=-1;
		if(zat==pos.z){
			onground=true;
			res=0;
		}

		//determine max height
		int mantlemax=36;
		if(
			!mustwalk
			&&barehanded
			&&(
				zerk||
				stimcount>10||
				fatigue<HDCONST_SPRINTFATIGUE
			)
		){
			if(zerk>0||onground)mantlemax=64;
			else mantlemax=56;
		}
		//place the antenna
		A_MoveAntenna(pos+vel+(cos(angle)*18,sin(angle)*18,mantlemax));
		//check if blocked
		mantlemax=antenna.getzat();
		if((mantlemax-pos.z)<=maxstepheight) return res; //don't mantle steppables
		if(antenna.getzat(flags:GZF_CEILING)-mantlemax<1) return res; //can't squeeze fingers in
		if(antenna.pos.z<mantlemax) return res; //too high to reach and grab

		//thrust player upwards and forwards
		if(
			onground
			&&!(oldinput & BT_JUMP)
		){
			if(!countinv("PowerStrength") && fatigue<HDCONST_SPRINTFATIGUE)vel.z+=4;
			else vel.z+=7;
			fatigue+=random(1,2);
		}else vel.z+=3;
		return 1;
	}
	//and jump. don't separate from mantling.
	override void CheckJump(){}
	void JumpCheck(){
		let player = self.player;
		if(
			player.cmd.buttons & BT_JUMP
		){
			if(player.crouchoffset){
				// Jumping while crouching will force an un-crouch but not jump
				player.crouching=1;
			}
			else if(waterlevel>=2){
				vel.z=4*speed;
			}
			else if(bnogravity){
				vel.z=3;
			}
			else if(
				!stunned
				&&(
					fatigue<HDCONST_SPRINTFATIGUE
					||zerk
					||cansprint
				)
				&&!MantleCheck()
				&&!countinv("WornRadsuit")
				&&!(oldinput & BT_JUMP)
			){
			double jumppower=5;
			if(zerk>0)jumppower=10;else{
				if(fatigue>30) jumppower=3;  
				else if(fatigue>20) jumppower=3.5;
			}
				if(overloaded)jumppower/=max(1,overloaded);
				double jz=jumppower*0.6;
				if(!sm){
					if(!fm) vel.z+=jz; //straight up
					else if(fm>0){ //forwards
						jumppower*=1.5;
						A_ChangeVelocity(jumppower,0,jz,CVF_RELATIVE);
					}else{ //backwards
						A_ChangeVelocity(-jumppower,0,jz,CVF_RELATIVE);
					}
				}else if(!fm){ //side jump
					if(sm>0) jumppower*=-1;
					A_ChangeVelocity(0,jumppower,jz,CVF_RELATIVE);
				}else{ //diagonal jump
					int smult=1;
					int fmult=1;
					if(fm<0) fmult=-1;
					if(sm>0) smult=-1;
					jumppower*=HDCONST_ONEOVERSQRTTWO;
					A_ChangeVelocity(jumppower*fmult,jumppower*smult,jz,CVF_RELATIVE);
				}
				if(height<40){
					if(bloodpressure<40)bloodpressure+=7;
					fatigue+=7;
				}
				else{
					if(bloodpressure<40)bloodpressure+=4;
					fatigue+=4;
				}
			}
		}
	}

	//not actually checking to stumble, but to slow down on bad terrain
	bool StumbleCheck(){
		if(runwalksprint>0) return false;
		if(zat!=pos.z) return false;
		vector2 p=rotatevector((
			fm*0.004,
			sm*-0.004
		),angle);
		if(p==(0,0)) return false;
		A_MoveAntenna(pos+(p.x,p.y,zat));
		if(zat-antenna.getzat()>16) return true;
		return false;
	}

	//If you've got a weapon check going on for something unselected, <s>put it here.</s>
	//take it OUT of here and put it in the weapon's DoEffect()!
	//GunHeatSmoke(player.readyweapon.getclassname());
	void GunHeatSmoke(name w){
		int pg=0;
		if(countinv("ZM66Heat")){
			pg++;
			if(random(0,2))A_TakeInventory("ZM66Heat",1);
			if(
				w=="ZM66Rifle"||
				w=="ZM66GrenadeRifle"||
				w=="ZM66SemiRifle"
			)pg+=1000;
		}
		if(countinv("ChaingunHeat")){
			pg++;
			A_TakeInventory("ChaingunHeat",1);
			if(w=="Vulcanette")pg+=1000;
		}
		if(countinv("BrontornisHeat")){
			pg++;
			A_TakeInventory("BrontornisHeat",1);
			if(w=="Brontornis")pg+=1000;
		}
		if(countinv("LiberatorHeat")){
			pg++;
			if(random(0,2))A_TakeInventory("LiberatorHeat",1);
			if(
				w=="LiberatorRifle"||
				w=="LiberatorGrenadeRifle"
			)pg+=1000;
		}
		if(!pg)return;
		double ht=height*0.7;
		if(pg>1000){	//one of these puffs must emerge from muzzle
			pg-=1001;
			A_SpawnItemEx("HDGunSmoke",
				cos(pitch)*4,0,-sin(pitch)*4+ht,
				cos(pitch)*4,0,-sin(pitch)*4,
				flags:SXF_NOCHECKPOSITION
			);
		}
		actor a;
		while(pg>0){
			pg--;
			a=spawn("HDGunSmoke",pos+(0,0,ht));
			a.pitch=-80;
			a.angle=angle-90;
			a.vel+=vel;
		}
	}
}


