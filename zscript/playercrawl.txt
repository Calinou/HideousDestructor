// ------------------------------------------------------------
// CRAAAAAAAAAAAWWWWLING IN MY SKIN
// ------------------------------------------------------------
class DyingMorph:ActionItem{
	states{
	pickup:
		TNT1 A 0 A_Morph("HDPlayerDying",int.MAX,MRF_TRANSFERTRANSLATION,"CheckPuff","CheckPuff");
		fail;
	}
}
class HDPlayerDying:HDPlayerPawn{
	default{
		player.viewbob 1.5;
		player.jumpz 0;maxstepheight 8;
		player.morphweapon "SelfBandageDying";
		player.startitem "SelfBandageDying";
		player.viewheight 12;player.attackzoffset 4;
		height 16;
	}
	override void checkcrouch(bool totallyfrozen){}
	override void playrunning(){}
	override void playattacking(){}
	override void playattacking2(){}
	override void playidle(){}
	override void jumpcheck(double fm,double sm,bool forceslide){}
	int excesshealth;
	override void postbeginplay(){
		super.postbeginplay();
		excesshealth=0;
	}
	override void GiveBasics(){}
	override void tick(){
		super.tick();
		if(!player||player.bot||player.mo!=self)return;

		let pend=player.pendingweapon;
		let readyw=player.readyweapon;
		if(
			(
				readyw
				&&(
					hdfist(pend)
					||!pend.bwimpy_weapon
				)
			)||(
				pend
				&&pend!=WP_NOCHANGE
				&&(
					hdfist(pend)
					||!pend.bwimpy_weapon
				)
			)
		){
			A_GiveInventory("NullWeapon");
			A_SelectWeapon("NullWeapon");
		}

		if(health>min(12,getmaxhealth()-1)){		
			excesshealth++;	
			if(
				excesshealth>7
			){
				if(
					player.cmd.buttons&BT_USE
					||player.cmd.buttons&BT_JUMP
					||(
						player.cmd.buttons&BT_SPEED
						&&(
							player.cmd.forwardmove
							||player.cmd.sidemove
						)
					)
				){
					playerinfo ppp=player;
					UndoPlayerMorph(player,0,true);
					let pppmo=hdplayerpawn(ppp.mo);
					if(ppp.mo){
						pppmo.damagemobj(null,null,pppmo.health-health,"internal");
						ppp.crouchfactor=0.1;
						HDWeaponSelector.Select(pppmo,"HDFist",4);
						pppmo.A_PlaySound("*grunt",CHAN_VOICE);
						pppmo.fatigue=(HDCONST_SPRINTFATIGUE*4/5);
						pppmo.stunned=100;
						pppmo.lastpitch=lastpitch;
						pppmo.lastangle=lastangle;
						pppmo.feetangle=feetangle;
						pppmo.zerk=regenblues;
						pppmo.regenblues=regenblues;
						pppmo.stimcount=stimcount;
						pppmo.woundcount=woundcount;
						pppmo.oldwoundcount=oldwoundcount;
						pppmo.unstablewoundcount=unstablewoundcount;
						pppmo.aggravateddamage=aggravateddamage;
					}
				}
				return;
			}else{
				damagemobj(null,null,health-10,"maxhpdrain");
			}
		}
		speed=min(speed,frandom(0,0.06));
		gunbraced=false;
		fatigue=(HDCONST_SPRINTFATIGUE>>1);
		viewbob=12.;
		if(pitch<70)A_MuzzleClimb((frandom(-0.1,0.1),frandom(0.1,0.6)),(0,0),(0,0),(0,0));
		else A_TakeInventory("IsMoving");
	}
	int breathtics;
	void A_StillBreathing(){
		if(breathtics>180)breathtics=0;
		breathtics+=15;
		scale.y=1.+0.03*sin(breathtics);
	}
	override void Die(actor source,actor inflictor,int dmgflags,name MeansOfDeath){
		super.die(source,inflictor,dmgflags,MeansOfDeath);
		if(playercorpse){
			playercorpse.setstatelabel("dead");
			playercorpse.sprite=sprite;
			playercorpse.tics=6;
		}
	}
	states{
	spawn:
		PLAY H 5 A_SetBlend("00 00 00",1.,140,"00 00 00");
		PLAY IIIIIJJJJJKKKKKLLLLL 1{
			if(viewheight>16){
				viewheight=max(16,viewheight-2);
			}
		}
	see:
	melee:
	missile:
		PLAY L 2 A_StillBreathing();
		wait;
	pain:
		PLAY L 3{excesshealth--;}
		PLAY L 10 A_Pain();
		goto see;
	death:
	xdeath:
		TNT1 A 0 A_NoBlocking();
		TNT1 A 10 A_CheckPlayerDone();
		wait;
	}
}

class SelfBandageDying:SelfBandage{
	states{
	altfire:
	althold:
		TNT1 A 0;
		goto nope;
	}
}




