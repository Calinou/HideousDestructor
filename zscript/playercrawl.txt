// ------------------------------------------------------------
// CRAAAAAAAAAAAWWWWLING IN MY SKIN
// ------------------------------------------------------------
extend class HDHandlers{
	void PlayDead(hdplayerpawn ppp){
		ppp.A_Incapacitated(hdplayerpawn.HDINCAP_FAKING);
	}
}
extend class HDPlayerPawn{
	int incapacitated;
	int incaptimer;
	override void calcheight(){if(!incapacitated)super.calcheight();}
	void IncapacitatedCheck(){
		if(!incapacitated)return;
		if(incaptimer>0)incaptimer--;

		A_SetInventory("HDIncapWeapon",1);
		A_SelectWeapon("HDIncapWeapon");
		if(incapacitated>0){
			A_SetSize(radius,max(16,height-3));
		}else{
			A_SetSize(radius,min(48,height+3));
		}
		player.viewz=pos.z+viewheight*(height/48.)+hudbob.y*0.1;

		frame=clamp(6+abs(incapacitated>>2),6,11);
		if(incapacitated<((11-6)<<2))incapacitated++;

		runwalksprint=-1;
		speed=0.02;
		userange=20;
		if(
			zerk>4000
			||(
				health>13
				&&player.cmd.buttons&BT_JUMP
				&&incaptimer<1
			)
		){
			scale.y=1.;
			incapacitated=-((11-6)<<2);
		}
		if(
			incaptimer>0
			&&health>12
			&&health<15
		){
			damagemobj(null,null,min(5,health-10),"maxhpdrain");
		}

		if(!incapacitated){
			A_TakeInventory("HDIncapWeapon");
			A_SelectWeapon("HDFist");
			userange=getdefaultbytype("HDPlayerPawn").userange;
			setstatelabel("spawn");
			incapacitated=false;
			player.crouchfactor=0.3;
			player.viewheight=viewheight*player.crouchfactor;
		}
	}
	void A_Incapacitated(int flags=0){
		incapacitated=1;
		incaptimer=100; //damage calculation
		return;

		let ppp=player;
		if(!ppp)return;
		if(
			!(flags&HDINCAP_FAKING)
			&&!random(0,15)
		)Disarm(self);
		else{
			let www=hdweapon(ppp.readyweapon);
			if(www)www.OnPlayerDrop();
		}
		A_Morph("HDPlayerDying",int.MAX,MRF_TRANSFERTRANSLATION,"CheckPuff","CheckPuff");
		let pppmo=HDPlayerDying(ppp.mo);
		if(flags&HDINCAP_SCREAM)pppmo.A_PlayerScream();
		pppmo.viewheight=self.viewheight*ppp.crouchfactor;
		A_TransferConditions(pppmo);
		if(flags&HDINCAP_FAKING)pppmo.excesshealth=999;
		pppmo.damagemobj(null,null,pppmo.health-health,"maxhpdrain");
	}
	enum IncapFlags{
		HDINCAP_FAKING=1,
		HDINCAP_SCREAM=2,
	}
	void A_TransferConditions(hdplayerpawn pppmo){
		if(!pppmo)return;
		pppmo.beatcount=beatcount;
		pppmo.beatmax=beatmax;
		pppmo.beatcap=beatcap;
		pppmo.beatcounter=beatcounter;
		pppmo.bloodpressure=bloodpressure;
		pppmo.lastpitch=lastpitch;
		pppmo.lastangle=lastangle;
		pppmo.feetangle=feetangle;
		pppmo.zerk=zerk;
		pppmo.lastthingthatwoundedyou=lastthingthatwoundedyou;
		pppmo.haszerked=haszerked;
		pppmo.regenblues=regenblues;
		pppmo.stimcount=stimcount;
		pppmo.woundcount=woundcount;
		pppmo.oldwoundcount=oldwoundcount;
		pppmo.unstablewoundcount=unstablewoundcount;
		pppmo.aggravateddamage=aggravateddamage;
		pppmo.stunned=stunned;
		pppmo.fatigue=fatigue;
		pppmo.bledout=bledout;
		pppmo.specialtipalpha=specialtipalpha;
		pppmo.specialtip=specialtip;
	}
}
class HDPlayerDying:HDPlayerPawn{
	default{
		+notarget
		player.viewbob 1.5;
		player.jumpz 0;maxstepheight 8;
		player.morphweapon "HDIncapWeapon";
		player.startitem "HDIncapWeapon";
		player.viewheight 12;player.attackzoffset 4;
		player.userange 20;
		height 16;
	}
	override void checkcrouch(bool totallyfrozen){}
	override void playrunning(){}
	override void playattacking(){}
	override void playattacking2(){}
	override void playidle(){}
	override void jumpcheck(double fm,double sm,bool forceslide){}
	int excesshealth;
	override void postbeginplay(){
		super.postbeginplay();
	}
	override void GiveBasics(){}
	override void tick(){
		super.tick();
		if(!player||player.bot||player.mo!=self)return;

		if(viewheight>16)viewheight=max(16,viewheight-2);

		invsel=null; //prevent player from using items

		viewbob=12.;
		speed=min(speed,frandom(0,0.06));
		if(pitch<70)A_MuzzleClimb((frandom(-0.1,0.1),frandom(0.1,0.6)),(0,0),(0,0),(0,0));
		else A_TakeInventory("IsMoving");
		gunbraced=false;

		if(health>min(12,getmaxhealth()-1)){
			if(
				excesshealth>0
			){
				if(
					zerk>0
					||player.cmd.buttons
					||(
						player.cmd.buttons&BT_SPEED
						&&(
							player.cmd.forwardmove
							||player.cmd.sidemove
						)
					)
				){
					playerinfo ppp=player;
					UndoPlayerMorph(player,0,true);
					let pppmo=hdplayerpawn(ppp.mo);
					if(ppp.mo){
						ppp.crouchfactor=0.1;
						pppmo.damagemobj(null,null,pppmo.health-health,"maxhpdrain");
						pppmo.A_PlaySound("*grunt",CHAN_VOICE);
						A_TransferConditions(pppmo);
						pppmo.fatigue+=10;
						pppmo.muzzleclimb1.y=10.;
						pppmo.muzzleclimb2.y=20.;
						pppmo.muzzleclimb3.y=20.;
						pppmo.muzzleclimb4.y=10.;
						pppmo.overloaded=5.;
					}
				}
				return;
			}else{
				damagemobj(null,null,min(5,health-10),"maxhpdrain");
			}
			excesshealth++;
		}
		fatigue=(HDCONST_SPRINTFATIGUE>>1);
	}
	int breathtics;
	void A_StillBreathing(){
		if(breathtics>180)breathtics=0;
		breathtics+=15;
		scale.y=1.+0.03*sin(breathtics);
	}
	override void Die(actor source,actor inflictor,int dmgflags,name MeansOfDeath){
		silentdeath=true;
		super.die(source,inflictor,dmgflags,MeansOfDeath);
		if(playercorpse){
			playercorpse.setstatelabel("dead");
			playercorpse.tics=6;
			playercorpse.scale=scale;
		}
	}
	//can't kick, can only pick up objects that can be used while in this state
	override void UseButtonCheck(int input,int fm,int sm){
		if(!(input&BT_USE))bpickup=false;else{
			if(oldinput&BT_ATTACK)hasgrabbed=true;
			else if(!(oldinput&BT_USE))hasgrabbed=false;

			bpickup=!hasgrabbed;
			PickupGrabber(12);
		}
	}
	states{
	spawn:
		PLAY H 5 A_SetBlend("00 00 00",1.,140,"00 00 00");
		PLAY IJKL 5;
	see:
	melee:
	missile:
		PLAY L 2 A_StillBreathing();
		wait;
	pain:
		PLAY L 3{excesshealth--;}
		PLAY L 10 A_Pain();
		goto see;
	death:
	xdeath:
		TNT1 A 0 A_NoBlocking();
		TNT1 A 10 A_CheckPlayerDone();
		wait;
	}
}


class HDIncapWeapon:SelfBandage{
	class<actor> injecttype;
	class<actor> spentinjecttype;
	class<inventory> inventorytype;
	default{
		+hdweapon.reverseguninertia
		weapon.bobspeed 0.7;
	}
	action void A_PickInventoryType(){
		static const class<inventory> types[]={
			"HDIncapWeapon",
			"PortableStimpack",
			"PortableBerserkpack",
			"HDFragGrenadeAmmo"
		};

		int which=invoker.weaponstatus[INCS_INDEX];
		do{
			which++;
			if(which>=types.size())which=0;
		}while(!countinv(types[which]));
		invoker.weaponstatus[INCS_INDEX]=which;

		let inventorytype=types[which];
		if(
			!countinv(inventorytype)
		){
			inventorytype="HDIncapWeapon";
			return;
		}else if(inventorytype=="PortableBerserkPack"){
			invoker.spentinjecttype="SpentZerk";
			invoker.injecttype="InjectZerkDummy";
		}
		else if(inventorytype=="PortableStimpack"){
			invoker.spentinjecttype="SpentStim";
			invoker.injecttype="InjectStimDummy";
		}
		else if(inventorytype=="HDFragGrenadeAmmo"){
			invoker.spentinjecttype="HDFragSpoon";
			invoker.injecttype="HDFragGrenadeRoller";
		}
		invoker.inventorytype=inventorytype;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		super.DrawHUDStuff(sb,hdw,hpl);
		if(hpl.player.cmd.buttons&BT_ATTACK)return;
		int yofss=weaponstatus[INCS_YOFS]-((hpl.player.cmd.buttons&BT_ALTATTACK)?(50+5*hpl.flip):60);
		vector2 bob=(hpl.hudbob.x*0.2,hpl.hudbob.y*0.2+yofss);
		if(inventorytype=="HDFragGrenadeAmmo"){
			sb.drawimage(
				(weaponstatus[0]&INCF_PINOUT)?"FRAGF0":"FRAGA0",
				bob,sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.6,1.6)
			);
		}else if(inventorytype=="PortableBerserkpack"){
			sb.drawimage("PSTRA0",bob,sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.,2.));
		}else if(inventorytype=="PortableStimpack"){
			sb.drawimage("STIMA0",bob,sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.,2.));
		}
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Try to stop the bleeding\n"
		..WEPHELP_RELOAD.."  Take off armour\n"
		..WEPHELP_ALTFIRE.."  Use the item in hand\n"
		..WEPHELP_FIREMODE.."  Fumble for something else\n"
		..((
			!hdplayerdying(owner)
			||hdplayerdying(owner).excesshealth>0
		)?(WEPHELP_BTCOL.."Jump"..WEPHELP_RGCOL.."  Get up\n"):"")
		;
	}
	states{
	select:
		TNT1 A 0 A_Raise();
		wait;
	ready:
		TNT1 A 0 A_WeaponReady(WRF_NOFIRE|WRF_ALLOWUSER2);
		TNT1 A 0{
			invoker.weaponstatus[INCS_YOFS]=invoker.weaponstatus[INCS_YOFS]*2/3;
			A_SetHelpText();
		}
		goto super::ready;
	firemode:
		TNT1 A 1{
			int yofs=max(4,invoker.weaponstatus[INCS_YOFS]*3/2);
			if(
				yofs>100
				&&pressingfiremode()
			)setweaponstate("fumbleforsomething");
			else invoker.weaponstatus[INCS_YOFS]=yofs;
		}
		TNT1 A 0 A_JumpIf(pressingfiremode(),"firemode");
		goto readyend;
	fumbleforsomething:
		TNT1 A 20 A_PlaySound("weapons/pocket",CHAN_WEAPON);
		TNT1 A 0 A_PickInventoryType();
		goto nope;
	altfire:
	althold:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&INCF_PINOUT,"holdfrag");
		TNT1 A 10 A_JumpIf(health<12&&!random(0,7),"nope");
		TNT1 A 20 A_PlaySound("weapons/pocket",CHAN_WEAPON);
		TNT1 A 0 A_JumpIf(!countinv(invoker.inventorytype),"fumbleforsomething");
		TNT1 A 0 A_JumpIf(invoker.inventorytype=="HDFragGrenadeAmmo","pullpin");
		TNT1 A 0 A_JumpIf(
			invoker.inventorytype=="PortableStimpack"
			||invoker.inventorytype=="PortableBerserkpack"
			,"injectstim");
		goto nope;
	injectstim:
		TNT1 A 1{
			A_SetBlend("7a 3a 18",0.1,4);
			A_SetPitch(pitch+2,SPF_INTERPOLATE);
			A_PlaySound("*usemeds",CHAN_VOICE);
			A_PlaySound("misc/bulletflesh",CHAN_WEAPON);
			actor a=spawn(invoker.injecttype,pos,ALLOW_REPLACE);
			a.accuracy=40;a.target=self;
		}
		TNT1 AAAA 1 A_SetPitch(pitch-0.5,SPF_INTERPOLATE);
		TNT1 A 6;
		TNT1 A 0{
			actor a=spawn(invoker.spentinjecttype,pos+(0,0,height-8),ALLOW_REPLACE);
			a.angle=angle;a.vel=vel;a.A_ChangeVelocity(3,1,2,CVF_RELATIVE);
			a.A_PlaySound("weapons/grenopen",CHAN_WEAPON);
			A_TakeInventory(invoker.inventorytype,1);
			invoker.inventorytype="";
		}
		goto nope;
	pullpin:
		TNT1 A 3 A_JumpIf(health<12&&!random(0,4),"readyend");
		TNT1 A 0{
			if(!countinv(invoker.inventorytype))return;
			invoker.weaponstatus[0]|=INCF_PINOUT;
			A_PlaySound("weapons/fragpinout",CHAN_WEAPON);
			A_TakeInventory(invoker.inventorytype,1);
		}
		//fallthrough
	holdfrag:
		TNT1 A 2 A_ClearRefire();
		TNT1 A 0{
			int buttons=player.cmd.buttons;
			if(buttons&BT_RELOAD)setweaponstate("pinbackin");
			else if(buttons&BT_ALTFIRE)setweaponstate("holdfrag");
		}
		TNT1 A 10;
		TNT1 A 0{invoker.DropFrag();}
		goto readyend;
	pinbackin:
		TNT1 A 10;
		TNT1 A 0 A_JumpIf(health<12&&!random(0,2),"holdfrag");
		TNT1 A 20{
			A_PlaySound("weapons/fragpinout",CHAN_WEAPON);
			invoker.weaponstatus[0]&=~INCF_PINOUT;
			A_GiveInventory("HDFragGrenadeAmmo",1);
		}
		goto nope;
	}
	override void OwnerDied(){
		DropFrag();
		super.OwnerDied();
	}
	override void DetachFromOwner(){
		DropFrag();
		super.DetachFromOwner();
	}
	override inventory CreateTossable(){
		A_DropInventory("PortableMedikit");
		A_DropInventory("HDMedikitter");
		return null;
	}
	void DropFrag(){
		if(
			!(weaponstatus[0]&INCF_PINOUT)
			||!owner
		)return;
		weaponstatus[0]&=~INCF_PINOUT;
		//create the spoon
		owner.A_SpawnItemEx(spentinjecttype,
			-4,-3,owner.height-8,
			1,2,3,
			frandom(33,45),SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
		//create the grenade
		owner.A_SpawnItemEx(injecttype,
			0,0,owner.height,
			2,0,-2,
			0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
		inventorytype="";
	}
	enum CrawlingInts{
		INCF_PINOUT=1,
		INCS_YOFS=1,
		INCS_INDEX=2,
	}
}

