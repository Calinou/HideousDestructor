// ------------------------------------------------------------
// Backpack
// ------------------------------------------------------------
class HDBP:HDWeapon{
	default{
		+inventory.invbar +weapon.wimpy_weapon
		inventory.icon "BPAKA0";
		inventory.pickupmessage "Picked up a backpack to help fill your life with ammo!";
		inventory.pickupsound "weapons/pocket";
	}
	states{
	spawn:
		BPAK AB -1 nodelay{
			if(!invoker.getbulk())frame=1;
		}
	select0:
		TNT1 A 10{
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			if(invoker.weaponstatus[HDBPS_CARRIED]>1000)A_SetTics(20);
		}goto super::select0;
	ready:
		TNT1 A 1{
			invoker.weaponstatus[HDBPS_COOLDOWN]=max(0,invoker.weaponstatus[HDBPS_COOLDOWN]-1);
			A_WeaponReady(WRF_ALLOWUSER1|WRF_ALLOWUSER4|WRF_ALLOWZOOM|WRF_ALLOWRELOAD);
		}goto readyend;
	altreload:
		TNT1 A 0{
			class<inventory> what=invoker.itemtype[invoker.weaponstatus[HDBPS_WHICH]];
			A_DropInventory(what,countinv(what));
		}goto nope;
	fire:
	hold:
	altfire:
	althold:
		TNT1 A 3{
			//better to hold rather than toggle
			if(pressingfiremode())invoker.weaponstatus[0]|=HDBPF_NOAUTO;
				else invoker.weaponstatus[0]&=~HDBPF_NOAUTO;

			//move directionz
			if(pressingfire())
				invoker.weaponstatus[HDBPS_WHICH]--;
				else invoker.weaponstatus[HDBPS_WHICH]++;
			if(
				invoker.weaponstatus[HDBPS_WHICH]<0
			){
				invoker.weaponstatus[HDBPS_WHICH]=HDBPC_NUMITEMS-1;
				while(!invoker.itemname[invoker.weaponstatus[HDBPS_WHICH]])
					invoker.weaponstatus[HDBPS_WHICH]--;
			}else if(
				invoker.weaponstatus[HDBPS_WHICH]>=HDBPC_NUMITEMS
				||!invoker.itemname[invoker.weaponstatus[HDBPS_WHICH]]
			)invoker.weaponstatus[HDBPS_WHICH]=0;

			if(
				invoker.itemamount[invoker.weaponstatus[HDBPS_WHICH]]<1
			){
				int which=invoker.weaponstatus[HDBPS_WHICH];
				if(
					which&&!countinv(invoker.itemtype[which])
				)A_Refire();
				else A_SetTics(1);
			}
		}
		TNT1 A 0{
			if(invoker.weaponstatus[0]&HDBPF_NOAUTO){
				A_Refire("holdnoauto");
			}else A_Refire();
		}goto ready;
	holdnoauto:
		TNT1 A 1;
		TNT1 A 0 A_Refire("holdnoauto");
		goto ready;
	reload:
		TNT1 A 5{
			int which=invoker.weaponstatus[HDBPS_WHICH];
			class<inventory> itp=invoker.itemtype[which];

			if(
				!countinv(itp)
				||(
					HDBPC_CAPACITY-invoker.itembulk[which]
					<invoker.weaponstatus[HDBPS_CARRIED]
				)
			)return;


			//where the magic happens
			if(itp=="GreenArmourStored"){
				if(invoker.itemamount[which]>0)return; //limit one
				invoker.itemamount[which]=countinv("StoredArmour");
				A_TakeInventory(itp);
				A_TakeInventory("StoredArmour");
			}else if(itp=="HDCellAmmo"){
				int totake=min(countinv(itp),20);
				invoker.itemamount[which]+=totake;
				A_TakeInventory(itp,totake);
			}else{
				invoker.itemamount[which]++;
				A_TakeInventory(itp,1);
			}


			if(
				invoker.itemamount[which]>20
				||invoker.itembulk[which]>40
			)A_SetTics(4);

			invoker.getbulk();
		}goto ready;
	unload:
		TNT1 A 7{
			int which=invoker.weaponstatus[HDBPS_WHICH];
			class<inventory> itp=invoker.itemtype[which];
			if(
				invoker.itemamount[which]<1
				||A_JumpIfInventory(itp,0,"null")
			)return;

			if(
				invoker.itemamount[which]>20
				||invoker.itembulk[which]>40
			)A_SetTics(5);
			else if(invoker.itembulk[which]<20){ //reaching
				A_SetTics(10);
				A_PlaySound("weapons/pocket",CHAN_WEAPON);
			}

			//where the magic happens
			if(itp=="GreenArmourStored"){
				A_GiveInventory(itp,1);
				A_GiveInventory("StoredArmour",invoker.itemamount[which]);
				invoker.itemamount[which]=0;
			}else if(itp=="HDCellAmmo"){
				int totake=min(
					invoker.itemamount[which],
					HDMath.MaxInv(self,itp)-countinv(itp),
					20
				);
				invoker.itemamount[which]-=totake;
				A_GiveInventory(itp,totake);
			}else{
				A_GiveInventory(itp,1);
				invoker.itemamount[which]--;
			}

			invoker.getbulk();
		}goto ready;

	zoom:
		TNT1 A 0{
			invoker.weaponstatus[HDBPS_COOLDOWN]+=8;
			if(invoker.weaponstatus[HDBPS_COOLDOWN]<16)return;
			for(int i=0;i<HDBPC_NUMITEMS;i++){
				if(invoker.itemtype[i]&&invoker.itemamount[i]>0){
					if(invoker.itemtype[i]=="GreenArmourStored"){
						actor aaa=spawn("HDArmourPickup",pos+(0,0,height*0.6));
						aaa.stamina=invoker.itemamount[i];
					}
					else A_DropItem(invoker.itemtype[i],invoker.itemamount[i]);
					invoker.itemamount[i]=0;
				}
			}
			invoker.getbulk();
		}goto nope;
	}

	int getbulk(){
		int bulk=0;
		for (int i=0;i<HDBPC_NUMITEMS;i++){
			if(itemamount[i]>0){
				if(itemtype[i]=="HDCellAmmo"){ //you can't have a piece of a cell
					int count=itemamount[i];
					while(count>0){
						count-=20;
						bulk+=itembulk[i];
					}
				}else if(itemtype[i]=="GreenArmourStored"){ //always worth 1 suit
					bulk+=itembulk[i];
				}else bulk+=itembulk[i]*itemamount[i];
			}
		}
		weaponstatus[HDBPS_CARRIED]=bulk;
		return bulk;
	}

	string itemname[HDBPC_NUMITEMS];
	class<inventory> itemtype[HDBPC_NUMITEMS];
	int itemamount[HDBPC_NUMITEMS];
	int itembulk[HDBPC_NUMITEMS];

	override void initializewepstats(bool idfa=false){
		if(!idfa)return;
		for(int i=0;i<HDBPC_NUMITEMS;i++){

			if(i==mcellindex)itemamount[i]=10;
			else if(i==armourindex)itemamount[i]=HDCONST_GREENARMOUR;
			else itemamount[i]=max(
				1,
				itemamount[i],
				10/(max(1,itembulk[i]))
			);
			getbulk();
		}
	}
	int derpindex;int bderpindex;
	int mcellindex;int armourindex;
	override void beginplay(){
		int i=-1;
		i++;itembulk[i]=800;itemtype[i]="GreenArmourStored";itemname[i]="Soft armour";armourindex=i;
		i++;itembulk[i]=500;itemtype[i]="PortableLadder";itemname[i]="Ladder";
		i++;itembulk[i]=400;itemtype[i]="PortableRadSuit";itemname[i]="Environment suit";
		i++;itembulk[i]=130;itemtype[i]="PortableLiteAmp";itemname[i]="Light amplifiers";
		i++;itemname[i]="br";

		i++;itembulk[i]=130;itemtype[i]="PortableMedikit";itemname[i]="Medikit";
		i++;itembulk[i]=100;itemtype[i]="PortableBerserkPack";itemname[i]="Berserk pack";
		i++;itembulk[i]=70;itemtype[i]="PortableStimpack";itemname[i]="Stimpack";
		i++;itembulk[i]=90;itemtype[i]="BluePotion";itemname[i]="Healing potion";
		i++;itembulk[i]=100;itemtype[i]="SquadSummoner";itemname[i]="Summoning talisman";
		i++;itemname[i]="br";

		i++;itembulk[i]=140;itemtype[i]="HEATAmmo";itemname[i]="H.E.A.T. rocket";
		i++;itembulk[i]=90;itemtype[i]="HDRocketAmmo";itemname[i]="Rocket grenade";
		i++;itembulk[i]=90;itemtype[i]="DudRocketAmmo";itemname[i]="Defused rocket";
		i++;itemname[i]="br";

		i++;itembulk[i]=95;itemtype[i]="HDFragGrenadeAmmo";itemname[i]="Hand grenade";
		i++;itembulk[i]=80;itemtype[i]="HDCellPacks";itemname[i]="Fresh battery";
		i++;itembulk[i]=80;itemtype[i]="HDCellAmmo";itemname[i]="Stale battery";mcellindex=i;
		i++;itembulk[i]=80;itemtype[i]="HDCellPackEmpty";itemname[i]="Depleted battery";
		i++;itembulk[i]=85;itemtype[i]="BrontornisRound";itemname[i]="Brontornis shell";
		i++;itemname[i]="br";

		i++;itembulk[i]=40;itemtype[i]="ZM66RifleMags";itemname[i]="4.26mm mag";
		i++;itembulk[i]=1;itemtype[i]="FourMilAmmo";itemname[i]="Misc. 4.26mm ammo";
		i++;itemname[i]="cl";

		i++;itembulk[i]=90;itemtype[i]="LiberatorMag";itemname[i]="7.76mm mag";
		i++;itembulk[i]=36;itemtype[i]="BossClip";itemname[i]="7.76mm clip";
		i++;itembulk[i]=8;itemtype[i]="SevenMilAmmo";itemname[i]="Misc. 7.76mm ammo";
		i++;itembulk[i]=7;itemtype[i]="SevenMilBrass";itemname[i]="7.76mm casing";
		i++;itemname[i]="br";

		i++;itembulk[i]=35;itemtype[i]="HDPistolMag";itemname[i]="Pistol mag";
		i++;itembulk[i]=70;itemtype[i]="HDSMGMag";itemname[i]="SMG mag";
		i++;itembulk[i]=3;itemtype[i]="HDPistolAmmo";itemname[i]="Misc. 9mm ammo";
		i++;itemname[i]="br";

		i++;itembulk[i]=10;itemtype[i]="HDShellAmmo";itemname[i]="Shotgun shell";
		i++;itemname[i]="br";

		i++;itembulk[i]=180;itemtype[i]="DERPUsable";itemname[i]="D.E.R.P. robot";derpindex=i;
		i++;itembulk[i]=160;itemtype[i]="DERPDEAD";itemname[i]="Broken D.E.R.P. robot";bderpindex=i;
		i++;itembulk[i]=9;itemtype[i]="HDIEDKit";itemname[i]="I.E.D. kit";
		super.beginplay();
A_LogInt(HDBFP_IEDK);
A_LogInt(HDBFP_LITE);
	}
}
enum HDBackpackItems{
	HDBPS_CARRIED=1,
	HDBPS_WHICH=2,
	HDBPS_COOLDOWN=3,

	HDBPF_NOAUTO=1,

	HDBFP_PMAG=1,
	HDBFP_SMAG=1<<1,
	HDBFP_SHEL=1<<2,
	HDBFP_ZM66=1<<3,
	HDBFP_ROCK=1<<4,
	HDBFP_HEAT=1<<5,
	HDBFP_CELL=1<<6,
	HDBFP_LMAG=1<<7,
	HDBFP_CLIP=1<<8,
	HDBFP_BRON=1<<9,
	HDBFP_FRAG=1<<10,
	HDBFP_MEDI=1<<11,
	HDBFP_STIM=1<<12,
	HDBFP_BERS=1<<13,
	HDBFP_RADS=1<<14,
	HDBFP_LADD=1<<15,
	HDBFP_LITE=1<<16,
	HDBFP_ARMR=1<<17,
	HDBFP_DERP=1<<18,
	HDBFP_DDRP=1<<19,
	HDBFP_IEDK=1<<20,

	HDBPC_CAPACITY=3000,
	HDBPC_NUMITEMS=40, //should be the length of the array including brs
}



class HDBPPreset:InventoryFlag{
/*
	void LoadBPCustom(actor caller){
		caller.A_SetInventory("HDBP",1);
		let bp=HDBP(caller.findinventory("HDBP"));
		int bpflags=caller.getcvar(hd_loadbp);

		for(int i=0;i<HDBPC_NUMITEMS;i++){
			let bpit=bp.itemtype[i];
			if(
				(bpflags&HDBPF_&&bpit=="HDPistolMags")
				||(bpflags&HDBPF_&&bpit=="HDSMGMags")
				||(bpflags&HDBPF_&&bpit=="HDShellAmmo")
				||(bpflags&HDBPF_&&bpit=="ZM66RifleMags")
				||(bpflags&HDBPF_&&bpit=="HDRocketAmmo")
				||(bpflags&HDBPF_&&bpit=="HEATAmmo")
				||(bpflags&HDBPF_&&bpit=="HDCellPacks")
				||(bpflags&HDBPF_&&bpit=="LiberatorMag")
				||(bpflags&HDBPF_&&bpit=="BossClip")
				||(bpflags&HDBPF_&&bpit=="BrontornisRounds")
				||(bpflags&HDBPF_&&bpit=="HDFragGrenadeAmmo")
				||(bpflags&HDBPF_&&bpit=="PortableMedikit")
				||(bpflags&HDBPF_&&bpit=="PortableStimpack")
				||(bpflags&HDBPF_&&bpit=="PortableBerserkPack")
				||(bpflags&HDBPF_&&bpit=="PortableRadsuit")
				||(bpflags&HDBPF_&&bpit=="PortableLadder")
				||(bpflags&HDBPF_&&bpit=="PortableLiteAmp")
				||(bpflags&HDBPF_&&bpit=="GreenArmourStored")
				||(bpflags&HDBPF_&&bpit=="DERPUsable")
				||(bpflags&HDBPF_&&bpit=="DERPDEAD")
				||(bpflags&HDBPF_&&bpit=="IEDKit")
			)bp.itemamount[i]=max(1,hdmath.maxinv(bpit)/3)
			if(bp.getbulk()>=HDBPC_CAPACITY){
				bp.itemamount[i]=0;
				return;
			}
		}
	}
*/
	default{
		inventory.maxamount 999;
	}
	override void attachtoowner(actor user){
		super.attachtoowner(user);
		user.A_SetInventory("HDBP",1);
		let bp=HDBP(user.findinventory("HDBP"));
		if(amount==999){
		}else{
			for(int i=0;i<HDBPC_NUMITEMS;i++){
				class<inventory>bpi=bp.itemtype[i];
				if(amount==1){ //contractor
					if(bpi=="HDShellAmmo")bp.itemamount[i]=40;
					else if(bpi=="HDRocketAmmo")bp.itemamount[i]=5;
					else if(bpi=="PortableStimpack")bp.itemamount[i]=7;
					else if(bpi=="PortableMedikit")bp.itemamount[i]=3;
					else if(bpi=="HDFragGrenadeAmmo")bp.itemamount[i]=7;
				}else if(amount==2){ //medic
					if(bpi=="PortableMedikit")bp.itemamount[i]=5;
					else if(bpi=="PortableBerserkPack")bp.itemamount[i]=5;
					else if(bpi=="PortableStimpack")bp.itemamount[i]=5;
					else if(bpi=="HDCellPacks")bp.itemamount[i]=2;
					else if(bpi=="PortableRadsuit")bp.itemamount[i]=2;
					else if(bpi=="PortableLadder")bp.itemamount[i]=1;
				}else if(amount==3){ //roboticist
					if(bpi=="DERPDEAD")bp.itemamount[i]=1;
					else if(bpi=="HDCellPacks")bp.itemamount[i]=6;
					else if(bpi=="DudRocketAmmo")bp.itemamount[i]=5;
					else if(bpi=="HDPistolMag")bp.itemamount[i]=10;
					else if(bpi=="ZM66RifleMags")bp.itemamount[i]=5;
				}else if(!random(0,5)){ //insurgent
					int maxrand=500/(max(1,bp.itembulk[i]));
					bp.itemamount[i]=random(1,maxrand);
					if(bp.getbulk()>=HDBPC_CAPACITY){  
						bp.itemamount[i]=0;
						break;
					}
				}
			}
		}
		bp.getbulk();
		destroy();
	}
}




