// ------------------------------------------------------------
// Rocket Launcher
// ------------------------------------------------------------
class HDRL:HDWeapon{
	default{
		+weapon.explosive
		weapon.selectionorder 92;
		weapon.slotnumber 5;
		scale 0.6;
		inventory.pickupmessage "You got the rocket launcher!";
	}
	override void DoEffect(){
		if(owner.player){
			int abv=cvar.getcvar("ab",owner.player).getint();
			if(abv){
				weaponstatus[RLS_AIRBURST]=max(abv,0);
				cvar.getcvar("ab",owner.player).setint(0);
			}
		}
	}
	states{
	select0:
		MISG A 0;
		goto select0big;
	deselect0:
		MISG A 0;
		goto deselect0small;

	ready:
		MISG A 1{
			A_WeaponReady(WRF_ALL);
			if(player){
				int abv=cvar.getcvar("ab",player).getint();
				if(abv){
					invoker.weaponstatus[RLS_AIRBURST]=max(abv,0);
					cvar.getcvar("ab",player).setint(0);
				}
			}
		}goto readyend;

	user2:
	abadjust:
		---- A 2;
		---- A 0{
			if(countinv("PressingFire")||countinv("PressingAltfire")){
				if(countinv("PressingFire"))invoker.weaponstatus[RLS_AIRBURST]++;
				else if(countinv("PressingAltFire"))invoker.weaponstatus[RLS_AIRBURST]--;
				setweaponstate("abadjust");
			}else if(countinv("PressingZoom")){
				invoker.weaponstatus[RLS_AIRBURST]=0;
				setweaponstate("nope");
			}else if(countinv("PressingFireMode"))setweaponstate("abadjust");
		}goto nope;


	fire:
		MISG A 1;
		goto shoot;
	althold:
	hold:
		---- A 0
		goto nope;
	shoot:
		MISG A 4{
			int chm=invoker.weaponstatus[RLS_CHAMBER];
			if(chm<1)}{
				setweaponstate("nope");
				return;
			}
			gyrogrenade rkt;
			if(
				invoker.weaponstatus[0]&RLF_GRENADEMODE
				&&chm==1
			){
				//shoot a grenade
				A_FireHDGL(RLS_AIRBURST);
				invoker.weaponstatus[RLS_SMOKE]+=5;
				setweaponstate("nope"); //do NOT return, some common setup stuff below
			}else{
				//shoot a rocket
				if(chm>1)rkt=gyrogrenade(spawn("HDHEAT"),pos+(0,0,height-8));  
				else rkt=gyrogrenade(spawn("GyroGrenade"),pos+(0,0,height-8));
				rkt.stamina=5;
				invoker.weaponstatus[RLS_SMOKE]+=100;
				rkt.angle=angle;rkt.pitch=pitch;rkt.target=self;rkt.master=self;
				rkt.primed=false;
				if(chm==1)rkt.fuze=max(0,invoker.weaponstatus[RLS_AIRBURST]);
				else rkt.fuze=0;
				invoker.weaponstatus[RLS_AIRBURST]=0;
			}
			invoker.weaponstatus[RLS_CHAMBER]=0;
		}
		MISG A 3{
			A_ZoomFactor(0.98);
			if(countinv("IsSupported")){
				A_TakeInventory("IsSupported");
				A_MuzzleClimb(
					0,0,
					-frandom(2,2.5),-frandom(1,1.5),
					-frandom(2,3),-frandom(1.5,2),
					frandom(1,1.2),frandom(2,3),
				);
			}else{
				A_MuzzleClimb(
					0,0,
					-frandom(3,3.5),-frandom(2,2.5),
					-frandom(3,4),-frandom(2.5,3),
					-frandom(1,1.2),-frandom(2,3),
				);
				A_ChangeVelocity(cos(pitch)*-1,0,sin(pitch)*1,CVF_RELATIVE);
			}
		}
		MISG A 3 A_ZoomFactor(1.);
		MISG B 10{
			A_Gunflash();
		}
	flash:
		MISF A 1 bright{
			A_PlaySound("weapons/rockignite");
			HDFlashAlpha(128);
			A_Light1();
		}
		MISF B 2 bright A_Light2();
		MISF C 2 bright A_Light1();
		MISF D 1 bright A_Light0();
		TNT1 A 0 A_AlertMonsters();
		stop;

	altfire:
		MISG A 1 offset(0,34){
			if(invoker.weaponstatus[RLS_CHAMBER]>1){  
				invoker.weaponstatus[0]|=RLF_GRENADEMODE;
				setweaponstate("nope");
				return;
			}
			invoker.weaponstatus[0]^=RLF_GRENADEMODE;
		}
		MISG A 2 offset(0,36) A_PlaySound("weapons/shotgr",CHAN_WEAPON);
		MISG A 1 offset(0,34);
		goto nope;
	reload:
		MISG A 0 A_JumpIf(invoker.weaponstatus[RLS_CHAMBER]>1,"altreload")
		MISG A 0 A_JumpIf(
			(invoker.weaponstatus[RLS_CHAMBER]>0&&invoker.weaponstatus[RLS_MAG]>=5)  
			||!countinv("HDRocketAmmo"),
			"nope"
		);
		MISG B 1 offset(2,34);
		MISG B 1 offset(4,36) A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		MISG B 1 offset(10,38);
		MISG B 4 offset(12,40){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			A_PlaySound("weapons/rifleclick2",7);
		}
		MISG B 10 offset(11,38) A_PlaySound("weapons/grenopen",7);
	reload2:
		MISG B 0 A_JumpIf(
			(invoker.weaponstatus[RLS_CHAMBER]>0&&invoker.weaponstatus[RLS_MAG]>=5)  
			||!countinv("HDRocketAmmo"),
			"reload3"
		);
		MISG B 9 offset(10,38) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		MISG B 0{
			if(health<40)A_SetTics(7);
			else if(health<60)A_SetTics(3);
		}
		MISG B 2 offset(12,40)A_PlaySound("weapons/rockreload",CHAN_WEAPON);
		MISG B 3 offset(10,38){
			A_TakeInventory("HDRocketAmmo",1,TIF_NOTAKEINFINITE);
			if(invoker.weaponstatus[RLS_CHAMBER]<1)invoker.weaponstatus[RLS_CHAMBER]=1;
			else invoker.weaponstatus[RLS_MAG]++;
		}
		MISG BB 1 offset(10,34){
			if(
				countinv("PressingUnload")
				||countinv("PressingReload")
				||countinv("PressingFire")
				||countinv("PressingAltfire")
			)setweaponstate("reload3");
		}loop;
	reload3:
		MISG B 5 offset(10,36) A_PlaySound("weapons/grenopen",CHAN_WEAPON);
		MISG B 1 offset(8,38) A_PlaySound("weapons/rifleclick2",7);
		MISG B 1 offset(4,36);
		MISG B 1 offset(2,34);
		goto ready;

	user1:
	altreload:
		MISG A 4{
			if(
				invoker.weaponstatus[RLS_CHAMBER]<2
				&&!countinv("HEATAmmo")
			)setweaponstate("nope");
		}
		MISG A 1 offset(0,34);
		MISG A 1 offset(0,36);
		MISG B 1 offset(0,38);
		MISG B 4 offset(0,40) A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
		MISG B 10 offset(0,38) A_PlaySound("weapons/grenopen",CHAN_WEAPON);
		MISG B 9 offset(1,38) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		MISG B 0{
			if(health<40)A_SetTics(7);
			else if(health<60)A_SetTics(3);
		}
		MISG B 4 offset(0,40) A_PlaySound("weapons/rockreload",CHAN_WEAPON);

		MISG B 6{
			if(invoker.weaponstatus[RLS_CHAMBER]>1){  
				setweaponstate("removeheatfromchamber");
				return;
			}
			else if(invoker.weaponstatus[RLS_CHAMBER]<1){
				setweaponstate("loadheatintoemptychamber");
				return;
			}
			invoker.weaponstatus[RLS_CHAMBER]=0;
			if(A_JumpIfInventory("HDRocketAmmo",0,"null"))A_SpawnItemEx(
				"HDRocketAmmo",10,0,10,vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
			);
			else A_GiveInventory("HDRocketAmmo",1);
		}goto loadheatintoemptychamber;
	loadheatintoemptychamber:
		MISG B 3 offset(0,38);
		MISG B 2 offset(0,34){
			invoker.weaponstatus[RLS_CHAMBER]=2;
			A_TakeInventory("HEATAmmo",1,TIF_NOTAKEINFINITE);
		}goto altreloadend;
	removeheatfromchamber:
		MISG B 10 offset(1,35){
			invoker.weaponstatus[RLS_CHAMBER]=0;
			if(
				A_JumpIf("HEATAmmo",0,"null")
				||(!countinv("PressingUnload")&&!countinv("PressingAltReload"))
			){
				A_SpawnItemEx(
					"HEATAmmo",10,0,height-16,vel.x,vel.y,vel.z+2,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
				);
				setweaponstate("altreloadend");
			}else{
				A_PlaySound("weapons/pocket",7);
				A_GiveInventory("HEATAmmo",1);
			}
		}goto altreloadend;
	altreloadend:
		MISG B 5 offset(0,36) A_PlaySound("weapons/grenopen",CHAN_WEAPON);
		MISG B 0 A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
		MISG B 1 offset(0,38);
		MISG A 1 offset(0,36);
		MISG A 1 offset(0,34);
		goto nope;

	user4:
	unload:
		MISG A 0 A_JumpIfInventory("HEATLoaded",1,"AltReload")
		MISG A 0 A_JumpIfInventory("RocketMag",1,2)
		goto nope;
		MISG B 4{
			if(
				invoker.weaponstatus[RLS_CHAMBER]>1  
			)setweaponstate("altreload");
			else if(
				invoker.weaponstatus[RLS_CHAMBER]<1
				&&invoker.weaponstatus[RLS_MAG]<1
			)setweaponstate("nope");
		}
		MISG B 1 offset(2,34);
		MISG B 1 offset(4,36) A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		MISG B 1 offset(10,38);
		MISG B 4 offset(12,40){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
		}
		MISG B 2 offset(11,38) A_PlaySound("weapons/grenopen",CHAN_WEAPON);
	unload2:
		MISG B 10 offset(12,40) A_PlaySound("weapons/rockreload",7);
		MISG B 9 offset(10,38){
			if(!invoker.weaponstatus[RLF_CHAMBER]){
				invoker.weaponstatus[RLF_MAG]--;
			}else{
				invoker.weaponstatus[RLF_CHAMBER]=0;
			}
			if(
				A_JumpIf("HDRocketAmmo",0,"null")
				||(!countinv("PressingUnload")&&!countinv("PressingReload"))
			){
				A_SpawnItemEx(
					"HDRocketAmmo",10,0,height-16,vel.x,vel.y,vel.z+2,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
				);
			}else{
				A_PlaySound("weapons/pocket");
				A_GiveInventory("HDRocketAmmo",1);
			}
		}
		MISG B 5 offset(10,36) A_PlaySound("weapons/grenopen",CHAN_WEAPON);
		MISG B 4{
			if(health<40)A_SetTics(4);
			A_PlaySound("weapons/rifleclick2",CHAN_AUTO);
		}
		MISG B 0{
			if(
				(invoker.weaponstatus[RLS_CHAMBER]<1&&invoker.weaponstatus[RLS_MAG]<1)
				||countinv("PressingUnload")
				||countinv("PressingReload")
				||countinv("PressingFire")
				||countinv("PressingAltfire")
			)setweaponstate("unloadend");
		}goto unload2;
	unloadend:
		MISG B 1 offset(8,38);
		MISG B 1 offset(4,36);
		MISG B 1 offset(2,34);
		goto nope;

	spawn:
		LAUN A -1;
	}
}
enum rocketstatus{
	RLF_GRENADEMODE=2,
	RLF_HIGHZOOM=4,

	RLS_STATUS=0,
	RLS_MAG=1,
	RLS_CHAMBER=2,
	RLS_AIRBURST=3,
	RLS_SMOKE=4,
};



class HDRocketAmmo:Ammo replaces RocketAmmo{
	default{
		+inventory.ignoreskill
		inventory.maxamount 16;
		ammo.backpackmaxamount 50;
		ammo.backpackamount 0;
		inventory.pickupmessage "Picked up a rocket grenade.";
		scale 0.5;
	}
	states{
	spawn:
		ROQP A 0 nodelay A_SpawnItemEx("RocP",0,0,0,
			vel.x,vel.y,vel.z,
			0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
		);stop;
	}
}
actor HEATAmmo:Ammo{
	default{
		+inventory.ignoreskill
		inventory.maxamount 6;
		ammo.backpackmaxamount 50;
		ammo.backpackamount 0;
		inventory.pickupmessage "Picked up a H.E.A.T. round.";
		scale 0.4;
	}
	states{
	spawn:
		ROCK A 0 nodelay A_SpawnItemEx("HEATP",0,0,0,
			vel.x,vel.y,vel.z,
			0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
		);stop;
	}
}





class DefusedRockets:Ammo{
	default{
		+inventory.ignoreskill
		inventory.pickupmessage "picked up a defused rocket grenade.";
		inventory.maxamount 6;
		ammo.backpackmaxamount 6;
		radius 2 height 2;
		scale 0.5;
	}
	states{
	spawn:
		ROCQ A 0 nodelay A_SpawnItemEx("DRAP",0,0,0,vel.x,vel.y,vel.z,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM)
		stop
	}
}
class DRAP:HDUPK{
	default{scale 0.5;}
	states{
	spawn:
		ROCQ A -1 A_Stop();
	give:
		---- A 0 A_JumpIfInTargetInventory("DefusedRockets",0,"spawn");
		---- A 0 A_GiveToTarget("DefusedRockets",1);
		---- A 0 A_PlaySound("weapons/grenopen");
		stop;
	}
}
actor DudRocket:HDUPK{
	default{
		projectile; -nogravity -noteleport +bounceonactors
		-noblockmap -grenadetrail -floorclip +forcexybillboard
		+nodamagethrust +noblood
		bouncetype "doom"; decal "none";
		mass 30; pushfactor 3.4; bouncefactor 0.3; gravity 1;
		deathsound "misc/fragknock";
		bouncesound "misc/fragknock";
		wallbouncesound "misc/fragknock";
		obituary "%o was fragged by %k.";
		damagefactor(0);
		radius 3; height 3; scale 0.5;
	}
	states{
	spawn:
		ROCQ A 0 A_Jump(256,"dead")
		ROCQ AB 2 A_SetAngle(angle+45)
		loop
	death:
		TNT1 A 0 A_ChangeFlag("missile",0)
		TNT1 A 0 A_ChangeFlag("pushable",1)
		TNT1 A 0 A_ChangeFlag("shootable",1)
		TNT1 A 0 A_ChangeFlag("solid",1)
	dead:
		ROCQ A 500 A_Jump(32,"clean")
		ROCQ A 500 A_Jump(8,"Explode")
		loop
	clean:
		ROCQ A -1
		stop
	Explode:
		---- A 0 A_NoGravity();
		---- A 0 A_SpawnItemEx("RocquetteScorcher",-3,0,1,3,0,0,0,SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION)
		TNT1 A 0 A_Explode(random(120,260),random(120,260))
		TNT1 A 0 A_SpawnItemEx("RocquetteExploder",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION)
		stop
	give:
		---- A 0 A_JumpIfInTargetInventory("DefusedRockets",0,3)
		---- A 0 A_GiveToTarget("DefusedRockets",1)
		---- A 0 A_PlaySound("weapons/grenopen")
		stop
		ROCQ A 0 A_Jump(1,"Explode")
		ROCQ A 0 A_SpawnItemEx("DRAP",2,0,0,0,0,2,0,SXF_NOCHECKPOSITION)
		stop
	}
}





//
//	For direct hits
//
MOVE THIS TO CYBERDEMON
actor CyberShot{
	damagetype "SmallArms3" projectile height 2 radius 2 +hittracer +forcepain +nodamagethrust mass 1
	states
	{
	spawn:
		TNT1 A 0 nodelay A_Warp(AAPTR_TRACER)
		TNT1 A 2
		stop
	xdeath:
		TNT1 A 1 A_GiveInventory("BlastGib",1,AAPTR_TRACER)
		TNT1 A 0 A_SetMass(mass-1)
		TNT1 A 0 A_JumpIf(mass<1,1)
		loop
		TNT1 A 0
		stop
	}
}



// ------------------------------------------------------------
// Bloop Launcher
// ------------------------------------------------------------
class Blooper:HDWeapon{
	default{
		+WEAPON.EXPLOSIVE
		weapon.selectionorder 93;
		weapon.slotnumber 5;
		scale 0.6;
		inventory.pickupmessage "You got the grenade launcher!";
	}
	states{
	select0:
		BLOG A 0;
		goto select0small;
	deselect0:
		BLOG A 0;
		goto deselect0small;

	ready:
		BLOG A 1{
			A_WeaponReady(WRF_ALL);
			if(player){
				int abv=cvar.getcvar("ab",player).getint();
				if(abv){
					invoker.weaponstatus[BLOPS_AIRBURST]=max(abv,0);
					cvar.getcvar("ab",player).setint(0);
				}
			}
		}goto readyend;
	hold:
	altfire:
		BLOG A 0{invoker.weaponstatus[BLOPS_AIRBURST]=0;}
		goto nope;
	abadjust:
		---- A 2 A_WeaponReady(WRF_NOFIRE)
		---- A 0{
			A_GiveInventory("WeaponBusy",1);
			if(countinv("PressingFire")||countinv("PressingAltfire")){
				if(countinv("PressingFire"))invoker.weaponstatus[BLOPS_AIRBURST]++;
				else invoker.weaponstatus[BLOPS_AIRBURST]--;
				setweaponstate("abadjust");
			}else if(countinv("PressingZoom")){
				invoker.weaponstatus[BLOPS_AIRBURST]=0;
				setweaponstate("nope");
			}else if(countinv("PressingFireMode"))setweaponstate("abadjust");
		}goto nope;

	fire:
		BLOG B 0 A_JumpIf(invoker.weaponstatus[0]&BLOPF_LOADED,"reallyshoot")
		goto hold;
	reallyshoot:
		BLOG A 0 A_TakeInventory("BloopChamber",1)
		TNT1 A 0 A_SpawnItemEx("GyroGrenade",0,0,height-6,vel.x,vel.y,vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		BLOG A 0 
		BLOG A 1{
			A_ZoomFactor(0.965,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_FireHDGL(BLOPS_AIRBURST);
			invoker.weaponstatus[0]&=~BLOPF_LOADED;
		}
		BLOG A 1 offset(0,37);
		BLOG B 0{
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_MuzzleClimb(-frandom(2.,2.7),-frandom(3.4,5.2));
		}goto nope;
	loadcommon:
		BLOG B 1 offset(2,34)
		BLOG B 1 offset(4,36) A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		BLOG B 1 offset(10,38)
		BLOG B 8 offset(12,40){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			A_PlaySound("weapons/rifleclick2",7);
		}
		BLOG B 14 offset(11,38) A_PlaySound("weapons/grenopen",CHAN_WEAPON);
		BLOG B 12 offset(10,38) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		BLOG B 0{
			if(health<40)A_SetTics(7);
			else if(health<60)A_SetTics(3);
		}
		BLOG B 4 offset(12,40) A_PlaySound("weapons/rockreload",CHAN_WEAPON);
		BLOG B 2 offset(10,38){
			if(invoker.weaponstatus[0]&BLOPF_JUSTUNLOAD){
				if(
					!(invoker.weaponstatus[0]&BLOPF_LOADED)
				)setweaponstate("reload3");else{
					invoker.weaponstatus[0]&=~BLOPF_LOADED;
					if(
						(!countinv("PressingUnload")&&!countinv("PressingReload"))
						||A_JumpIfInventory("HDRocketAmmo",0,"null")
					)
					A_SpawnItemEx(
						"HDRocketAmmo",10,0,height-16,vel.x,vel.y,vel.z+2,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
					);
					else{
						A_GiveInventory("HDRocketAmmo",1);
						A_PlaySound("weapons/pocket",CHAN_WEAPON);
						A_SetTics(4);
					}
				}
			}else{
				if(
					invoker.weaponstatus[0]&BLOPF_LOADED
					||!countinv("HDRocketAmmo")
				)setweaponstate("reload3");else{
					A_TakeInventory("HDRocketAmmo",1,TIF_NOTAKEINFINITE);
					invoker.weaponstatus[0]|=BLOPF_LOADED;
				}
			}
		}
	reload3:
		BLOG B 5 offset(10,36) A_PlaySound("weapons/grenopen");
		BLOG B 0 A_PlaySound("weapons/rifleclick2");
		BLOG B 1 offset(8,38);
		BLOG B 1 offset(4,36);
		BLOG B 1 offset(2,34);
		goto ready;
	reload:
		BLOG B 0 A_JumpIf(
			invoker.weaponstatus[0]&BLOPF_LOADED
			||!countinv("HDRocketAmmo"),
			"nope"
		);
		BLOG B 0{
			if(
				invoker.weaponstatus[0]&BLOPF_LOADED
				||!countinv("HDRocketAmmo")
			)setweaponstate("nope");else{
				invoker.weaponstatus[0]&=~BLOPF_JUSTUNLOAD;
			}
		}goto loadcommon;
	unload:
		BLOG B 0{
			if(
				!(invoker.weaponstatus[0]&BLOPF_LOADED)
			)setweaponstate("nope");else{
				invoker.weaponstatus[0]&=~BLOPF_JUSTUNLOAD;
			}
		}goto loadcommon;

	spawn:
		BLOP A -1;
	}
}
enum bloopstatus{
	BLOPF_LOADED=1,
	BLOPF_JUSTUNLOAD=2,

	BLOPS_STATUS=0,
	BLOPS_AIRBURST=1,
};





// ------------------------------------------------------------
// Pickups
// ------------------------------------------------------------
class RocP:HDUPK replaces HDRocketAmmo{
	default{scale 0.5;}
	states{
	spawn:
		ROQP A -1 A_Stop();
	give:
		---- A 0 A_JumpIfInTargetInventory("HDRocketAmmo",0,"spawn");
		---- A 0 A_PlaySound("weapons/grenopen");
		---- A 0 A_GiveToTarget("HDRocketAmmo",1);
		stop;
	}
}
class RocketBigPickup:HDUPK{
	default{scale 0.5;}
	states
	{
	spawn:
		BROK A 0 A_Stop();
		BROK A -1{
			if(!countinv("Clip")){
				A_GiveInventory("Clip");
				A_SpawnItemEx("HEATAmmo",10,0,0,0,0,0,0,0,220);
				A_SpawnItemEx("HEATAmmo",13,0,0,0,0,0,0,0,220);
				A_SpawnItemEx("HEATAmmo",16,0,0,0,0,0,0,0,220);
			}
		}
	give:
		---- A 0 A_JumpIfInTargetInventory("HDRocketAmmo",0,"spawn");
		---- A 0 A_GiveToTarget("HDRocketAmmo",1);
		---- A 0 A_GiveInventory("HDRocketAmmo",1);
		---- A 0 A_JumpIfInventory("HDRocketAmmo",5,1);
		loop;
		---- A 0 A_PlaySound("weapons/pocket");
		TNT1 A 0;
		stop;
	}
}
class HEATP:HDUPK replaces HEATAmmo{
	default{scale 0.4;}
	states{
	spawn:
		ROCK A -1 A_Stop();
	give:
		---- A 0 A_JumpIfInTargetInventory("HEATAmmo",0,"spawn");
		---- A 0 A_PlaySound("weapons/grenopen");
		---- A 0 A_GiveToTarget("HEATAmmo",1);
		stop;
	}
}
