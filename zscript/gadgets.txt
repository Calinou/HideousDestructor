//-------------------------------------------------
// Radiation Suit
//-------------------------------------------------
class PortableRadsuit:HDPickup replaces RadSuit{
	default{
		inventory.maxamount 2;
		inventory.interhubamount 2;
		inventory.pickupmessage "Radiation shielding suit.";
		inventory.pickupsound "weapons/pocket";
		inventory.icon "SUITB0";
		accuracy 1;
	}
	bool worn;
	override void DoEffect(){
		super.DoEffect();
		if(owner){
			if(worn)owner.A_GiveInventory("PowerIronFeet");
			else owner.A_TakeInventory("PowerIronFeet");
		}
	}
	override void DetachFromOwner(){
		owner.A_TakeInventory("PowerIronFeet");
		worn=false;
		super.DetachFromOwner();
	}
	states{
	spawn2:
		SUIT A -1;
	use:
		TNT1 A 0{
			A_SetBlend("00 00 00",1,6,"00 00 00");
			A_PlaySound("weapons/pocket");
			A_ChangeVelocity(0,0,2);
			let onr=HDPlayerPawn(self);
			if(onr)onr.stunned+=60;
			if(countinv("PowerIronFeet")<1){
				invoker.worn=true;
			}else{
				invoker.worn=false;
				A_SpawnItemEx("PortableRadsuit",0,0,height/2,2,0,4);
				A_TakeInventory("PortableRadsuit",1);
			}
		}fail;
	}
}




//-------------------------------------------------
// Light Amplification Visor
//-------------------------------------------------
class PortableLiteAmp:HDPickup replaces Infrared{
	default{
		inventory.maxamount 1;
		inventory.interhubamount 1;
		inventory.pickupmessage "Light amplification visor.";
		inventory.icon "PPVIA0";
		scale 0.5;
		accuracy 1;
	}
	int spent;bool worn;
	const LITEBAT=84000;
	override void DetachFromOwner(){
		owner.A_TakeInventory("PowerLightAmp");
		worn=false;
		super.DetachFromOwner();
	}
	override void DoEffect(){
		super.DoEffect();
		if(owner){
			if(worn){
				owner.A_GiveInventory("PowerLightAmp");
				spent++;
				if(spent>LITEBAT)worn=false;
			}else owner.A_TakeInventory("PowerLightAmp");
		}
	}
	states{
	spawn2:
		PVIS B -1;
	use:
		TNT1 A 0{
			A_SetBlend("01 00 00",0.8,16);
			if(invoker.spent>=LITEBAT){
				if(countinv("HDCellPacks")){
					A_TakeInventory("HDCellPacks",1,TIF_NOTAKEINFINITE);
					invoker.spent=0;
				}else if(countinv("HDCellAmmo")){
					int rnd=min(random(1,19),countinv("HDCellAmmo"));
					A_TakeInventory("HDCellAmmo",rnd,TIF_NOTAKEINFINITE);
					invoker.spent-=rnd*LITEBAT/20;
				}else A_Log("No power for lite-amp.",true);
			}
			if(invoker.spent<LITEBAT){
				if(invoker.worn)invoker.worn=false;else invoker.worn=true;
			}
		}fail;
	}
}


