//-------------------------------------------------
// Environment/Radiation Suit
//-------------------------------------------------
class WornRadsuit:InventoryFlag{
	override void attachtoowner(actor owner){	
		if(!owner.countinv("PortableRadsuit"))owner.A_GiveInventory("PortableRadsuit");
		super.attachtoowner(owner);
	}
	override void DetachFromOwner(){
		owner.A_TakeInventory("PortableRadsuit",1);
		owner.A_PlaySound("weapons/pocket",CHAN_AUTO);
		let onr=HDPlayerPawn(self);
		if(onr)onr.stunned+=60;
		super.DetachFromOwner();
	}
	override void DoEffect(){
		if(stamina>0)stamina--;
	}
}
class PortableRadsuit:HDPickup replaces RadSuit{
	default{
		inventory.maxamount 2;
		inventory.interhubamount 2;
		inventory.pickupmessage "Environmental shielding suit.";
		inventory.pickupsound "weapons/pocket";
		inventory.icon "SUITB0";
		accuracy 1;
	}
	override void DetachFromOwner(){
		owner.A_TakeInventory("WornRadsuit");
		target=owner;
		super.DetachFromOwner();
	}
	override void actualpickup(actor user){
		HDF.TransferFire(self,user);
		super.actualpickup(user);
	}
	states{
	spawn2:
		SUIT A 1;
		SUIT A -1{
			if(!target)return;
			HDF.TransferFire(target,self);
		}
	use:
		TNT1 A 0{
			A_SetBlend("00 00 00",1,6,"00 00 00");
			A_PlaySound("weapons/pocket");
			A_ChangeVelocity(0,0,2);
			let onr=HDPlayerPawn(self);
			if(onr)onr.stunned+=60;
			if(!countinv("WornRadsuit")){
				int fff=HDF.TransferFire(self,self);
				if(fff){
					if(random(1,fff)>30){
						A_PlaySound("misc/fwoosh",CHAN_AUTO);
						A_TakeInventory("PortableRadsuit",1);
						return;
					}else{
						HDF.TransferFire(self,null);
						if(onr){
							onr.fatigue+=fff;
							onr.stunned+=fff;
						}
					}
				}
				A_GiveInventory("WornRadsuit");
			}else{
				actor a;int b;
				inventory wrs=findinventory("wornradsuit");
				[b,a]=A_SpawnItemEx("PortableRadsuit",0,0,height/2,2,0,4);
				if(a && wrs.stamina){
					let aa=HDActor(a);
					if(aa)aa.A_Immolate(a,self,wrs.stamina);
				}
				A_TakeInventory("WornRadsuit");
			}
		}fail;
	}
}




//-------------------------------------------------
// Light Amplification Visor
//-------------------------------------------------
class PortableLiteAmp:HDPickup replaces Infrared{
	default{
		inventory.maxamount 1;
		inventory.interhubamount 1;
		inventory.pickupmessage "Light amplification visor.";
		inventory.icon "PPVIA0";
		scale 0.5;
		accuracy 1;
	}
	int spent;bool worn;
	const LITEBAT=84000;
	override void DetachFromOwner(){
		if(owner && owner.player && owner.player.fixedcolormap==5)owner.player.fixedcolormap=-1;
		worn=false;
		owner.player.fixedlightlevel=-1;
		super.DetachFromOwner();
	}
	override void DoEffect(){
		super.DoEffect();
		if(owner && owner.player){
			if(
				worn
				&&!owner.countinv("PowerInvisibility")
				&&(owner.player.fixedcolormap<0||owner.player.fixedcolormap==5)
			){
				owner.player.fov=min(owner.player.fov,90);
				owner.player.fixedcolormap=5;
				owner.player.fixedlightlevel=1;
				if(!random[rand1](0,LITEBAT-spent)){
					owner.player.fixedcolormap=-1;
					owner.player.fixedlightlevel=-1;
				}
				spent++;
				if(spent>LITEBAT)worn=false;
			}else{
				if(owner.player.fixedcolormap==5)owner.player.fixedcolormap=-1;
				owner.player.fixedlightlevel=-1;
			}
		}
	}
	states{
	spawn2:
		PVIS B -1;
	use:
		TNT1 A 0{
			A_SetBlend("01 00 00",0.8,16);
			if(invoker.spent>=LITEBAT){
				if(countinv("HDCellPacks")){
					A_TakeInventory("HDCellPacks",1,TIF_NOTAKEINFINITE);
					invoker.spent=0;
				}else if(countinv("HDCellAmmo")){
					int rnd=min(random(1,19),countinv("HDCellAmmo"));
					A_TakeInventory("HDCellAmmo",rnd,TIF_NOTAKEINFINITE);
					invoker.spent-=rnd*LITEBAT/20;
				}else A_Log("No power for lite-amp.",true);
			}
			if(invoker.spent<LITEBAT){
				if(invoker.worn)invoker.worn=false;else invoker.worn=true;
			}
		}fail;
	}
}




//-------------------------------------------------
// Blur Sphere
//-------------------------------------------------
class HDBlurSphere:HDPickup{
	//true +invisible can never be used.
	//it will cause the monsters to be caught in a consant 1-tic see loop.
	//no one seems to consider this to be a bug.
	//shadow will at least cause attacks to happen less often.
	default{
		inventory.maxamount 9;
		inventory.interhubamount 1;
		inventory.pickupmessage "So precious in your sight.";
		inventory.pickupsound "misc/casing";
		inventory.icon "PINSA0";
		scale 0.3;
		accuracy 1;
	}
	int intensity;int xp;int level;bool worn;
	override void tick(){
		super.tick();
		double frnd=frandom(0.93,1.04);
		scale=(0.3,0.3)*frnd;
		alpha=0.9*frnd;
	}
	states{
	spawn:
	spawn2:
		PINS ABCDCB random(1,6);
		loop;
	use:
		TNT1 A 0{
			A_SetBlend("01 00 00",0.9,48);
			if(!invoker.worn){
				invoker.worn=true;
				A_PlaySound("imp/sight2",CHAN_BODY,frandom(0.3,0.5),false,8);
				invoker.level+=invoker.xp/BLUR_LEVELUP;
				invoker.xp%=BLUR_LEVELUP;
				invoker.stamina=clamp(invoker.level+random(-2,2),0,10);
			}else{
				invoker.worn=false;
				A_PlaySound("imp/sight1",CHAN_BODY,frandom(0.3,0.5),false,8);
			}
		}fail;
	}
	enum blurstats{
		BLUR_LEVELUP=3500,
	}
	override void DoEffect(){
		if(
			!owner||
			owner.health<1
		){
			goawayanddie();return;
		}

		if(!worn){
			intensity=max(0,intensity-1);
			xp+=randompick(0,0,1);
		}else{
			if(intensity<99)intensity=max(intensity+1,-35);
			xp++;
		}
		bool invi=true;

		if(intensity<random(8,25)){
			owner.a_setrenderstyle(1.,STYLE_Normal);
			invi=false;
		}else{
			owner.a_setrenderstyle(0.9,STYLE_Fuzzy);
		}

		owner.bshadow=invi;

		//they eat their own
		if(amount>1){
			amount=1;
			xp+=100;
		}

		//precious.
		if(random(1,BLUR_LEVELUP)<level){
			if(!(xp%3)){
				sound snd[7];
				snd[0]="imp/sight";
				snd[1]="grunt/sight";
				snd[2]="grunt/active";
				snd[3]="demon/active";
				snd[4]="world/riflefar";
				snd[5]="world/rocketfar";
				snd[6]="misc/gibbed";
				owner.A_PlaySound(snd[random(1,snd.size())-1],
					CHAN_VOICE,frandom(0.3,0.5),false,8
				);
			}
			if(!(xp%5)){
				string msg[15];
				msg[0]=string.format("Out of sync with: %i",random(1,4));
				msg[1]="Error: no such actor \"HDPlayer\" exists. Execution may abort!";
				msg[2]="\cd[DERP] \cjEngaging hostile.";
				msg[3]="Memory allocation error: recovered segfault at address 00x6f24ff.";
				msg[4]="rendering error";
				msg[5]="Noise.";
				msg[6]="hello";
				msg[7]="I hate you.";
				msg[8]="This is worthless.";
				msg[9]="it hurts";
				msg[10]="error";
				msg[11]="Precious.";
				msg[12]="Precious.";
				msg[13]="Precious.";
				msg[14]="Precious.";
				owner.A_Log(msg[random(1,msg.size())-1],true);
			}
			if(!(xp%7)){
				hdplayerpawn(owner).aggravateddamage++;
				if(!random(0,3))owner.A_Log("Precious.",true);
			}
		}
	}
	override void DetachFromOwner(){
		owner.bshadow=false;
		owner.a_setrenderstyle(1.,STYLE_Normal);
		if(worn){
			worn=false;
			owner.damagemobj(self,owner,random(1,level),"balefire");
		}
		intensity=0;
		owner.A_PlaySound("imp/sight1",CHAN_BODY,frandom(0.3,0.5),false,8);
		super.detachfromowner();
	}
}