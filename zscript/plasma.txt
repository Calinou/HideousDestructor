// ------------------------------------------------------------
// Thunder Buster
// ------------------------------------------------------------
class ThunderBuster:HDWeapon{
	default{
		weapon.selectionorder 600;
		weapon.slotnumber 6;
		weapon.ammotype1 "PlasmaBattery";
		weapon.ammotype2 "HDCellPacks";
		weapon.ammouse 1;
		scale 0.6;
		inventory.pickupmessage "You got the particle beam gun!";
	}
	states{
	ready:
		PLSG A 1{
			A_SetCrosshair(21);
			A_GiveInventory("IsWeaponReady");
			if(!countinv("PlasmaBattery"))A_TakeInventory("PlasmaZoom");
			else if(countinv("PlasmaZoom")&&!random(0,126000))
				A_TakeInventory("PlasmaBattery",1);
			A_WeaponReady(WRF_ALLOWZOOM|WRF_ALLOWRELOAD|
				WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4
			);
		}goto readyend;
	fire:
		PLSG A 3 offset(0,35);
	hold:
		PLSG A 0 A_JumpIfInventory("PlasmaBattery",1,"shoot");
		goto nope;
	shoot:
		PLSG A 0{
			A_ZoomFactor(0.99,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_PlaySound("weapons/plasidle");
			if(countinv("IsMoving")>9)A_MuzzleClimb(frandom(-0.8,0.8),frandom(-0.8,0.8));  
		}
		PLSG A 0 A_JumpIfInventory("PlasmaAlt",1,"ShootClaw");
		goto shootstraight;
	shootclaw:
		PLSG A 0{
			A_GunFlash();
			spawn("DistantPlasma",pos,ALLOW_REPLACE);
			A_ZoomFactor(1.01,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			if(countinv("PlasmaBattery")>random(-2,10)){  
				A_FireBullets(1,1,
					countinv("PlasmaBattery")*0.055,
					(random(1,2)),
					"BeamSpotFlash",FBF_NORANDOM,1024
				);
				A_TakeInventory("PlasmaBattery",randompick(1,1,1,2));
			}
		}
		PLSG A 1 offset(1,32)A_MuzzleClimb(frandom(-0.6,0.6),frandom(-0.6,0.6));
		PLSG A 1 offset(-1,34)A_MuzzleClimb(frandom(-0.6,0.6),frandom(-0.6,0.6));
		PLSG A 0 A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		goto shootend;
	shootstraight:
		PLSG A 0{
			if (countinv("PlasmaBattery")>random(-2,3)){
				A_FireBullets(0,0,
					clamp(countinv("PlasmaBattery")*0.08,1,3),
					(random(0,1)),
					"BeamSpot",FBF_NORANDOM,16384
				);
				if(random(0,2))A_TakeInventory("PlasmaBattery",1);
			}
		}goto shootend;
	shootend:
		PLSG A 1 offset(1,33);
		PLSG A 1 offset(0,34);
		PLSG A 1 offset(-1,33);
		PLSG A 9{
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			if(!countinv("PlasmaBattery")){
				A_PlaySound("weapons/plasmas",CHAN_WEAPON);
				A_GiveInventory("PlasmaEmptyCell");
				A_GunFlash();
			}else{
				A_Refire();
			}
		}goto nope;
	flash:
		PLSF A 1 bright{
			HDFlashAlpha(64);
			A_Light2();
			A_SetTics(random(0,1));
		}
		PLSF BA 1 bright;
		PLSF B 1 bright A_Light1();
		PLSF AB 1 bright;
		PLSF B 0 bright A_Light0();
		stop;
	altfire:
		PLSG C 1 offset(1,32){
			A_TakeInventory("IsWeaponReady");
		}
		PLSG C 2 offset(2,32);
		PLSG C 1 offset(1,33);
		PLSG C 2 offset(0,34);
		PLSG C 3 offset(-1,35);
		PLSG C 4 offset(-1,36);
		PLSG C 3 offset(-1,35);
		PLSG C 2 offset(0,34){
			if(countinv("PlasmaAlt"))A_TakeInventory("PlasmaAlt");
			else A_GiveInventory("PlasmaAlt");
		}goto zoom2;
	zoom:
		PLSG A 1 offset(1,33)A_TakeInventory("IsWeaponReady");
		PLSG A 1 offset(0,34);
		PLSG A 2 offset(-1,36){
			if(countinv("PlasmaZoom"))A_TakeInventory("PlasmaZoom");
			else A_GiveInventory("PlasmaZoom");
		}goto zoom2;
	zoom2:
		PLSG A 1;
		PLSG A 1 offset(0,34);
		PLSG A 1 offset(1,33);
		goto nope;
	althold:
		---- A 0;
		goto nope;

	select0:
		PLSG A 0;
		goto select0big;
	deselect0:
		PLSG A 0 A_Light0();
		goto deselect0big;

	unload:
		PLSG A 0{
			A_GiveInventory("JustUnloading");
			if(countinv("PlasmaEmptyCell")+countinv("PlasmaBattery")>0)  
				return resolvestate("unmag");
			return resolvestate("nope");
		}
	unmag:
		PLSG A 2 offset(0,33){
			A_SetCrosshair(21);
			A_TakeInventory("IsWeaponReady");
			A_MuzzleClimb(frandom(-1.2,-2.4),frandom(1.2,2.4));
		}
		PLSG A 3 offset(0,35);
		PLSG A 2 offset(0,40) A_PlaySound("weapons/huntopen");
		PLSG A 0{
			A_MuzzleClimb(frandom(-1.2,-2.4),frandom(1.2,2.4));
			if(
				(!countinv("PressingUnload")&&!countinv("PressingReload"))
				||(countinv("HDCellAmmo")>AmmoCap("HDCellAmmo")-countinv("PlasmaBattery")/3)      
				||(
					(countinv("PlasmaBattery")>=60)      
					&&(A_JumpIfInventory("HDCellPacks",0,"null"))
				)
				||(!countinv("PlasmaBattery")&&!countinv("PlasmaEmptyCell"))
				||(
					(!countinv("PlasmaBattery"))
					&&(A_JumpIfInventory("HDCellPackEmpty",0,"null"))
				)
			)return resolvestate("dropmag");
			return resolvestate("pocketmag");
		}

	dropmag:
		---- A 0{
			if(countinv("PlasmaBattery")+countinv("PlasmaEmptyCell"))
			A_SpawnItemEx("HDCelXP",
				cos(pitch)*10,0,height-10-10*sin(pitch),
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			A_TakeInventory("PlasmaEmptyCell");
		}goto magout;

	pocketmag:
		---- A 0{
			if(
				(!countinv("PlasmaBattery"))
				&&(countinv("PlasmaEmptyCell"))
			)A_GiveInventory("HDCellpackEmpty");
			else if(countinv("PlasmaBattery")>57)A_GiveInventory("HDCellPacks");
			else A_GiveInventory("HDCellAmmo",countinv("PlasmaBattery")/3);

			A_TakeInventory("PlasmaBattery");
			A_TakeInventory("PlasmaEmptyCell");
		}
		PLSG A 8 offset(0,43) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		PLSG A 8 offset(0,42) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		goto magout;

	magout:
		---- A 0 A_JumpIfInventory("JustUnloading",1,"Reload3");
		goto loadmag;

	reload:
		PLSG A 0 A_JumpIfInventory("PlasmaBattery",0,"nope");
		PLSG A 0 A_JumpIf(countinv("HDCellPacks")||countinv("HDCellAmmo"),"unmag");
		goto nope;

	loadmag:
		PLSG A 12 offset(0,42);
		PLSG A 2 offset(0,43){if(health>39)A_SetTics(0);}
		PLSG AA 2 offset(0,42);
		PLSG A 2 offset(0,44) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		PLSG A 4 offset(0,43) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		PLSG A 6 offset(0,42);
		PLSG A 8 offset(0,38)A_PlaySound("weapons/rifleload",CHAN_WEAPON);
		PLSG A 4 offset(0,37){if(health>39)A_SetTics(0);}
		PLSG A 4 offset(0,36)A_PlaySound("weapons/grenopen",CHAN_WEAPON);

		PLSG A 0{
			if(countinv("HDCellPacks")){
				//reload a full one
				A_GiveInventory("PlasmaBattery",60);
				A_TakeInventory("HDCellPacks",1,TIF_NOTAKEINFINITE);
			}else{
				//reload a partial one
				int rld=min(random(1,19),countinv("HDCellAmmo"));
				A_SetInventory("PlasmaBattery",rld);
				A_TakeInventory("HDCellAmmo",rld);
			}
		}goto reload3;

	reload3:
		PLSG A 6 offset(0,40) A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
		PLSG A 2 offset(0,36);
		PLSG A 4 offset(0,33);
		goto nope;

	spawn:
		TNT1 A 1;
		TNT1 A 0 A_CheckProximity("spawndropped","PlayerPawn",20,1, CPXF_COUNTDEAD|CPXF_SETTARGET|CPXF_ANCESTOR|CPXF_CLOSEST|CPXF_NOZ);
	spawnfresh:
		TNT1 A 0 A_SpawnItemEx("PlasmaPickup",0,0,0,vel.x,vel.y,vel.z,0, SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_NOPOINTERS);
		stop;
	spawndropped:
		TNT1 A 0 A_JumpIfInTargetInventory("ThunderBuster",1,"spawnfresh");
		TNT1 A 0 A_SpawnItemEx("PlasmaPickup",0,0,0,vel.x,vel.y,vel.z,0, SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS);
		stop;
	} 
}
class PlasmaBattery:Ammo{
	default{
		+inventory.ignoreskill +inventory.untossable
		inventory.maxamount 60;
		ammo.backpackmaxamount 60;
		ammo.backpackamount 0;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	}
}
class PlasmaZoom:InventoryFlag{}
class PlasmaAlt:InventoryFlag{}
class PlasmaEmptyCell:InventoryFlag{}
class PlasmaZoomBatteryDrainage:InventoryFlag{default{inventory.maxamount 126000;}}
class HDCellpackEmpty:Ammo{
	default{
		+inventory.ignoreskill
		inventory.maxamount 6;
		ammo.backpackmaxamount 20;
		ammo.backpackamount 0;
		inventory.pickupmessage "Picked up a depleted cell.";
		scale 0.4;
	}
	states{
	spawn:
		CELL A 0 nodelay A_SpawnItemEx("CelE",0,0,0,vel.x,vel.y,vel.z,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM);
		stop;
	}
}

class HDThunderTrail:IdleDummy{
	states{
	spawn:
		TNT1 A 1 nodelay A_RadiusGive("EvadeNow",96,RGF_MONSTERS,1);
		TNT1 A 10 A_PlaySound("weapons/bigcrack");
		TNT1 A 0 A_AlertMonsters();
		stop;
	}
}


class BeamBoltThrower:ActionItem{
	states{
	pickup:
		TNT1 AA 0 A_FireProjectile("HDGunSmoker",0,0,0,-4);
		TNT1 A 0 A_TakeInventory("IsWeaponReady");
		TNT1 A 0 A_CustomRailgun(random(120,240),0,"","azure",RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,0,40.0,"HDExplosionBeam",0,0,65536,12,0.4,2.0,"",-4);
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("HDThunderTrail",12,0,40,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("DistantShotgun",12,0,40,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 0{
			A_MuzzleClimb(
				frandom(1.2,1.8),-frandom(4.0,5.4),
				frandom(0.8,1.2),-frandom(3.4,4.2),
				frandom(0.4,0.8),-frandom(2.4,2.4),
				-frandom(0.4,1.0),frandom(2.8,2.8)
			);
			A_Overlay(PSP_FLASH,"flash");
			A_ChangeVelocity(
				cos(pitch)*-frandom(1,3),0,
				sin(pitch)*frandom(1,3),
				CVF_RELATIVE
			);
		}fail;
	}
}
class HDExplosionBeam:HDExplosion{
	default{
		+alwayspuff +noblood
		obituary "%o was awed by %k's particle beam.";
	}
	states{
	spawn:
		TNT1 AA 0 nodelay A_GiveInventory("CacoZapper");
		goto super::spawn;
	}
}


class PlasmaBallTail:HDPuff{
	default{
		damagetype "thermal";
		obituary "%o was baked by %k's plasma rifle.";
		+nointeraction;
		+forcexybillboard;
		+extremedeath;
		renderstyle "add";
		radius 2;
		height 3;
		scale 0.4;
		hdpuff.grow 0.1;
		hdpuff.fade 0.87;
		hdpuff.startvelz 2;
		hdpuff.decel 0.9;
	}
	states{
	spawn:
		PLSE A -1 nodelay A_Explode(random(16,70),36);
		stop;
	}
}
class PlasmaBallTailHarmless:PlasmaBallTail{
	states{
	spawn:
		PLSE A -1;
		stop;
	}
}



//put this into a separate zscript file

class HDCellAmmo:Ammo{
	default{
		+inventory.ignoreskill
		inventory.maxamount 30;
		ammo.backpackmaxamount 60;
		ammo.backpackamount 0;
	}
	override void detachfromowner(){
		target=owner;
		super.detachfromowner();
	}
	states{
	spawn:
		TNT1 A 1 nodelay{
			if(target)target.A_GiveInventory("HDSpareCellDropper");
		}
		stop;
	}
}
class HDCellpacks:Ammo replaces Cell{
	default{
		+inventory.ignoreskill
		inventory.maxamount 6;
		ammo.backpackmaxamount 20;
		ammo.backpackamount 0;
		inventory.pickupmessage "Picked up a cell.";
		scale 0.4;
	}
	states{
	spawn:
		CELL A 0 nodelay A_SpawnItemEx("CelP",0,0,0,vel.x,vel.y,vel.z,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM);
		stop;
	}
}
class CelP:HDUPK replaces HDCellpacks{
	default{scale 0.4;}
	states{
	spawn:
		CELL A -1 A_Stop();
	give:
		---- A 0 A_JumpIfInTargetInventory("HDCellpacks",0,"spawn");
		---- A 0{
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			A_GiveToTarget("HDCellpacks",1);
		}stop;
	}
}
class CelE:CelP replaces HDCellpackEmpty{
	default{translation 0;}
	states{
	give:
		---- A 0 A_JumpIfInTargetInventory("HDCellpackEmpty",0,"spawn");
		---- A 0{
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			A_GiveToTarget("HDCellpackEmpty",1);
		}stop;
	}
}


//replace the derivatives where you can
//spawn a CelXP from the weapon, give it a Clip plus whatever # you want
class HDCelXP:HDUPK{
	default{scale 0.4;}
	states{
	spawn2:
		CELL CBA -1{
			int clm=countinv("HDCellAmmo");
			if(!clm){
				actor a=spawn("CelE",pos);a.vel=vel;
				destroy();return;
			}
			if(clm>19){  
				actor a=spawn("CelP",pos);a.vel=vel;
				destroy();return;
			}
			if(clm>13)frame=0;  
			else if(clm>6)frame=1;
		}
	spawn:
		CELL C 0 A_Stop();
		---- A 0{
			if(!countinv("Clip")){
				A_GiveInventory("Clip");
				if(target is "PlayerPawn"){
					ExtractAmmo();
				}else A_GiveInventory("HDCellAmmo",20);
			}
		}goto spawn2;
	give:
		---- A 0{
			if(A_JumpIfInTargetInventory("HDCellAmmo",0,"null")){
				setstatelabel("spawn");
				return;
			}
			if(countinv("HDCellAmmo")>=20){  
				if(A_JumpIfInTargetInventory("HDCellPacks",0,"null")){
					setstatelabel("spawn");
					return;
				}else target.A_GiveInventory("HDCellPacks",1);
			}else{
				target.A_GiveInventory("HDCellAmmo",countinv("HDCellAmmo"));
			}
			A_PlaySound("weapons/pocket");
		}stop;
	}
	virtual void ExtractAmmo(){
		A_SetInventory("HDCellAmmo",target.countinv("PlasmaBattery")/3);
		target.A_TakeInventory("PlasmaBattery");
	}
}
class HDCelXB:HDCelXP{
	override void ExtractAmmo(){
		A_SetInventory("HDCellAmmo",target.countinv("BFGChamber"));
		target.A_TakeInventory("BFGChamber");
	}
}
class HDCelXS:HDCelXP{
	override void ExtractAmmo(){
		A_SetInventory("HDCellAmmo",target.countinv("LumberCell")/60);
		target.A_TakeInventory("LumberCell");
	}
}
class HDCelXV : HDCelXP{
	override void ExtractAmmo(){
		A_SetInventory("HDCellAmmo",target.countinv("VulcJuice")/150);
		target.A_TakeInventory("VulcJuice");
	}
}
class HDCelXD:HDCelXP{
	override void ExtractAmmo(){
		A_SetInventory("HDCellAmmo",target.countinv("HERPCell")/750);
		target.A_TakeInventory("HERPCell");
	}
}

//for the single drop
//rename this to HDSpareCellDropper
class HDSpareCellDropper:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			actor a;int b;
			while(countinv("HDCellAmmo")){
				[b,a]=A_SpawnItemEx("HDCelXP",
					random(8,12),random(0,12),24,5,0,0,random(-6,-12)
				);a.vel+=vel;
				b=min(countinv("HDCellAmmo"),random(1,19));
				a.A_GiveInventory("HDCellAmmo",b);
				A_TakeInventory("HDCellAmmo",b);
			}
		}fail;
	}
}



class PlasmaPickup:HDUPK{
	default{scale 0.6;}
	states{
	spawn2:
		---- A 1{
			if(countinv("PlasmaZoom")){
				A_GiveInventory("PlasmaZoomBatteryDrainage",1);
				if(A_JumpIfInventory("PlasmaZoomBatteryDrainage",0,"null")){
					A_TakeInventory("PlasmaZoomBatteryDrainage");
					A_TakeInventory("PlasmaBattery",1);
					if(!countinv("PlasmaBattery"))A_TakeInventory("PlasmaZoom");
				}
			}else A_SetTics(-1);
		}loop;
	spawn:
		PLAS A 0 A_Stop();
		---- A 0{
			if(!countinv("Clip")){
				A_GiveInventory("Clip");
				if(target is "PlayerPawn"){
					A_SetInventory("PlasmaBattery",target.countinv("PlasmaBattery"));
					target.A_TakeInventory("PlasmaBattery");
					A_SetInventory("PlasmaZoom",target.countinv("PlasmaZoom"));
					target.A_TakeInventory("PlasmaZoom");
					A_SetInventory("PlasmaZoomBatteryDrainage",
						target.countinv("PlasmaZoomBatteryDrainage"));
					target.A_TakeInventory("PlasmaZoomBatteryDrainage");
					A_SetInventory("PlasmaAlt",target.countinv("PlasmaAlt"));
					target.A_TakeInventory("PlasmaAlt");
					A_SetInventory("PlasmaEmptyCell",target.countinv("PlasmaEmptyCell"));
					target.A_TakeInventory("PlasmaEmptyCell");
				}else A_GiveInventory("PlasmaBattery",60);
			}
		}goto spawn2;
	give:
		---- A 0{
			if(target.countinv("ThunderBuster")){
				setstatelabel("spawn");
				return;
			}
			A_PlaySound("misc/w_pkup");
			target.A_GiveInventory("ThunderBuster");
			target.A_SetInventory("PlasmaBattery",countinv("PlasmaBattery"));
			target.A_SetInventory("PlasmaZoom",countinv("PlasmaZoom"));
			target.A_SetInventory("PlasmaZoomBatteryDrainage",
				countinv("PlasmaZoomBatteryDrainage"));
			target.A_SetInventory("PlasmaAlt",countinv("PlasmaAlt"));
			target.A_SetInventory("PlasmaEmptyCell",countinv("PlasmaEmptyCell"));
		}stop;
	}
}
class PlasmaPickupDropped:PlasmaPickup{
	states{
	spawn:
		PLAS A 0 A_Stop();
		---- A 0{
			if(!countinv("Clip")){
				A_GiveInventory("Clip");
				A_SetInventory("PlasmaZoom",randompick(0,0,0,0,1));
				A_SetInventory("PlasmaAlt",random(0,1));
				A_SetInventory("PlasmaBattery",random(0,60));
				if(!countinv("PlasmaBattery"))A_GiveInventory("PlasmaEmptyCell");
			}
		}goto spawn2;
	}
}




//main vibro puff and exploder
class BeamSpot:IdleDummy{
	default{
		+puffonactors +hittracer +puffgetsowner +rollsprite +rollcenter +forcexybillboard
		renderstyle "add"; decal "PlasmaShock";
		obituary "%o was shocked by %k's particle beam.";
	}
	override void postbeginplay(){
		scale.x*=randompick(-1,1);roll=random(0,3)*90;
		changetid(666123);
		bextremedeath=random(0,1);
		stamina++;
		actoriterator it=actoriterator.create(666123,"BeamSpot");
		while(master=it.Next()){
			if(master && master.distance3d(self)<4){
				stamina+=master.stamina;
			}
		}
		if(!tracer)tracer=self;else{
			if(tracer.health>0) damagemobj(
				self,target,random(1,stamina),"Electro"
			); else tracer.A_GiveInventory("SawGib",4);
			if(random(1,3)>1)A_Immolate(tracer,target,clamp(stamina,0,100));
		}
		if(stamina>=random(24,48)){
			A_SpawnItemEx("BeamSpotBoom",
			flags:
				SXF_NOCHECKPOSITION|
				SXF_TRANSFERPOINTERS
			);
			destroy();
			return;
		}

		if(A_JumpIfCloser(256,"null")) A_Frighten(256);
		A_PlaySound("weapons/plasidle");

		if(stamina>=random(8,12)) setstatelabel("fuzz");
	}
	states{
	spawn:
		TNT1 A random(4,6);
		stop;
	fuzz:
		PLSE AAAAA 1 A_FadeOut(0.2);
		stop;
	}
}
class BeamSpotBoom:IdleDummy{
	default{
		+forceradiusdmg +nodamagethrust;
		+seeinvisible;
		obituary "%o was shocked by %k's particle beam.";
		decal "Scorch";
		damagetype "SmallArms0";
		radius 2;height 2;
	}
	override void postbeginplay(){
		actoriterator it=actoriterator.create(666123,"BeamSpot");
		while(master=it.Next()){
			if(master.distance3d(self)<64){
				master.changetid(0);
			}
		}
		actor s;
		A_GiveToTarget("BeamBoltThrower");
		A_Blast(
			420,random(24,42)*10,128,"SmallArms0",
			pushradius:420,pushamount:420,
			immolateradius:256,immolateamount:random(1,5),immolatechance:70,
			gibradius:64,gibamount:random(2,4)*30
		);
		A_DistantQuake(
			5,50,2048,8,128,256,256
		);
		for(int i=random(1,3);i;i--){
			s=spawn("HDExplosionBeam",self.pos);
			s.vel+=(random(-3,3),random(-3,3),random(1,3));
			s.target=self.target;
			s=spawn("HDSmokeChunk",self.pos);
			s.vel+=(random(-3,3),random(-3,3),random(2,6));
			s.target=self.target;
		}
		spawn("DistantRocket",self.pos);
		s=spawn("BeamScorcher",self.pos+(cos(angle)*10,sin(angle)*10,0));
			s.vel-=(cos(angle)*10,sin(angle)*10,0);
		s=spawn("WallChunker",self.pos-(0,0,3),ALLOW_REPLACE);
			s.target=target;s.master=master;s.vel=(minvel,0,-1);
	}
	states{
	spawn:
		TNT1 AAAAA 2 nodelay{
			actor s=spawn("HDExplosionBeam",self.pos);
			s.vel+=(random(-2,2),random(-2,2),random(1,3));
			s.target=self.target;
		}
		TNT1 AAAAA 2 A_GiveInventory("CacoZapper",1);
		TNT1 A 30;
		stop;
	}
}

//alt fire puff
class BeamSpotFlash:BeamSpot{
	default{
		-alwayspuff
		obituary "%o was roasted by %k's particle splatter.";
		decal "Scorch";
		seesound "weapons/plasmaf";
		deathsound "weapons/plasmaf";
	}
	override void postbeginplay(){
		double d=distance3d(target);
		if(d>1000){
			destroy();
			return;
		}

		super.postbeginplay();
		bextremedeath=0;

		scale*=(1000-d)*0.001;
		alpha=scale.y+0.3;
		vel=(frandom(-1,1),frandom(-1,1),frandom(1,3));

		int n=clamp((1000-d)*0.1,2,100);
		int n1=n*0.6;
		int n2=n*0.4;
		A_Blast(
			n2,n1,0,"Electro",
			pushradius:n2,pushamount:n2,
			immolateradius:n1,immolateamount:random(4,8)*n2,immolatechance:n
		);

		pitch=random(80,90);
		angle=random(0,359);
		A_SpawnChunks("HDGunSmoke",clamp(n2*0.6,4,7),3,6);
		A_PlaySound("weapons/plasmaf");
	}
	states{
	spawn:
		PLSS AB 1 bright nodelay A_SpawnItemEx("PlasmaBallTail",0,0,0,(vel.x*0.12),(vel.y*0.12),(vel.z*0.12),0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_ABSOLUTEMOMENTUM);
		PLSE AAA 1 bright A_FadeIn(0.1);
		PLSE BCDE 1 bright A_FadeOut(0.1);
		stop;
	}
}


class BeamScorcher:HDActor{
	default{
		projectile; +ripper
		decal "BusterScorch";
		speed 50;radius 3;height 2;
	}
	states{
	spawn:
		TNT1 A 3;
		stop;
	death:
		TNT1 A 0 A_Immolate(self,self,random(4,8)*10);
	xdeath:
		TNT1 A 1;
		stop;
	}
}