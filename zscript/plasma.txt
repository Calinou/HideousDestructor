// ------------------------------------------------------------
// Thunder Buster
// ------------------------------------------------------------
const HDCONST_TBMAXRANGE=8192;
class ThunderBuster:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Thunder Buster"
		//$Sprite "PLASA0"

		weapon.selectionorder 70;
		weapon.slotnumber 6;
		weapon.ammouse 1;
		scale 0.6;
		inventory.pickupmessage "You got the particle beam gun!";
	}
	override void tick(){
		super.tick();
		drainheat(TBS_HEAT,12);
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(
			owner&&owner.player
			&&cvar.getcvar("hd_tbmode",owner.player).getint()
		){
			weaponstatus[0]|=TBF_ALT;
		}
	}
	states{
	ready:
		PLSG A 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
		}goto readyend;
	fire:
		PLSG A 3 offset(0,35);
	hold:
		PLSG A 0 A_JumpIf(invoker.weaponstatus[TBS_BATTERY]>0,"shoot");
		goto nope;
	shoot:
		PLSG A 0{
			A_ZoomFactor(0.99,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_PlaySound("weapons/plasidle");
			if(countinv("IsMoving")>9)A_MuzzleClimb(frandom(-0.8,0.8),frandom(-0.8,0.8));
		}
		PLSG A 0 A_JumpIf(invoker.weaponstatus[0]&TBF_ALT,"ShootClaw");
		goto shootstraight;
	shootclaw:
		PLSG A 0{
			int bat=invoker.weaponstatus[TBS_BATTERY];
			A_GunFlash();
			spawn("DistantPlasma",pos,ALLOW_REPLACE);
			A_ZoomFactor(1.01,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			if(bat>random(-1,3)){
				A_FireBullets(1,1,
					bat*0.055,
					(random(1,2)),
					"BeamSpotFlash",FBF_NORANDOM,1024
				);
				if(bat>0&&!random(0,1))invoker.weaponstatus[TBS_BATTERY]--;
			}
		}
		PLSG A 1 offset(1,32)A_MuzzleClimb(frandom(-0.6,0.6),frandom(-0.6,0.6));
		PLSG A 1 offset(-1,34)A_MuzzleClimb(frandom(-0.6,0.6),frandom(-0.6,0.6));
		PLSG A 0 A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		goto shootend;
	shootstraight:
		PLSG A 0{
			int bat=invoker.weaponstatus[TBS_BATTERY];
			if(bat>0&&!random(0,3))invoker.weaponstatus[TBS_BATTERY]--;
			if(hd_debug){
				actor zapp;int zpp;
				[zapp,zpp]=lineattack(
					angle,HDCONST_TBMAXRANGE*2,pitch,0,"none",
					"CheckPuff",flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
					offsetz:height-6
				);
				if(!zapp)return;
				zpp=max(1,random(1,bat)/5);
				if(zapp.tracer){
					zapp.tracer.A_GiveInventory("Heat",16*bat);
					zpp-=random(0,2);
				}
				for(int i=0;i<zpp;i++){
					zapp.A_SpawnItemEx("BeamSpot",
						flags:SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS
					);
				}
				return;
			}

			if(bat>random(-2,1)){
				A_FireBullets(0,0,
					clamp(bat*0.3,1,3),(0),
					"BeamSpot",FBF_NORANDOM,HDCONST_TBMAXRANGE*2
				);
				if(bat>0&&!random(0,3))invoker.weaponstatus[TBS_BATTERY]--;
			}
		}goto shootend;
	shootend:
		PLSG A 1 offset(1,33);
		PLSG A 1 offset(0,34);
		PLSG A 1 offset(-1,33);
		PLSG A 9{
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			if(invoker.weaponstatus[TBS_BATTERY]<1){
				A_PlaySound("weapons/plasmas",CHAN_WEAPON);
				A_GunFlash();
			}else{
				A_Refire();
			}
		}goto nope;
	flash:
		PLSF A 1 bright{
			HDFlashAlpha(64);
			A_Light2();
			A_SetTics(random(0,1));
		}
		PLSF BA 1 bright;
		PLSF B 1 bright A_Light1();
		PLSF AB 1 bright;
		PLSF B 0 bright A_Light0();
		stop;
	altfire:
		PLSG A 0{
			if(invoker.weaponstatus[TBS_BATTERY]>0){
				if(!random(0,400000))
					invoker.weaponstatus[TBS_BATTERY]=
						max(0,invoker.weaponstatus[TBS_BATTERY]);
				A_PlaySound("weapons/plasidle",CHAN_WEAPON,0.6);
				actor a;int b;
				[a,b]=lineattack(
					angle,HDCONST_TBMAXRANGE*2,pitch,0,"none",
					"PlasmaCheckPuff",flags:LAF_NORANDOMPUFFZ
				);
				if(a){
					a.addz(6-height);
					int distraw=distance3d(a);
					if(distraw>HDCONST_TBMAXRANGE*2){
						A_Log("\cd[\cuThunderBuster\cd]\cj target out of range",true);
					}
					else{
						double dist=distraw*1./HDCONST_ONEMETRE;
						string ss=string.format("\cd[\cuThunderBuster\cd]\cj target at \cf%.2f\cj metre%s",dist,dist==1?"":"s");
						if(distraw>=HDCONST_TBMAXRANGE)
							ss=string.format("%s - \caOUT OF RANGE",ss);
						A_Log(ss,true);
					}
				}else A_Log("\cd[\cuThunderBuster\cd]\cj target out of range",true);
			}
		}goto nope;
	firemode:
		PLSG C 1 offset(1,32) A_GiveInventory("WeaponBusy");
		PLSG C 2 offset(2,32);
		PLSG C 1 offset(1,33);
		PLSG C 2 offset(0,34);
		PLSG C 3 offset(-1,35);
		PLSG C 4 offset(-1,36);
		PLSG C 3 offset(-1,35);
		PLSG C 2 offset(0,34){
			invoker.weaponstatus[0]^=TBF_ALT;
		}
		PLSG A 1;
		PLSG A 1 offset(0,34);
		PLSG A 1 offset(1,33);
		goto nope;
	althold:
		---- A 0;
		goto nope;

	select0:
		PLSG A 0;
		goto select0big;
	deselect0:
		PLSG A 0 A_Light0();
		goto deselect0big;

	unload:
		PLSG A 0{
			invoker.weaponstatus[0]|=TBF_JUSTUNLOAD;
			if(invoker.weaponstatus[TBS_BATTERY]>=0)
				return resolvestate("unmag");
			return resolvestate("nope");
		}
	unmag:
		PLSG A 2 offset(0,33){
			A_SetCrosshair(21);
			A_MuzzleClimb(frandom(-1.2,-2.4),frandom(1.2,2.4));
		}
		PLSG A 3 offset(0,35);
		PLSG A 2 offset(0,40) A_PlaySound("weapons/huntopen");
		PLSG A 0{
			int bat=invoker.weaponstatus[TBS_BATTERY];
			A_MuzzleClimb(frandom(-1.2,-2.4),frandom(1.2,2.4));
			if(
				(
					bat<0
				)||(
					!PressingUnload()&&!PressingReload()
				)||(
					bat>=20
					&&A_JumpIfInventory("HDCellPacks",0,"null")
				)||(
					!bat
					&&A_JumpIfInventory("HDCellPackEmpty",0,"null")
				)||(
					countinv("HDCellAmmo")>AmmoCap("HDCellAmmo")-bat
				)
			)return resolvestate("dropmag");
			return resolvestate("pocketmag");
		}

	dropmag:
		---- A 0{
			if(invoker.weaponstatus[TBS_BATTERY]>=0){
				actor a;int b;
				[b,a]=A_SpawnItemEx("HDCellPickup",
					cos(pitch)*10,0,height-10-10*sin(pitch),
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				a.stamina=invoker.weaponstatus[TBS_BATTERY];
			}
			invoker.weaponstatus[TBS_BATTERY]=-1;
		}goto magout;

	pocketmag:
		---- A 0{
			int bat=invoker.weaponstatus[TBS_BATTERY];
			if(!bat)A_GiveInventory("HDCellpackEmpty");
			else if(bat>=20)A_GiveInventory("HDCellPacks");
			else A_GiveInventory("HDCellAmmo",bat);

			invoker.weaponstatus[TBS_BATTERY]=-1;
		}
		PLSG A 8 offset(0,43) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		PLSG A 8 offset(0,42) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		goto magout;

	magout:
		---- A 0 A_JumpIf(invoker.weaponstatus[0]&TBF_JUSTUNLOAD,"Reload3");
		goto loadmag;

	reload:
		PLSG A 0{
			invoker.weaponstatus[0]&=~TBF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[TBS_BATTERY]<20
				&&(
					countinv("HDCellPacks")
					||countinv("HDCellAmmo")
				)
			)setweaponstate("unmag");
		}goto nope;

	loadmag:
		PLSG A 12 offset(0,42);
		PLSG A 2 offset(0,43){if(health>39)A_SetTics(0);}
		PLSG AA 2 offset(0,42);
		PLSG A 2 offset(0,44) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		PLSG A 4 offset(0,43) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		PLSG A 6 offset(0,42);
		PLSG A 8 offset(0,38)A_PlaySound("weapons/rifleload",CHAN_WEAPON);
		PLSG A 4 offset(0,37){if(health>39)A_SetTics(0);}
		PLSG A 4 offset(0,36)A_PlaySound("weapons/grenopen",CHAN_WEAPON);

		PLSG A 0{
			if(countinv("HDCellPacks")){
				//reload a full one
				invoker.weaponstatus[TBS_BATTERY]=20;
				A_TakeInventory("HDCellPacks",1,TIF_NOTAKEINFINITE);
			}else{
				//reload a partial one
				int rld=min(random(1,19),countinv("HDCellAmmo"));
				invoker.weaponstatus[TBS_BATTERY]=rld;
				A_TakeInventory("HDCellAmmo",rld,TIF_NOTAKEINFINITE);
			}
		}goto reload3;

	reload3:
		PLSG A 6 offset(0,40)A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
		PLSG A 2 offset(0,36);
		PLSG A 4 offset(0,33);
		goto nope;

	spawn:
		PLAS A -1;
		stop;
	}

	override void initializewepstats(bool idfa){
		weaponstatus[TBS_BATTERY]=20;
	}
}
enum tbstatus{
	TBF_ALT=1,
	TBF_JUSTUNLOAD=2,

	TBS_FLAGS=0,
	TBS_BATTERY=1,
	TBS_HEAT=2,
};

class PlasmaCheckPuff:CheckPuff{
	default{
		-alwayspuff
	}
}

class HDThunderTrail:IdleDummy{
	states{
	spawn:
		TNT1 A 1 nodelay {HDMobAI.Frighten(self,128);}
		TNT1 A 10 A_PlaySound("weapons/bigcrack");
		TNT1 A 20 A_AlertMonsters();
		stop;
	}
}

class BeamBoltThrower:ActionItem{
	states{
	pickup:
		TNT1 A 0 A_CustomRailgun(random(120,240),0,"","azure",RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,0,40.0,"HDExplosionBeam",0,0,65536,12,0.4,2.0,"",-4);
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("HDThunderTrail",12,0,40,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 AAAAAA 0 A_SpawnItemEx("DistantShotgun",12,0,40,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 0{
			A_MuzzleClimb(
				frandom(1.2,1.8),-frandom(4.0,5.4),
				frandom(0.8,1.2),-frandom(3.4,4.2),
				frandom(0.4,0.8),-frandom(2.4,2.4),
				-frandom(0.4,1.0),frandom(2.8,2.8)
			);
			A_Overlay(PSP_FLASH,"flash");
			A_ChangeVelocity(
				cos(pitch)*-frandom(1,3),0,
				sin(pitch)*frandom(1,3),
				CVF_RELATIVE
			);
			if(!player)return;
			let tb=ThunderBuster(player.readyweapon);
			if(tb)tb.weaponstatus[TBS_HEAT]+=60;
		}fail;
	}
}
class HDExplosionBeam:HDExplosion{
	default{
		+alwayspuff +noblood
		obituary "%o was awed by %k's particle beam.";
	}
	states{
	spawn:
		TNT1 AA 0 nodelay A_GiveInventory("CacoZapper");
		goto super::spawn;
	}
}


class PlasmaBallTail:HDPuff{
	default{
		damagetype "thermal";
		obituary "%o was baked by %k's plasma rifle.";
		+nointeraction;
		+forcexybillboard;
		+extremedeath;
		renderstyle "add";
		radius 2;
		height 3;
		scale 0.4;
		hdpuff.grow 0.1;
		hdpuff.fade 0.87;
		hdpuff.startvelz 2;
		hdpuff.decel 0.9;
	}
	states{
	spawn:
		PLSE A -1 nodelay A_Explode(random(16,70),36);
		stop;
	}
}
class PlasmaBallTailHarmless:PlasmaBallTail{
	states{
	spawn:
		PLSE A -1;
		stop;
	}
}


//alt fire puff
class BeamSpotFlash:BeamSpot{
	default{
		-alwayspuff
		obituary "%o was roasted by %k's particle splatter.";
		decal "Scorch";
		seesound "weapons/plasmaf";
		deathsound "weapons/plasmaf";
	}
	override void postbeginplay(){
		double d=distance3d(target);
		if(d>1000){
			destroy();
			return;
		}

		super.postbeginplay();
		bextremedeath=0;

		scale*=(1000-d)*0.001;
		alpha=scale.y+0.3;
		vel=(frandom(-1,1),frandom(-1,1),frandom(1,3));

		int n=clamp((1000-d)*0.1,2,100);
		int n1=n*0.6;
		int n2=n*0.4;
		A_Blast(
			n2,n1,0,"Electro",
			pushradius:n2,pushamount:n2,
			immolateradius:n1,immolateamount:random(4,8)*n2,immolatechance:n
		);

		pitch=random(80,90);
		angle=random(0,359);
		A_SpawnChunks("HDGunSmoke",clamp(n2*0.6,4,7),3,6);
		A_PlaySound("weapons/plasmaf");
	}
	states{
	spawn:
		PLSS AB 1 bright nodelay A_SpawnItemEx("PlasmaBallTail",0,0,0,(vel.x*0.12),(vel.y*0.12),(vel.z*0.12),0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_ABSOLUTEMOMENTUM);
		PLSE AAA 1 bright A_FadeIn(0.1);
		PLSE BCDE 1 bright A_FadeOut(0.1);
		stop;
	}
}



//main vibro puff and exploder
class BeamSpot:IdleDummy{
	default{
		+puffonactors +hittracer +puffgetsowner +rollsprite +rollcenter +forcexybillboard
		renderstyle "add";
		obituary "%o was shocked by %k's particle beam.";
	}
	override void postbeginplay(){
		if(!target||frandom(0.8,2.0)*HDCONST_TBMAXRANGE<distance3d(target)){
			destroy();
			return;
		}
		scale.x*=randompick(-1,1);roll=random(0,359);
		changetid(666123);
		stamina++;
		actoriterator it=actoriterator.create(666123,"BeamSpot");
		while(master=it.Next()){
			if(master && master.distance3d(self)<4){
				stamina+=master.stamina;
			}
		}
		if(!tracer)tracer=self;else{
			if(tracer.health>0) tracer.damagemobj(
				self,target,random(1,stamina),"Electro"
			);else tracer.A_GiveInventory("SawGib",4);
			if(random(1,3)>1)A_Immolate(tracer,target,clamp(stamina,0,100));
		}
		if(stamina>=random(24,48)){
			A_SpawnItemEx("BeamSpotBoom",
			flags:
				SXF_NOCHECKPOSITION|
				SXF_TRANSFERPOINTERS
			);
			destroy();
			return;
		}

		if(A_JumpIfCloser(256,"null"))HDMobAI.Frighten(self,256);
		A_PlaySound("weapons/plasidle");

		if(stamina>random(3,12)){
			angle=target.angle;
			A_SprayDecal("PlasmaShock",4);
			bextremedeath=randompick(0,1,1);
			setstatelabel("fuzz");
		}
	}
	states{
	spawn:
		TNT1 A random(4,6);
		stop;
	fuzz:
		PLSE AAAAA 1 A_FadeOut(0.2);
		stop;
	}
}
class BeamSpotBoom:IdleDummy{
	default{
		+forceradiusdmg +nodamagethrust;
		+seeinvisible;
		obituary "%o was shocked by %k's particle beam.";
		decal "Scorch";
		damagetype "SmallArms0";
		radius 2;height 2;
	}
	override void postbeginplay(){
		actoriterator it=actoriterator.create(666123,"BeamSpot");
		while(master=it.Next()){
			if(master.distance3d(self)<64){
				master.changetid(0);
			}
		}
	}
	states{
	spawn:
		TNT1 A 1;
		TNT1 A 0{
			actor s;
			A_GiveToTarget("BeamBoltThrower");
			A_Blast(
				420,random(24,42)*10,128,"SmallArms0",
				pushradius:420,pushamount:420,
				immolateradius:256,immolateamount:random(1,5),immolatechance:70,
				gibradius:64,gibamount:random(2,4)*30
			);
			DistantQuaker.Quake(self,
				5,50,2048,8,128,256,256
			);
			spawn("DistantRocket",self.pos);
			spawn("DoubleDistantShotgun",self.pos);
			for(int i=random(1,3);i;i--){
				s=spawn("HDExplosionBeam",self.pos);
				s.vel+=(random(-3,3),random(-3,3),random(1,3));
				s.target=self.target;
				s=spawn("HDSmokeChunk",self.pos);
				s.vel+=(random(-3,3),random(-3,3),random(2,6));
				s.target=self.target;
			}
			spawn("DistantRocket",self.pos);
			s=spawn("BeamScorcher",self.pos+(cos(angle)*10,sin(angle)*10,0));
				s.vel-=(cos(angle)*10,sin(angle)*10,0);
			s=spawn("WallChunker",self.pos-(0,0,3),ALLOW_REPLACE);
			s.target=target;s.master=master;s.vel=(minvel,0,-1);
		}
		TNT1 AAAAA 2{
			spawn("DistantShotgun",self.pos);
			actor s=spawn("HDExplosionBeam",self.pos);
			s.vel+=(random(-2,2),random(-2,2),random(1,3));
			s.target=self.target;
		}
		TNT1 AAAAA 2 A_GiveInventory("CacoZapper",1);
		TNT1 A 30;
		stop;
	}
}

class BeamScorcher:HDActor{
	default{
		projectile; +ripper
		decal "BusterScorch";
		speed 50;radius 3;height 2;
	}
	states{
	spawn:
		TNT1 A 3;
		stop;
	death:
		TNT1 A 0 A_Immolate(self,self,random(4,8)*10);
	xdeath:
		TNT1 A 1;
		stop;
	}
}

