//-------------------------------------------------
// Frag on a string: the real IED
//-------------------------------------------------
class TripwirePlacerPuff:IdleDummy{
	default{
		-alwayspuff -puffonactors +bloodlessimpact
		stamina 1;radius 0;height 0;
	}
}
class TripwireCheckerPuff:IdleDummy{
	default{
		-alwayspuff +puffonactors +hittracer +bloodlessimpact
		stamina 1;radius 0.1;height 0.1;
	}
}
class Tripwire:HDWeapon{
	actor grenade;
	actor gumspot;
	default{
		weapon.ammotype1 "HDFragGrenadeAmmo";
		weapon.selectionorder 1004;
	}
	action void UndoAll(){
		if(invoker.grenade){
			invoker.grenade.master=null;
			invoker.grenade=null;
		}
		if(invoker.gumspot){
			invoker.gumspot.destroy();
			A_Log("Setup aborted.",true);
		}
	}
	states{
	altfire:
		TNT1 A 0 UndoAll();
		goto nope;
	deselect:
		TNT1 A 10{
			UndoAll();
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			if(countinv("NulledWeapon"))A_SetTics(0);
		}goto super::deselect;
	select:
		TNT1 A 10{
			if(!countinv("HDFragGrenadeAmmo")){
				if(getcvar("hd_helptext"))A_Print("No grenades.");
				A_SelectWeapon("Ring");
			}else if(getcvar("hd_helptext"))A_Print("\cp\--- \cqTRIPWIRES \cp---\c-\n\n\nHit fire to set one end of the line,\n\nthen hit fire again to plant the grenade.\nby human hands.\n\nMove carefully.\n\n\n\cg(DO NOT TRY TO HANG THE GRENADE\n\cgOFF THE CEILING. IT NEVER WORKS.)");
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			if(countinv("NulledWeapon"))A_SetTics(0);
		}goto super::select;
	ready:
		TNT1 A 1{
			if(!countinv("HDFragGrenadeAmmo"))A_SelectWeapon("Ring");
			else A_SetCrosshair(0);
			if(!invoker.gumspot)A_TakeInventory("WeaponBusy");else A_GiveInventory("WeaponBusy");
			A_WeaponReady();
		}wait;
	fire:
		TNT1 A 0{
			actor a;int b;actor aaa;
			if(!invoker.gumspot){
				[a,b]=LineAttack(angle,64,pitch,0,"none",
					"TripwirePlacerPuff",flags:LAF_NORANDOMPUFFZ
				);
				if(!a){
					A_Log("You need to stick the wire on to something stable.",true);
					return;
				}
				aaa=spawn("GumAndString",a.pos);
				aaa.target=self;aaa.master=self;aaa.angle=angle;
				aaa.A_PlaySound("misc/bulletflesh",CHAN_BODY);
				invoker.gumspot=aaa;
				A_Log("Wire end secured. Now to set the grenade...",true);
			}else{
				[a,b]=LineAttack(angle,64,pitch,0,"none",
					"TripwirePlacerPuff",flags:LAF_NORANDOMPUFFZ
				);
				if(!a){
					A_Log("You need to stick the grenade on to something stable.",true);
					return;
				}
				aaa=spawn("TrippingFrag",a.pos);
				aaa.target=self;aaa.master=self;aaa.angle=angle;
				aaa.A_PlaySound("weapons/rifleclick2",CHAN_BODY);
				invoker.grenade=aaa;
				invoker.gumspot.tracer=invoker.grenade;
				invoker.grenade.tracer=invoker.gumspot;
				invoker.grenade.master=self;
				invoker.grenade.target=self;
				A_Log("Grenade secured! Now be very, very careful...",true);
				A_TakeInventory("HDFragGrenadeAmmo",1,TIF_NOTAKEINFINITE);
				invoker.gumspot=null;
			}
			a.destroy();
		}goto nope;
	}
}
class GumAndString:IdleDummy{
	bool trapisset;
	int stringlength;
	vector3 ddd;int bbb;float ii;
	sector stuckto;
	double stucktoheight;
	bool stuckfloor;
	default{
		+spriteangle
		spriteangle 0;
		scale 0.1;translation 2;
		radius 0.5;height 0.5;
	}
	override void tick(){
		if(stuckto){
			if(stuckfloor)setz(stuckto.centerfloor()-stucktoheight);
			else setz(stuckto.centerceiling()+stucktoheight);
		}
		else if(bceilinghugger)setz(ceilingz-height);
		nexttic();
	}
	override void postbeginplay(){
		super.postbeginplay();
		trapisset=false;
		stucktoheight=0;

		//and now to find some shit
		fcheckposition tm;
		checkmove(pos.xy+angletovector(angle,5),PCM_NOACTORS,tm);

		if(master&&
			//checkmove reveals this is stuck to an upper or lower texture
			(
				tm.floorz>tm.pos.z
				||tm.ceilingz<tm.pos.z+height
			)
		){
			if(tm.floorz>tm.pos.z)stuckto=tm.floorsector;
				else stuckto=tm.ceilingsector;
			if(pos.z<stuckto.centerceiling()){
				stuckfloor=true;
				stucktoheight=stuckto.centerfloor()-pos.z;
			}else{
				stuckfloor=false;
				stucktoheight=pos.z-stuckto.centerceiling();
			}
//			if(hd_debug)A_LogInt(stucktoheight);
		}else{
			//check to see if on floor or ceiling of its own sector
			int spaceabove=ceilingz-pos.z;
			int spacebelow=pos.z-floorz;
			if(spaceabove>spacebelow){  
				//stuck to floor
				brelativetofloor=true;
			}else{
				//err in favour of stuck to ceiling
				bceilinghugger=true;
			}
			bmovewithsector=true;
		}
	}
	states{
	spawn:
		BAL7 A 1 nodelay{
			if(
				!tracer&&
				(trapisset||!master||master.health<1)
			){
				destroy();
				return;
			}

			//if gone into floor or ceiling, abort
			if(floorz>pos.z||ceilingz<pos.z){  
				ForceAbort();
				return;
			}

			//check for the actual thing
			if(tracer)A_FaceTracer(0,0,flags:FAF_TOP,-1);
			else if(master)A_FaceMaster(0,0,flags:FAF_TOP,-1);
			actor a;int b;
			[a,b]=LineAttack(angle,512,pitch,0,"none",
				"TripwireCheckerPuff",
				flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ
			);
			if(a){
				bool carefulplayer=false;
				let atpl=HDPlayerPawn(a.tracer);
				if(
					atpl && atpl!=master && atpl.runwalksprint<0
					&& a.pos.z-atpl.pos.z<24
					&& max(abs(atpl.vel.x),abs(atpl.vel.y),abs(atpl.vel.z))<5
				){
					carefulplayer=true;
					atpl.stunned=max(atpl.stunned,10);
				}

				if(!master && !carefulplayer && tracer && a.tracer!=tracer){
					vector3 vvv;
					if(a.tracer)vvv=a.tracer.vel*0.5;
					PullPin(vvv.x,vvv.y,vvv.z);
					return;
				}
				else if(tracer && a.tracer==tracer)master=null;

				if(
					!a.tracer
					||(tracer && a.tracer==master)
					||(!tracer && a.tracer!=master)
				){
					ForceAbort();
					return;
				}
				a.destroy();
			}else{
				ForceAbort();
				destroy();return;
			}


			//draw a line of particles
			if(!tracer && !master)return;

			//set all the numbers
			if(!trapisset){
				if(tracer)ddd=tracer.pos+(0,0,4);
				else ddd=master.pos+(0,0,master.height-8);

				ddd-=pos;
				stringlength=max(ddd.length(),1);
				bbb=stringlength*0.3;
				ddd/=bbb;

				ii=min(bbb,40)*0.0001;

				if(tracer && !master)trapisset=true;
			}else if(tracer && (tracer.pos+(0,0,4)-pos).length()>stringlength+1){
				PullPin();
				return;
			}

			vector3 ccc;
			for(int i=0;i<bbb;i++){
				ccc=ddd*i*frandom(1-ii,1+ii);
				A_SpawnParticle(
					"white",
					lifetime:1,size:0.5,
					xoff:ccc.x,yoff:ccc.y,zoff:ccc.z,
					startalphaf:0.8
				);
			}
		}wait;
	}
	void PullPin(double vvx=0,double vvy=0,double vvz=0){
		if(!tracer)return;
		actor ggg=tracer.spawn("HDFragGrenadeRoller",tracer.pos);
		ggg.target=tracer.target;
		ggg.vel=(pos-ggg.pos).unit();
		actor hhh=tracer.spawn("HDFragSpoon",tracer.pos);
		hhh.vel=ggg.vel*5;
		ggg.vel*=3;ggg.vel.z++;
		ggg.A_PlaySound("weapons/rifleclick");
		ggg.vel+=(vvx,vvy,vvz);
		hhh.vel+=(vvx,vvy,vvz);
		if(tracer)tracer.destroy();
		destroy();
	}
	void ForceAbort(){
		A_PlaySound("weapons/bigcrack");
		if(tracer)tracer.A_PlaySound("weapons/bigcrack");
		else if(master)master.A_PlaySound("weapons/bigcrack");
		if(master)master.A_Log("Welp, there goes that one. Try again?",true);
		destroy();
	}
}
class TrippingFrag:FragP{
	sector stuckto;
	double stucktoheight;
	bool stuckfloor;
	default{
		+nogravity +shootable +noblood +nodamage +notargetswitch
		health int.MAX;painchance 256; mass 10;
		radius 2;height 2;
	}
	override bool cancollidewith(actor other,bool passive){
		if(other is "userpickerupper"){
			spawn("FragP",pos);
			if(tracer)tracer.destroy();
			destroy();return false;
		}
		return false;
	}
	override void postbeginplay(){
		super.postbeginplay();

		//and now to find some shit
		fcheckposition tm;
		checkmove(pos.xy+angletovector(angle,5),PCM_NOACTORS,tm);

		if(master&&
			//checkmove reveals this is stuck to an upper or lower texture
			(
				tm.floorz>tm.pos.z
				||tm.ceilingz<tm.pos.z+height
			)
		){
			if(tm.floorz>tm.pos.z)stuckto=tm.floorsector;
				else stuckto=tm.ceilingsector;
			if(pos.z<stuckto.centerceiling()){
				stuckfloor=true;
				stucktoheight=stuckto.centerfloor()-pos.z;
			}else{
				stuckfloor=false;
				stucktoheight=pos.z-stuckto.centerceiling();
			}
//			if(hd_debug)A_LogInt(stucktoheight);
		}else{
			//check to see if on floor or ceiling of its own sector
			int spaceabove=ceilingz-pos.z;
			int spacebelow=pos.z-floorz;
			if(spaceabove>spacebelow){  
				//stuck to floor
				brelativetofloor=true;
			}else{
				//err in favour of stuck to ceiling
				bceilinghugger=true;
			}
			bmovewithsector=true;
		}
	}
	override void tick(){
		ClearInterpolation();
		if(stuckto){
			if(stuckfloor)setz(stuckto.centerfloor()-stucktoheight);
			else setz(stuckto.centerceiling()+stucktoheight);

			//if gone into floor or ceiling, abort
			if(floorz>pos.z||ceilingz<pos.z){  
				A_PlaySound("misc/fragknock");
				bnogravity=false;
				bceilinghugger=false;
				stuckto=null;
			}
		}
		else if(bceilinghugger)setz(ceilingz-height);
		super.tick();
	}
	states{
	pain:
		---- A 0{
			if(!random(0,9)){
//			if(1){ //testing
				actor ggg=spawn("HDFragGrenadeRoller",pos);
				ggg.target=target;
				if(tracer){
					ggg.vel=(tracer.pos-ggg.pos).unit()*3+(0,0,1);
					tracer.destroy();
				}else ggg.vel=(random(-1,1),random(-1,1),1);
				ggg.A_PlaySound("weapons/rifleclick");
				actor hhh=spawn("HDFragSpoon",pos);
				hhh.vel=ggg.vel*2;
				destroy();return;
			}else if(!random(0,4)){
				if(tracer)tracer.destroy();
				bnogravity=false;
				bceilinghugger=false;
				stuckto=null;
				A_UnsetShootable();
			}else setstatelabel("spawn");
		}goto spawn;
	}
}
