//-------------------------------------------------
// Frag on a string: the real IED
//-------------------------------------------------
class TripwirePlacerPuff:IdleDummy{
	default{
		-alwayspuff -puffonactors +bloodlessimpact
		stamina 1;
	}
}
class TripwireCheckerPuff:IdleDummy{
	default{
		-alwayspuff +puffonactors +hittracer +bloodlessimpact
		stamina 1;
	}
}
class Tripwire:HDWeapon{
	actor grenade;
	actor gumspot;
	action void UndoAll(){
		if(invoker.grenade){
			invoker.grenade.master=null;
			invoker.grenade=null;
		}
		if(invoker.gumspot){
			invoker.gumspot.destroy();
			A_Log("Setup aborted.",true);
		}
	}
	states{
	altfire:
		TNT1 A 0 UndoAll();
		goto nope;
	deselect:
		TNT1 A 0 UndoAll();
		goto super::deselect;
	ready:
		TNT1 A 1{
			if(!countinv("HDFragGrenades"))A_SelectWeapon("Ring");
			else A_SetCrosshair(0);
			A_WeaponReady();
		}wait;
	fire:
		TNT1 A 0{
			actor a;int b;actor aaa;
			if(!invoker.gumspot){
				[a,b]=LineAttack(angle,64,pitch,0,"none",
					"TripwirePlacerPuff",flags:LAF_NORANDOMPUFFZ
				);
				if(!a){
					A_Log("You need to stick the wire on to something stable.",true);
					return;
				}
				aaa=spawn("GumAndString",a.pos);
				aaa.target=self;aaa.master=self;
				aaa.A_PlaySound("misc/bulletflesh",CHAN_BODY);
				invoker.gumspot=aaa;
				A_Log("Wire end secured. Now to set the grenade...",true);
			}else{
				[a,b]=LineAttack(angle,64,pitch,0,"none",
					"TripwirePlacerPuff",flags:LAF_NORANDOMPUFFZ
				);
				if(!a){
					A_Log("You need to stick the grenade on to something stable.",true);
					return;
				}
				aaa=spawn("TrippingFrag",a.pos);
				aaa.target=self;aaa.master=self;
				aaa.A_PlaySound("weapons/rifleclick2",CHAN_BODY);
				invoker.grenade=aaa;
				invoker.gumspot.tracer=invoker.grenade;
				invoker.grenade.tracer=invoker.gumspot;
				invoker.grenade.master=self;
				invoker.grenade.target=self;
				A_Log("Grenade secured! Now be very, very careful...",true);
				invoker.gumspot=null;
			}
			if(a)a.destroy();
		}goto nope;
	}
}
class GumAndString:IdleDummy{
	bool trapisset;
	int stringlength;
	default{
		scale 0.1;translation 1;
	}
	states{
	spawn:
		BAL7 A 1{
			if(
				!tracer&&
				(!master||master.health<1)
			){
				destroy();
				return;
			}

			//check for the actual thing
			A_FaceTracer(0,0,flags:FAF_TOP);
			actor a;int b;
			[a,b]=LineAttack(angle,1024,pitch,0,"none",
				"TripwireCheckerPuff",
				flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ
			);
			if(a){
				if(a.tracer){
					if(a.tracer==tracer)master=null;
					else if(a.tracer==master && tracer){
						A_PlaySound("weapons/bigcrack");
						tracer.A_PlaySound("weapons/bigcrack");
						master.A_Log("Welp, there goes that one. Try again?",true);
						destroy();return;
					}
				}
				if(tracer && a.tracer!=tracer){
					actor ggg=tracer.spawn("HDFragGrenadeRoller",tracer.pos);
					ggg.target=tracer.target;
					ggg.vel+=(pos-ggg.pos);
					ggg.vel/=max(1,ggg.vel.length());
					actor hhh=tracer.spawn("HDFragSpoon",tracer.pos);
					hhh.vel=ggg.vel*5;
					ggg.vel*=3;ggg.vel.z++;
					ggg.A_PlaySound("weapons/rifleclick");
					tracer.destroy();
					destroy();return;
				}
				a.destroy();
			}


			//draw a line of particles
			vector3 ddd;
			if(tracer)ddd=tracer.pos+(0,0,4);
			else ddd=master.pos+(0,0,master.height-8);

			ddd-=pos;
			int bbb=max(pos.length(),1)*3;
			ddd/=bbb;
			for(int i=0;i<bbb;i++){
				vector3 ccc=ddd*i;
				A_SpawnParticle(
					"white",
					lifetime:1,size:0.4,
					xoff:ccc.x,yoff:ccc.y,zoff:ccc.z,
					startalphaf:0.8
				);
			}
		}wait;
	}
}
class TrippingFrag:FragP{
	default{
		+nogravity +shootable +noblood
	}
	override bool cancollidewith(actor other,bool passive){
		if(other is "userpickerupper"){
			spawn("FragP",pos);
			if(tracer)tracer.destroy();
			destroy();return false;
		}
		return false;
	}
}




