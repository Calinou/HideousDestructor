// ------------------------------------------------------------
// BFG9k
// ------------------------------------------------------------
class BFG9K:HDWeapon{
	default{
		weapon.selectionorder 700;
		weapon.slotnumber 7;
		weapon.kickback 200;
		weapon.ammotype "BFGChamber";
		weapon.ammotype2 "HDCellPacks";
		weapon.bobrangex 0.3;
		weapon.bobrangey 1.0;
		weapon.bobspeed 1.2;
		weapon.bobstyle "normal";
		scale 0.7;
		inventory.pickupmessage "You got the BFG 9000! Oh yes.";
	}
	//BFG9k.Spark(self,4);
	//BFG9k.Spark(self,4,height-10);
	static void Spark(actor caller,int sparks=1,int sparkheight=10){
		actor a;vector3 spot;
		vector3 origin=caller.pos+(0,0,sparkheight);
		double spp;double spa;
		for(int i=0;i<sparks;i++){
			spp=caller.pitch+frandom(-20,20);
			spa=caller.angle+frandom(-20,20);
			spot=random(32,57)*(cos(spp)*cos(spa),cos(spp)*sin(spa),-sin(spp));
			a=caller.spawn("BFGSpark",origin+spot);
			a.vel+=caller.vel*0.9-spot*0.03;
		}
	}
	states{
	ready:
		BFGG A 1{
			if(invoker.weaponstatus[0]&BFGF_CRITICAL)setweaponstate("shoot");
			A_WeaponReady(
				WRF_ALLOWRELOAD|WRF_ALLOWZOOM|
				WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4
			);
		}goto readyend;
	select0:
		BFGG A 0 {if(!countinv("BFGLoaded"))A_TakeInventory("BFGChamber");}
		goto select0bfg;
	deselect0:
		BFGG A 0;
		goto deselect0bfg;
	altfire:
	althold:
		stop;
	flash:
		BFGF B 3 bright{
			A_Light1();
			HDFlashAlpha(0,true);
		}
		BFGF A 2 bright{
			A_Light2();
			HDFlashAlpha(200);
		}
		BFGF A 2 bright HDFlashAlpha(128);
		goto lightdone;

	fire:
		BFGG C 0 {invoker.weaponstatus[3]=0;}
	hold:
		BFGG C 0{
			if(countinv("BFGInternalCharge")==20 && countinv("BFGChamber")==20)
			return resolvestate("chargeend");
			else if(
				(countinv("BFGLoaded")>0)&&    
				(
					(countinv("BFGInternalCharge")>6)||
					(countinv("BFGChamber")>6)    
				)
			)return resolvestate("charge");
			return resolvestate("nope");
		}
	charge:
		BFGG B 0{
			if(
				(countinv("BFGInternalCharge")==20 && countinv("BFGChamber")==20)
				||countinv("PressingReload")
			)setweaponstate("nope");
		}
		BFGG B 6{
			invoker.weaponstatus[3]++;
			if (invoker.weaponstatus[3]>3){
				invoker.weaponstatus[3]=0;
				if (countinv("BFGChamber")<20){
					A_GiveInventory("BFGChamber");
					if(countinv("BFGChamber")==20)A_GiveInventory("BFGDemonSummoned");
				}
				else A_GiveInventory("BFGInternalCharge");
			}
			if(countinv("BFGChamber")==20)A_SetTics(5);
			if(health<40){
				A_SetTics(4);
				if(health>16)damagemobj(invoker,self,1,"internal");
			}
			A_TakeInventory("WeaponBusy",1);
			A_PlaySound("weapons/plasidle",5);
			BFG9k.Spark(self,1,height-10);
			A_WeaponReady(WRF_NOFIRE);
		}
		BFGG B 0{
			if(countinv("BFGInternalCharge")==20 && countinv("BFGChamber")==20)
			A_Refire("shoot");
			else A_Refire();
		}
		loop;
	chargeend:
		BFGG B 2{
			BFG9k.Spark(self,1,height-10);
			A_PlaySound("weapons/plasidle",invoker.weaponstatus[3]>6?CHAN_AUTO:5);
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_NOFIRE|WRF_DISABLESWITCH);
			A_SetTics(max(1,6-invoker.weaponstatus[3]*0.3));
			invoker.weaponstatus[3]++;
		}
		BFGG B 0{
			if(invoker.weaponstatus[3]>21)A_Refire("shoot");    
			else A_Refire("chargeend");
		}goto ready;
	shoot:
		BFGG B 0{
			invoker.weaponstatus[3]=0;
			invoker.weaponstatus[0]|=BFGF_CRITICAL;
			invoker.weaponstatus[5]=15;
			A_PlaySound("weapons/bfgf");
			A_GiveInventory("PowerFrightener");
		}
		BFGG B 3{
			invoker.weaponstatus[5]--;
			A_PlaySound("weapons/plasidle",CHAN_AUTO);
			BFG9k.Spark(self,1,height-10);
			if(invoker.weaponstatus[5]<1){
				invoker.weaponstatus[5]=0;
				player.setpsprite(PSP_WEAPON,invoker.findstate("reallyshoot"));
			}else if(invoker.weaponstatus[5]<10)A_SetTics(2);
			else if(invoker.weaponstatus[5]<5)A_SetTics(1);
		}wait;
	reallyshoot:
		BFGG A 8{
			A_AlertMonsters();
			A_GiveInventory("PowerFrightener");
		}
		BFGG B 2{
			A_PlaySound("weapons/plasmas",CHAN_AUTO);
			A_GiveInventory("PowerFrightener",1);

			A_TakeInventory("BFGInternalCharge");
			A_TakeInventory("BFGChamber");
			invoker.weaponstatus[0]&=~BFGF_CRITICAL;
			A_GunFlash();
			if(random(0,7))A_TakeInventory("BFGDemonSummoned");
			A_SpawnItemEx("BFGBallTail",0,0,height-12,cos(pitch)*cos(angle)*4+vel.x,cos(pitch)*sin(angle)*4+vel.y,-sin(pitch)*4+vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
			A_SpawnItemEx("BFGBalle",0,0,height-12,cos(pitch)*cos(angle)*13+vel.x,cos(pitch)*sin(angle)*13+vel.y,-sin(pitch)*13+vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_SETMASTER);
		}
		BFGG BC 3 A_ChangeVelocity(2,0,-3,CVF_RELATIVE);
		BFGG C 6{
			A_GiveInventory("PowerFrightener",1);
			A_MuzzleClimb(
				1,3,
				-frandom(0.8,1.2),-frandom(2.4,4.6),
				-frandom(1.8,2.8),-frandom(6.4,9.6),
				1,2
			);
			A_Refire("nope");
		}
		goto ready;

	reload:
		BFGG A 0{
			if(
				countinv("BFGChamber")>19
				||(
					!countinv("HDCellAmmo")
					&&!countinv("HDCellPacks")
				)
			)setweaponstate("nope");
			invoker.weaponstatus[4]=1;
		}goto reload1;
	altreload:
	reloadempty:
		BFGG A 0{
			if(
				(
					!countinv("BFGChamber")
					&&countinv("BFGLoaded")
				)
				||!countinv("HDCellPackEmpty")
			)setweaponstate("nope");
			invoker.weaponstatus[4]=0;
		}goto reload1;
	unload:
		BFGG A 0{
			if(!countinv("BFGLoaded"))setweaponstate("nope");
			invoker.weaponstatus[4]=-1;
		}goto reload1;
	reload1:
		BFGG A 4;
		BFGG C 2 offset(0,36) A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		BFGG C 2 offset(0,38) A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		BFGG C 4 offset(0,40){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			A_PlaySound("weapons/rifleclick2");
		}
		BFGG C 2 offset(0,42){
			A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
			A_PlaySound("weapons/huntopen");
			if(countinv("BFGLoaded")){
				A_SetTics(4);
				actor a;int b;
				[b,a]=A_SpawnItemEx("HDCellPickup",
					cos(pitch)*10,0,height-10-10*sin(pitch),
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				a.A_SetInventory("HDCellAmmo",countinv("BFGChamber"));
			}
			if(countinv("BFGDemonSummoned")){
				A_GiveInventory("BFGUnloader"); //too many repeat-frames to add here!
				A_TakeInventory("BFGDemonSummoned");
			}
			A_TakeInventory("BFGChamber");
			A_TakeInventory("BFGLoaded");
		}
		BFGG C 0{
			if(invoker.weaponstatus[4]==-1)return resolvestate("reload3");
			return resolvestate("reload2");
		}
	reload2:
		BFGG C 4 offset(0,42)A_PlaySound("weapons/pocket");
		BFGG C 12;
		BFGG C 12 offset(0,42)A_PlaySound("weapons/rifleload");
		BFGG C 10 offset(0,36)A_PlaySound("weapons/grenopen");
		BFGG C 0{
			if(!invoker.weaponstatus[4]){
				A_TakeInventory("HDCellPackEmpty",1,TIF_NOTAKEINFINITE);
				A_GiveInventory("BFGLoaded");
			//below is just "else" since [4]-1 would never enter this state to begin with
			}else if(countinv("HDCellPacks")){
				A_TakeInventory("HDCellPacks",1,TIF_NOTAKEINFINITE);
				A_GiveInventory("BFGChamber",20);
			}else if(countinv("HDCellAmmo")){
				A_SetInventory("BFGChamber",
					min(countinv("HDCellAmmo"),random(1,19))
				);
				A_TakeInventory("HDCellAmmo",
					countinv("BFGChamber"),TIF_NOTAKEINFINITE
				);
			}
			if(countinv("BFGChamber"))A_GiveInventory("BFGLoaded");
		}
	reload3:
		BFGG C 12 offset(0,38) A_PlaySound("weapons/huntopen");
		BFGG C 16 offset(0,37) A_PlaySound("weapons/rifleclick2");
		BFGG C 2 offset(0,38);
		BFGG C 2 offset(0,36);
		BFGG A 2 offset(0,34);
		BFGG A 12;
		goto ready;

	spawn:
		BFUG A -1 nodelay{
			if(invoker.weaponstatus[0]&BFGF_CRITICAL)invoker.setstatelabel("bwahahahaha");
		}
	bwahahahaha:
		BFUG A 3{
			invoker.weaponstatus[5]--;
			A_PlaySound("weapons/plasidle",CHAN_AUTO);
			BFG9k.Spark(self,1,6);
			if(invoker.weaponstatus[5]<1){
				invoker.weaponstatus[5]=0;
				invoker.setstatelabel("heh");
			}else if(invoker.weaponstatus[5]<10)A_SetTics(2);
			else if(invoker.weaponstatus[5]<5)A_SetTics(1);
		}wait;
	heh:
		BFUG A 8;
		BFUG A 4{
			invoker.A_PlaySound("weapons/plasmas",CHAN_AUTO);
			invoker.weaponstatus[0]&=~BFGF_CRITICAL; //DO NOT DELETE THIS
			invoker.weaponstatus[1]=0;invoker.weaponstatus[2]=0;

			if(random(0,7))invoker.weaponstatus[0]&=~BFGF_DEMON;
			A_SpawnItemEx("BFGBallTail",0,0,height-12,cos(pitch)*cos(angle)*4+vel.x,cos(pitch)*sin(angle)*4+vel.y,-sin(pitch)*4+vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
			A_SpawnItemEx("BFGBalle",0,0,height-12,cos(pitch)*cos(angle)*13+vel.x,cos(pitch)*sin(angle)*13+vel.y,-sin(pitch)*13+vel.z,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_SETMASTER);
		}
		BFUG A 0{
			invoker.A_ChangeVelocity(-cos(pitch)*4,0,sin(pitch)*4,CVF_RELATIVE);
		}goto spawn;
	}

	//for tracking ammo in drops and pickups
	/*
		[0] status
		[1] bfginternalcharge
		[2] bfgchamber
		[3] timer
		[4] chosen load type (-1 unload,0 empty,1 full)
		[5] critical mass timer
	*/
	enum bfg9kstatus{
		BFGF_LOADED=1,
		BFGF_CRITICAL=2,
		BFGF_DEMON=4,
	};
	override void postbeginplay(){
		super.postbeginplay();
		weaponstatus[0]|=BFGF_LOADED;
		weaponstatus[1]=20;
		weaponstatus[2]=20;
	}
	override void attachtoowner(actor user){
		user.A_SetInventory("BFGDemonSummoned",weaponstatus[0]&BFGF_DEMON);
		user.A_SetInventory("BFGLoaded",weaponstatus[0]&BFGF_LOADED);
		user.A_SetInventory("BFGInternalCharge",weaponstatus[1]);
		user.A_SetInventory("BFGChamber",weaponstatus[2]);
		super.attachtoowner(user);
	}
	override void detachfromowner(){
		weaponstatus[1]=owner.countinv("BFGInternalCharge");
		weaponstatus[2]=owner.countinv("BFGChamber");
		if(owner.countinv("BFGLoaded"))weaponstatus[0]|=BFGF_LOADED;
			else weaponstatus[0]&=~BFGF_LOADED;;
		if(owner.countinv("BFGDemonSummoned"))weaponstatus[0]|=BFGF_DEMON;
			else weaponstatus[0]&=~BFGF_DEMON;
		if(weaponstatus[0]&BFGF_CRITICAL){
			master=owner;
			bfriendly=true;
		}else weaponstatus[3]=0;
		super.detachfromowner();
	}
}
class BFGDemonSummoned:InventoryFlag{}
class BFGLoaded:Ammo{
	default{
		+inventory.untossable
		inventory.maxamount 1;
		ammo.backpackmaxamount 1;
		ammo.backpackamount 0;
	}
	states{spawn:TNT1 A 0 nodelay;stop;}
}
class BFGChamber:Ammo{
	default{
		+inventory.untossable
		inventory.maxamount 20;
		ammo.backpackmaxamount 20;
		ammo.backpackamount 0;
	}
	states{spawn:TNT1 A 0 nodelay;stop;}
}
class BFGInternalCharge:Ammo{
	default{
		+inventory.untossable
		inventory.maxamount 20;
		ammo.backpackmaxamount 20;
		ammo.backpackamount 0;
	}
	states{spawn:TNT1 A 0 nodelay;stop;}
}

class BFGSpark:HDActor{
	default{
		+nointeraction +forcexybillboard +bright
		radius 0;height 0;
		renderstyle "add";alpha 0.1; scale 0.16;
	}
	states{
	spawn:
		BFE2 DDDDDDDDDD 1 bright nodelay A_FadeIn(0.1);
		BFE2 D 1 A_FadeOut(0.3);
		wait;
	}
}
class BFGVileShard:Actor{
	default{
		+ismonster +float +nogravity +noclip +lookallaround +nofear +forcexybillboard +bright
		radius 0;height 0;
		scale 0.16;renderstyle "add";
		speed 24;
	}
	states{
	spawn:
		BFE2 A 0 nodelay{
			A_GiveInventory("HDFireEnder");
			A_SetGravity(0.1);
		}
	spawn2:
		BFE2 AB 1{
			A_Look();
			A_Wander();
		}loop;
	see:
		BFE2 D 1{
			A_Wander();
			A_SpawnProjectile("BFGSpark",0,random(-24,24),random(-24,24),2,random(-14,14));
			if(!random(0,3))vel.z+=random(-4,8);
			if(alpha<0.2)setstatelabel("see2");
		}
		BFE2 A 1 bright A_Wander();
		BFE2 B 1 bright{
			A_Wander();
			A_FadeOut(0.1);
		}
		loop;
	see2:
		TNT1 AAA 0 A_Wander();
		TNT1 A 5{
			A_VileChase();
			A_SpawnItemEx("BFGSpark",random(-4,4),random(-4,4),random(28,36),random(4,6),random(-1,1),random(-6,6),random(0,360),SXF_NOCHECKPOSITION,200);
		}
		loop;
	heal:
		BFE2 AAAAAAA 0 A_SpawnItemEx("BFGSpark",random(-4,4),random(-4,4),random(28,36),random(4,6),random(-1,1),random(-6,6),random(0,360),SXF_NOCHECKPOSITION);
		BFE2 AAAA 1 A_SpawnItemEx("BFGSpark",random(-4,4),random(-4,4),random(28,36),random(4,6),random(-1,1),random(-6,6),random(0,360),SXF_NOCHECKPOSITION);
		stop;
	}
}
class BFGShard:BFGVileShard{
	states{
	see2:
		TNT1 A 0;
		stop;
	}
}
class SkillSharder:ActionItem{
	states{
	pickup:
		TNT1 A 0 A_SpawnItemEx("BFGVileShard",-2048,0,0,0,0,0,0,SXF_NOPOINTERS|SXF_NOCHECKPOSITION|SXF_SETTARGET);
		fail;
	}
}

class BFGBalle:FastProjectile{
	int user_bfgdamage;
	default{
		projectile;
		+skyexplode +forceradiusdmg +ripper -noteleport +telestomp +notarget
		+bright
		decal "HDBFGLightning";
		renderstyle "add";
		damagefunction(user_bfgdamage);
		deathsound "weapons/bfgx";
		obituary "$OB_MPBFG_BOOM";
		alpha 0.9;
		height 6;
		radius 6;
		speed 10;
		obituary "%o was smacked by %k's big green gob.";
	}
	states{
	spawn:
		TNT1 A 0;
		TNT1 A 0 A_BFGSpray();

		TNT1 A 0{
			user_bfgdamage=1;
			if(countinv("IsMoving",AAPTR_TARGET)>=6){    
				A_SetPitch(pitch+random(-3,3));
				A_SetAngle(angle+random(-1,1));
			}
		}
		BFS1 AB 2 A_SpawnItemEx("BFGBallTail",0,0,0,(vel.x*0.2),(vel.y*0.2),(vel.z*0.2),0,168,0);
		BFS1 A 0{
			user_bfgdamage=random(10,20)*50;
			bripper=false;
		}
		goto spawn2;
	spawn2:
		BFS1 AB 2 A_SpawnItemEx("BFGBallTail",0,0,0,vel.x*0.2,vel.y*0.2,vel.z*0.2,0,168,0);
		---- A 0{
			if(pos.z-floorz<12)vel.z+=4;
			else if(ceilingz-pos.z<19)vel.z-=4;
			A_BishopMissileWeave();
			A_SpawnItemEx("BFGBoll",0,0,4,
				vel.x,vel.y,vel.z,0,
				SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS
			);
		}
		loop;
	death:
		BFE1 A 2;
		BFE1 B 2 A_Explode(160,512,0);
		BFE1 B 4{
			DistantQuaker.Quake(self,
				6,100,16384,10,256,512,128
			);
			A_SpawnItemEx("DistantBFG");
		}
		TNT1 AAAAA 0 A_SpawnItemEx("HDSmokeChunk",random(-2,0),random(-3,3),random(-2,2),random(-5,0),random(-5,5),random(0,5),random(100,260),SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION,16);
		TNT1 AAAAA 0 A_SpawnItemEx("BFGBallRemains",-1,0,-12,0,0,0,SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION,16);
		BFE1 C 8;
		BFE1 CCC 0 A_SpawnItemEx("HDSmoke",random(-4,0),random(-3,3),random(0,4),random(-1,1),random(-1,1),random(1,3),0,SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION,16);
		BFE1 DEF 6;
		BFE1 F 3 bright A_FadeOut(0.1);
		wait;
	}
}
class BFGBallRemains:GreenParticleFountain{
	states{
	spawn:
		TNT1 AAAAAAAAA 4 A_SpawnItemEx("HDSmoke",random(-3,3),random(-3,3),random(-3,3),random(-1,1),random(-1,1),random(1,3),0,SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
		TNT1 A 8;
		stop;
	}
}
class BFGBallTail:GreenParticleFountain{
	default{
		-invisible +forcexybillboard
		scale 0.8;renderstyle "add";
	}
	states{
	spawn:
		BFS1 AB 2 bright A_FadeOut(0.2);
		loop;
	}
}
class BFGBoll:HDActor{
	default{
		projectile;
		-noteleport
		+ismonster +telestomp +shootable +invulnerable +notarget
		+friendly +forcexybillboard
		+bloodlessimpact +seeinvisible +ambush
		radius 1;height 1;
		damagetype "BFGBallAttack";
		minmissilechance 256;
		maxtargetrange 65536;
		decal "BFGLightningSmall";
		obituary "%o couldn't be bothered to get away from %k's BFG.";
		damage 10;
		speed 20;
	}
	states{
	spawn:
		TNT1 A 1 nodelay A_SetAngle(random(0,360));
		TNT1 A 0{
			A_AlertMonsters();
			A_ClearTarget();
		}
		TNT1 AAA 0 A_LookEx(0,0,4096.0,65536.0,330.0,"see");
		TNT1 A 1;
		stop;
	see:
		TNT1 A 0 A_JumpIf(IsPointerEqual(AAPTR_MASTER,AAPTR_TARGET),"nope");
		TNT1 A 0 A_FaceTarget(0,0);
		TNT1 A 2 A_CustomRailgun((0),0,"","55 ff 88",RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,0,50.0,"BFGPuff",0,0,65536,18,0.2,1.0);
		stop;
	nope:
		TNT1 A 1;
		stop;
	}
}
class BFGPuff:GreenParticleFountain{
	default{
		-invisible +nointeraction +forcexybillboard +bloodlessimpact
		+noblood +alwayspuff -allowparticles +puffonactors +puffgetsowner +forceradiusdmg
		renderstyle "add";
		damagetype "BFGBallAttack";
		obituary "%o couldn't be bothered to get away from %k's BFG.";
		scale 0.8;
	}
	states{
	spawn:
		BFE2 A 0 nodelay{
			if(target)target=target.master;
		}
		BFE2 A 1 bright A_PlaySound("misc/bfgrail",5);
		BFE2 A 3 bright A_Explode(random(196,320),320);
		BFE2 ABCDE 2 bright A_FadeOut(0.1);
		TNT1 A 0 A_SpawnItemEx("BFGVileShard",0,0,10,10,0,0,random(0,360),SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,254);
		stop;
	}
}


//effects for a possessed cell
class BFGUnloader:ActionItem{
	states{
	pickup:
		TNT1 A 0 A_Jump(128,"harmless");
		TNT1 A 0 A_Jump(128,"vile","harmless");
		TNT1 A 0 A_Jump(256,"yok","vile","harmless");
	vile:
		TNT1 AAAAA 0 A_FireProjectile("BFGVileShard",random(170,190),-10,random(-20,20),5,0,0);
		fail;
	yok:
		TNT1 A 0 A_FireProjectile("YokaiSpawner",random(170,190),-10,random(-20,20),5,0,0);
	harmless:
		TNT1 AAAAA 0 A_FireProjectile("BFGShard",random(170,190),-10,random(-20,20),5,0,0);
		fail;
	}
}


