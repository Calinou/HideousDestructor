// ------------------------------------------------------------
// Loadout-related stuff!
// ------------------------------------------------------------
extend class HDPlayerPawn{
	//basic stuff every player should have
	void GiveBasics(){
		if(!player)return;
		A_GiveInventory("HDFist");
		A_GiveInventory("SelfBandage");
		A_GiveInventory("HDFragGrenades");
		A_GiveInventory("MagManager");
	}
}

//loadout common to all soldier classes
class SoldierExtras:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			A_SetInventory("PortableMedikit",max(1,countinv("PortableMedikit")));
			A_SetInventory("PortableStimpack",max(2,countinv("PortableStimpack")));
			if(
				!countinv("HDArmourWorn")
			)A_SetInventory("HDArmourWorn",HDCONST_GREENARMOUR);

			if(!countinv("HDPistol"))A_SetInventory("HDPistol",1);
			else if(!countinv("HDSecondPistol"))A_SetInventory("HDSecondPistol",1);
			A_SetInventory("HD9mMag15",max(3,countinv("HD9mMag15")));

			A_SetInventory("HDFragGrenadeAmmo",max(3,countinv("HDFragGrenadeAmmo")));
			A_SetInventory("DERPUsable",max(1,countinv("DERPUsable")));
			A_SetInventory("PortableLadder",max(1,countinv("PortableLadder")));
		}fail;
	}
}



//reset inventory
class InvReset:Inventory{
	void ReallyClearInventory(actor resetee,bool keepkeys=false){
		for(inventory item=resetee.inv;item!=null;item=!item?null:item.inv){
			if(
				(!keepkeys||!(item is "Key"))
			){
				item.destroy();
				item=resetee.inv;
			}
		}
		resetee.ClearInventory();
	}
	void GiveStartItems(actor resetee){
		//now get all the "dropitems" (i.e. player's startitems) and give them
		let drop=getdefaultbytype(resetee.getclass()).getdropitems();
		if(drop){
			for(dropitem di=drop;di;di=di.Next){
				if(di.Name=='None')continue;
				resetee.A_GiveInventory(di.Name,di.Amount);
			}
		}
		let d=HDPlayerPawn(resetee);
		if(d)d.GiveBasics();
	}
	override void attachtoowner(actor other){
		reallyclearinventory(other);
		givestartitems(other);
		destroy();
	}
}
class DoomguyLoadout:InvReset{
	override void attachtoowner(actor other){
		reallyclearinventory(other,true);
		let d=HDPlayerPawn(other);
		if(d)d.GiveBasics();
		other.A_GiveInventory("HDPistol");
		other.A_GiveInventory("HD9mMag15",2);
		other.A_GiveInventory("HDPistolAmmo",4);
		HDWeaponSelector.Select(other,"HDPistol");
		destroy();
	}
}
//wait 1 tick and then select a weapon
//used to override default to fist on weapon removal
class HDWeaponSelector:Thinker{
	actor other;
	class<Weapon> weptype;
	static void Select(actor caller,class<Weapon> weptype){
		let thth=new("HDWeaponSelector");
		thth.weptype=weptype;
		thth.other=caller;
	}
	override void Tick(){
		other.A_SelectWeapon(weptype);
		destroy();
	}
}




/*
	CUSTOM LOADOUTS!
	000s: misc
	100s: weapons, in format 1xy: x=slot, y=priority
	200s: ammo, no spares allowed
*/
const HDCONST_CUSTOMWEPOFFSET=200;
class CustomLoadout:InventoryFlag{
	override void tick(){
		let hdp=HDPlayerPawn(owner);
		if(hdp){
			hdp.GiveCustomLoadout();
			hdp.GiveBasics();
		}destroy();
	}
}
extend class HDPlayerPawn{
	void GiveCustomLoadout(){
		int ldt;int lda;
		name newwep="";
		for(int i=100;i>=0;i--){ //reverse order so top weapons are added last
			ldt=getcvar(string.format("hd_load%i",i));
			lda=max(0,getcvar(string.format("hd_load%ia",i)));

			name nw=NumForInv(ldt,lda);
			if(nw!="")newwep=nw;
		}
		if(player && newwep!=""){
			player.pendingweapon=weapon(findinventory(newwep));
			return;
		}
	}
	name NumForInv(int num,int amt){
		name nw="";
		if(!num||!amt)return "";
		else if(num>=HDCONST_CUSTOMWEPOFFSET){ //weapons
			num-=HDCONST_CUSTOMWEPOFFSET;
			switch(num){
			case 0:
				nw="HDFragGrenades";A_GiveInventory(nw);
				A_GiveInventory("HDFragGrenadeAmmo",max(1,amt));
				break;
			case 10:
				nw="Lumberjack";A_GiveInventory(nw);
				break;
			case 20:
			case 21:
				int which=0;
				//give 2 pistols at once
				if(amt>1){
					A_SetInventory("HDSecondPistol",1);
					A_SetInventory("HDPistol",1);
					nw="HDPistol";
					which=3;
				}else if(countinv("HDPistol")){
					A_GiveInventory("HDSecondPistol");
					which=2;
				}else{
					nw="HDPistol";A_GiveInventory(nw);
					which=1;
				}
				//give auto to either or both
				if(num==21){
					let pppone=hdpistol(findinventory("HDPistol"));
					let ppptwo=hdsecondpistol(findinventory("HDSecondPistol"));
					if(which&2&&ppptwo)ppptwo.weaponstatus[PISS_AUTO]=0;
					if(which&1&&pppone)pppone.weaponstatus[PISS_AUTO]=0;
				}
				break;
			case 22:
				nw="HDSMG";A_GiveInventory(nw);
				break;
			case 30:
				nw="Slayer";A_GiveInventory(nw);
				break;
			case 31:
				nw="Hunter";A_GiveInventory(nw);
				break;
			case 40:
			case 41:
			case 42:
				nw="ZM66AssaultRifle";A_GiveInventory(nw);
				let zzz=hdweapon(findinventory("ZM66AssaultRifle"));
				if(zzz){
					if(num<42){
						zzz.weaponstatus[0]|=ZM66F_NOLAUNCHER;
						if(num==40)zzz.weaponstatus[0]|=ZM66F_NOFIRESELECT;
					}
				}
				break;
			case 43:
				nw="Vulcanette";A_GiveInventory(nw);
				break;
			case 50:
				nw="Blooper";A_GiveInventory(nw);
				break;
			case 51:
				nw="HDRL";A_GiveInventory(nw);
				break;
			case 60:
			case 61:
				nw="LiberatorRifle";A_GiveInventory(nw);
				let llb=hdweapon(findinventory("LiberatorRifle"));
				if(llb){
					if(num==60){
						llb.weaponstatus[0]|=LIBF_NOLAUNCHER;
					}
				}
				break;
			case 62:
				nw="ThunderBuster";A_GiveInventory(nw);
				break;
			case 70:
				nw="Brontornis";A_GiveInventory(nw);
				break;
			case 71:
				nw="BFG9k";A_GiveInventory(nw);
				break;
			case 80:
				nw="BossRifle";A_GiveInventory(nw);
				break;
			case 90:
				nw="HDMedikitter";A_GiveInventory(nw);
				break;
			default:
				break;
			}
			return nw;
		}
		else if(num>=100){ //ammo
			switch(num){
				case 100:A_GiveInventory("HDBattery",amt);break;
				case 101:A_GiveInventory("HD9mMag15",amt);break;
				case 102:A_GiveInventory("HD9mMag30",amt);break;
				case 103:A_GiveInventory("HDShellAmmo",amt);break;
				case 104:A_GiveInventory("HD4mMag",amt);break;
				case 105:A_GiveInventory("HDRocketAmmo",amt);break;
				case 106:A_GiveInventory("HEATAmmo",amt);break;
				case 107:A_GiveInventory("HD7mMag",amt);break;
				case 108:A_GiveInventory("HD7mClip",amt);break;
				case 109:A_GiveInventory("BrontornisRound",amt);break;
				case 110:A_GiveInventory("HDFragGrenadeAmmo",amt);break;
				case 111:A_GiveInventory("HDPistolAmmo",amt);break;
				case 112:A_GiveInventory("FourMilAmmo",amt);break;
				case 113:A_GiveInventory("SevenMilAmmo",amt);break;
				default:break;
			}
		}
		else{ //all other shit
			switch(num){
				case 1:
					A_TakeInventory("HDArmourWorn");
					A_SetInventory("HDArmourWorn",HDCONST_GREENARMOUR);break;
				case 2:
					A_TakeInventory("HDArmourWorn");
					A_SetInventory("HDArmourWorn",HDCONST_BLUEARMOUR);
					findinventory("HDArmourWorn").meleethreshold=3;
					break;
				case 3: A_GiveInventory("PortableRadsuit",amt);break;

				case 4: A_GiveInventory("PortableMedikit",amt);break;
				case 5: A_GiveInventory("PortableStimpack",amt);break;
				case 6: A_GiveInventory("PortableBerserkPack",amt);break;
				case 7: A_GiveInventory("PortableLadder",amt);break;
				case 8: A_GiveInventory("PortableLiteAmp");break;
				case 9: A_GiveInventory("HDBPPreset",999);break;
				case 10: A_GiveInventory("DERPUsable",amt);break;
				case 11: A_GiveInventory("HERPUsable",amt);break;
				case 12: A_GiveInventory("DoorBuster",amt);break;
				case 13: A_GiveInventory("HDIEDKit",amt);break;

				case 14: A_GiveInventory("MapRevealer",amt);break;
				case 15: A_GiveInventory("RedCard",amt);break;
				case 16: A_GiveInventory("BlueCard",amt);break;
				case 17: A_GiveInventory("YellowCard",amt);break;

				case 18: A_GiveInventory("HDArmour",HDCONST_GREENARMOUR);break;
				case 19:
					A_GiveInventory("HDArmour",HDCONST_BLUEARMOUR);
					FindInventory("HDArmour").meleethreshold=3;
					break;
				case 99:
					A_GiveInventory("SoldierExtras",amt);
					return "HDPistol";
					break;
				default:break;
			}
		}
		return "";
	}
}












//experimental shit
//class CustomLoadoutGiver:CustomInventory{
class clg:CustomInventory{
	states{
	spawn:TNT1 A 0;stop;
	pickup:
		TNT1 A 0 GiveCustomItems();
		fail;
	}
	action void GiveCustomItems(){
		array<string> whichitem;whichitem.clear();
		array<int> howmany;howmany.clear();
		//string loadlist=cvar.getcvar("hd_loadout_custom",getplayernumber()).getstring();
//TESTING
string loadlist="9mm 1; 7mm 48; smg; 9mm 30; 915 2;";
		loadlist.replace(" ","");
		loadlist.split(whichitem,";");
		for(int i=0;i<whichitem.size();i++){
			howmany.push((whichitem[i].mid(3,whichitem[i].length())).toint(10));
			whichitem[i]=whichitem[i].left(3);
		}
		for(int i=0;i<allactorclasses.size();i++){
			class<actor> reff=allactorclasses[i];
			if(reff is "HDPickup"||reff is "HDWeapon"){
				string ref;
				if(reff is "HDPickup")ref=getdefaultbytype((class<hdpickup>)(reff)).refid;
				else ref=getdefaultbytype((class<hdweapon>)(reff)).refid;
				if(ref~=="none"||ref=="")continue;
				for(int j=0;j<whichitem.size();j++){
					if(whichitem[j]~==ref){
						A_GiveInventory(reff.getclassname(),howmany[j]);
					}
				}
			}
		}
//FOR BACKPACK
/*
	To do:
	itemstored strings should be in this format:
		"%s %i %i ...", with %s being the inventory actor class name
	each interaction will just call split() and dynarray[0] is the actor name
	for regular items, this is just "%s %i", %i being the amount
	for mags, each %i is its own mag
	for weapons, each *set of eight %i's* is its own weapon
	treat the FIRST, LEFTMOST %i as the top of the stack
	to add, remember: new.." "..existing
*/
		array<string> itemstored;
		itemstored.clear();
		for(int i=0;i<allactorclasses.size();i++){
			class<actor> reff=allactorclasses[i];
			if(reff is "HDPickup"){
				string ref=getdefaultbytype((class<hdpickup>)(reff)).refid;
				if(ref~=="none"||ref=="")continue;
				itemstored.push(reff.getclassname().." 1".." 2".." 3".." 4".." 5".." "..countinv((class<inventory>)(reff)));
			}
		}
		for(int i=0;i<itemstored.size();i++){
			string itemtype=itemstored[i];
			array<string> thisitem;
			thisitem.clear();
			itemtype.split(thisitem," ");
			itemtype=thisitem[0];
			for(int j=1;j<thisitem.size();j++){
				int thisint=thisitem[j].toint(10)+1000;
				itemtype=itemtype..", "..thisint;
			}
			A_Log(itemtype,true);
		}

		//example of manipulation
		A_Log(itemstored[2],true);
		array<string>stringparts;stringparts.clear();
		itemstored[2].split(stringparts," ");
		stringparts.delete(1);
		itemstored[2]=stringparts[0];
		for(int i=1;i<stringparts.size();i++){
			itemstored[2]=itemstored[2].." "..stringparts[i];
		}
		A_Log(itemstored[2],true);
	}
}



class HDBackpack:HDWeapon{
	int index;

	array<string> nicenames;
	array<string> invclasses;

	//"10" for 10 rounds; "0 10 20" for 3 mags
	//"0 0 0 0 0 0 0 0" for a single weapon
	array<string> amounts;

	override void InitializeWepStats(bool idfa){
		if(idfa)return;
		for(int i=0;i<allactorclasses.size();i++){
			class<actor> reff=allactorclasses[i];
			string ref="";
			if(reff is "HDPickup")ref=getdefaultbytype((class<hdpickup>)(reff)).nicename;
			else if(reff is "HDWeapon")ref=getdefaultbytype((class<hdweapon>)(reff)).nicename;
			if(ref!=""){
				invclasses.push(reff.getclassname());
				nicenames.push(ref);
				amounts.push("");
			}
		}
		UpdateMessage(0);
	}
	void UpdateMessage(int num){
		int nnsiz=nicenames.size();
		int maxindex=nicenames.size()-1;
		if(num!=index&&owner){
			int toadd=num>index?1:-1;
			do{
				index+=toadd;
				if(index>maxindex)index=0;
				else if(index<0)index=maxindex;
			}while(index&&amounts[index]==""&&(!owner.countinv(invclasses[index])));
		}else if(max(0-num,num-nnsiz)<maxindex){
			while(num<0)num+=nnsiz;
			while(num>maxindex)num-=nnsiz;
			index=num;
		}
		string str="\cx"..nicenames[index];
		if(hd_debug)str=str.."   \cu"..invclasses[index];
		int aaa=index;int bbb=index;
		for(int i=0;i<5;i++){
			aaa--;
			if(aaa<0)aaa=maxindex;
			bool has=(amounts[aaa]!=""||(owner&&owner.countinv(invclasses[aaa])));
			str=(has?"\cs":"")..nicenames[aaa].."\n"..str;
			bbb++;
			if(bbb>maxindex)bbb=0;
			has=(amounts[bbb]!=""||(owner&&owner.countinv(invclasses[bbb])));
			str=str.."\n"..(has?"\cs":"")..nicenames[bbb];
		}
		wepmsg=str;
	}
	action void A_BPReady(){
		A_WeaponReady(WRF_NOFIRE);
		if(pressinguse()){
			int inputamt=player.cmd.pitch>>5;
			invoker.UpdateMessage(invoker.index-inputamt);
			HijackMouse();
		}
		if(justpressed(BT_ATTACK))invoker.UpdateMessage(invoker.index-1);
		else if(justpressed(BT_ALTATTACK))invoker.UpdateMessage(invoker.index+1);
		else if(justpressed(BT_RELOAD)){
			A_Log("TESTING CLASS RETURN ONLY");
			A_SpawnItemEx(invoker.invclasses[invoker.index],
				10,0,height-12,1,0,1,
				0,SXF_NOCHECKPOSITION
			);
		}
		A_WeaponMessage(invoker.wepmsg,5);
	}
	states{
	select:
		TNT1 A 0{invoker.UpdateMessage(invoker.index);}
		goto super::select;
	ready:
		TNT1 A 1 A_BPReady();
		goto readyend;
	}
}
