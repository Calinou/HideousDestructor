// ------------------------------------------------------------
// Loadout-related stuff!
// ------------------------------------------------------------
extend class HDPlayerPawn{
	//basic stuff every player should have
	void GiveBasics(){
		if(!player)return;
		A_GiveInventory("HDFist");
		A_GiveInventory("SelfBandage");
		A_GiveInventory("HDFragGrenades");
		A_GiveInventory("MagManager");
	}
}

//loadout common to all soldier classes
class SoldierExtras:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			A_SetInventory("PortableMedikit",max(1,countinv("PortableMedikit")));
			A_SetInventory("PortableStimpack",max(2,countinv("PortableStimpack")));
			A_SetInventory("GreenArmourWorn",1);

			if(!countinv("HDPistol"))A_SetInventory("HDPistol",1);
			else if(!countinv("HDSecondPistol"))A_SetInventory("HDSecondPistol",1);
			A_SetInventory("HD9mMag15",max(3,countinv("HD9mMag15")));

			A_SetInventory("HDFragGrenadeAmmo",max(3,countinv("HDFragGrenadeAmmo")));
			A_SetInventory("DERPUsable",max(1,countinv("DERPUsable")));
			A_SetInventory("PortableLadder",max(1,countinv("PortableLadder")));
		}fail;
	}
}



//reset inventory
class InvReset:Inventory{
	void ReallyClearInventory(actor resetee,bool keepkeys=false){
		for(inventory item=resetee.inv;item!=null;item=!item?null:item.inv){
			if(
				(!keepkeys||!(item is "Key"))
			){
				item.destroy();
				item=resetee.inv;
			}
		}
		resetee.ClearInventory();
	}
	void GiveStartItems(actor resetee){
		//now get all the "dropitems" (i.e. player's startitems) and give them
		let drop=getdefaultbytype(resetee.getclass()).getdropitems();
		if(drop){
			for(dropitem di=drop;di;di=di.Next){
				if(di.Name=='None')continue;
				resetee.A_GiveInventory(di.Name,di.Amount);
			}
		}
		let d=HDPlayerPawn(resetee);
		if(d)d.GiveBasics();
	}
	override void attachtoowner(actor other){
		reallyclearinventory(other);
		givestartitems(other);
		destroy();
	}
}
class DoomguyLoadout:InvReset{
	override void attachtoowner(actor other){
		reallyclearinventory(other,true);
		let d=HDPlayerPawn(other);
		if(d)d.GiveBasics();
		other.A_GiveInventory("HDPistol");
		other.A_GiveInventory("HD9mMag15",2);
		other.A_GiveInventory("HDPistolAmmo",4);
		HDWeaponSelector.Select(other,"HDPistol");
		destroy();
	}
}
//wait 1 tick and then select a weapon
//used to override default to fist on weapon removal
class HDWeaponSelector:Thinker{
	actor other;
	class<Weapon> weptype;
	static void Select(actor caller,class<Weapon> weptype){
		let thth=new("HDWeaponSelector");
		thth.weptype=weptype;
		thth.other=caller;
	}
	override void Tick(){
		other.A_SelectWeapon(weptype);
		destroy();
	}
}




/*
	CUSTOM LOADOUTS!
	000s: misc
	100s: weapons, in format 1xy: x=slot, y=priority
	200s: ammo, no spares allowed
*/
const HDCONST_CUSTOMWEPOFFSET=200;
class CustomLoadout:InventoryFlag{
	override void tick(){
		let hdp=HDPlayerPawn(owner);
		if(hdp){
			hdp.GiveCustomLoadout();
			hdp.GiveBasics();
		}destroy();
	}
}
extend class HDPlayerPawn{
	void GiveCustomLoadout(){
		int ldt;int lda;
		name newwep="";
		for(int i=100;i>=0;i--){ //reverse order so top weapons are added last
			ldt=getcvar(string.format("hd_load%i",i));
			lda=max(0,getcvar(string.format("hd_load%ia",i)));

			name nw=NumForInv(ldt,lda);
			if(nw!="")newwep=nw;
		}
		if(player && newwep!=""){
			player.pendingweapon=weapon(findinventory(newwep));
			return;
		}
	}
	name NumForInv(int num,int amt){
		name nw="";
		if(!num||!amt)return "";
		else if(num>=HDCONST_CUSTOMWEPOFFSET){ //weapons
			num-=HDCONST_CUSTOMWEPOFFSET;
			switch(num){
			case 0:
				nw="HDFragGrenades";A_GiveInventory(nw);
				A_GiveInventory("HDFragGrenadeAmmo",max(1,amt));
				break;
			case 10:
				nw="Lumberjack";A_GiveInventory(nw);
				break;
			case 20:
			case 21:
				int which=0;
				//give 2 pistols at once
				if(amt>1){
					A_SetInventory("HDSecondPistol",1);
					A_SetInventory("HDPistol",1);
					nw="HDPistol";
					which=3;
				}else if(countinv("HDPistol")){
					A_GiveInventory("HDSecondPistol");
					which=2;
				}else{
					nw="HDPistol";A_GiveInventory(nw);
					which=1;
				}
				//give auto to either or both
				if(num==21){
					let pppone=hdpistol(findinventory("HDPistol"));
					let ppptwo=hdsecondpistol(findinventory("HDSecondPistol"));
					if(which&2&&ppptwo)ppptwo.weaponstatus[PISS_AUTO]=0;
					if(which&1&&pppone)pppone.weaponstatus[PISS_AUTO]=0;
				}
				break;
			case 22:
				nw="HDSMG";A_GiveInventory(nw);
				break;
			case 30:
				nw="Slayer";A_GiveInventory(nw);
				break;
			case 31:
				nw="Hunter";A_GiveInventory(nw);
				break;
			case 40:
			case 41:
			case 42:
				nw="ZM66AssaultRifle";A_GiveInventory(nw);
				let zzz=hdweapon(findinventory("ZM66AssaultRifle"));
				if(zzz){
					if(num<42){
						zzz.weaponstatus[0]|=ZM66F_NOLAUNCHER;
						if(num==40)zzz.weaponstatus[0]|=ZM66F_NOFIRESELECT;
					}
				}
				break;
			case 43:
				nw="Vulcanette";A_GiveInventory(nw);
				break;
			case 50:
				nw="Blooper";A_GiveInventory(nw);
				break;
			case 51:
				nw="HDRL";A_GiveInventory(nw);
				break;
			case 60:
			case 61:
				nw="LiberatorRifle";A_GiveInventory(nw);
				let llb=hdweapon(findinventory("LiberatorRifle"));
				if(llb){
					if(num==60){
						llb.weaponstatus[0]|=LIBF_NOLAUNCHER;
					}
				}
				break;
			case 62:
				nw="ThunderBuster";A_GiveInventory(nw);
				break;
			case 70:
				nw="Brontornis";A_GiveInventory(nw);
				break;
			case 71:
				nw="BFG9k";A_GiveInventory(nw);
				break;
			case 80:
				nw="BossRifle";A_GiveInventory(nw);
				break;
			case 90:
				nw="HDMedikitter";A_GiveInventory(nw);
				break;
			default:
				break;
			}
			return nw;
		}
		else if(num>=100){ //ammo
			switch(num){
				case 100:A_GiveInventory("HDBattery",amt);break;
				case 101:A_GiveInventory("HD9mMag15",amt);break;
				case 102:A_GiveInventory("HD9mMag30",amt);break;
				case 103:A_GiveInventory("HDShellAmmo",amt);break;
				case 104:A_GiveInventory("HD4mMag",amt);break;
				case 105:A_GiveInventory("HDRocketAmmo",amt);break;
				case 106:A_GiveInventory("HEATAmmo",amt);break;
				case 107:A_GiveInventory("HD7mMag",amt);break;
				case 108:A_GiveInventory("HD7mClip",amt);break;
				case 109:A_GiveInventory("BrontornisRound",amt);break;
				case 110:A_GiveInventory("HDFragGrenadeAmmo",amt);break;
				case 111:A_GiveInventory("HDPistolAmmo",amt);break;
				case 112:A_GiveInventory("FourMilAmmo",amt);break;
				case 113:A_GiveInventory("SevenMilAmmo",amt);break;
				default:break;
			}
		}
		else{ //all other shit
			switch(num){
				case 1:
					A_TakeInventory("HDArmourWorn");
					A_GiveInventory("GreenArmourWorn");break;
				case 2:
					A_TakeInventory("HDArmourWorn");
					A_GiveInventory("BlueArmourWorn");break;
				case 3: A_GiveInventory("PortableRadsuit",amt);break;

				case 4: A_GiveInventory("PortableMedikit",amt);break;
				case 5: A_GiveInventory("PortableStimpack",amt);break;
				case 6: A_GiveInventory("PortableBerserkPack",amt);break;
				case 7: A_GiveInventory("PortableLadder",amt);break;
				case 8: A_GiveInventory("PortableLiteAmp");break;
				case 9: A_GiveInventory("HDBPPreset",999);break;
				case 10: A_GiveInventory("DERPUsable",amt);break;
				case 11: A_GiveInventory("HERPUsable",amt);break;
				case 12: A_GiveInventory("DoorBuster",amt);break;
				case 13: A_GiveInventory("HDIEDKit",amt);break;

				case 14: A_GiveInventory("MapRevealer",amt);break;
				case 15: A_GiveInventory("RedCard",amt);break;
				case 16: A_GiveInventory("BlueCard",amt);break;
				case 17: A_GiveInventory("YellowCard",amt);break;

				case 18: A_GiveInventory("GreenArmourWorn");break;
				case 19:
					if(!countinv("HDArmourWorn"))A_GiveInventory("BlueArmourWorn",HDCONST_BLUEARMOUR);
					break;
				case 99:
					A_GiveInventory("SoldierExtras",amt);
					return "HDPistol";
					break;
				default:break;
			}
		}
		return "";
	}
}








//experimental shit
//class CustomLoadoutGiver:CustomInventory{
class clg:CustomInventory{
	states{
	spawn:TNT1 A 0;stop;
	pickup:
		TNT1 A 0 GiveCustomItems();
		fail;
	}
	action void GiveCustomItems(){
		array<string> whichitem;whichitem.clear();
		array<int> howmany;howmany.clear();
		//string loadlist=cvar.getcvar("hd_loadout_custom",getplayernumber()).getstring();
//TESTING
string loadlist="9mm 1, 7mm 48, smg, 9mm 30, 915 2, smg 100, pis 2";
		loadlist.replace(" ","");
		loadlist.split(whichitem,",");
		for(int i=0;i<whichitem.size();i++){
			howmany.push((whichitem[i].mid(3,whichitem[i].length())).toint(10));
			whichitem[i]=whichitem[i].left(3);
		}
		weapon firstwep=null;
		for(int i=0;i<allactorclasses.size();i++){
			class<actor> reff=allactorclasses[i];
			if(reff is "HDPickup"||reff is "HDWeapon"){
				string ref;
				if(reff is "HDPickup")ref=getdefaultbytype((class<hdpickup>)(reff)).refid;
				else ref=getdefaultbytype((class<hdweapon>)(reff)).refid;
				if(ref~=="none"||ref=="")continue;
				for(int j=0;j<whichitem.size();j++){
					if(whichitem[j]~==ref){
						A_GiveInventory(reff.getclassname(),howmany[j]);
					}
				}
				if(!firstwep&&reff is "HDWeapon"){
					firstwep=weapon(findinventory((class<inventory>)(reff)));
				}
			}
		}
		if(firstwep&&player){
			player.readyweapon=firstwep;
			player.pendingweapon=firstwep;
		}
	}
}

//these constants need to be defined ONLY
//where an item needs to be selectable
//through custom loadouts.

const HDLD_NINEMIL="9mm";
const HDLD_NIMAG15="915";
const HDLD_NIMAG30="930";

const HDLD_SEVNMIL="7mm";
const HDLD_SEVNMAG="730";
const HDLD_SEVCLIP="710";

const HDLD_FOURMIL="4mm";
const HDLD_FOURMAG="450";

const HDLD_BATTERY="bat";
const HDLD_SHOTSHL="shl";
const HDLD_ROCKETS="rkt";
const HDLD_HEATRKT="rkh";
const HDLD_BROBOLT="brb";
const HDLD_GREFRAG="frg";

const HDLD_STIMPAK="stm";
const HDLD_MEDIKIT="med";
const HDLD_BERSERK="zrk";
const HDLD_RADSUIT="rad";
const HDLD_LITEAMP="lit";
const HDLD_LADDER= "lad";
const HDLD_DOORBUS="dbs";
const HDLD_BACKPAK="bak";

const HDLD_DERPBOT="drp";
const HDLD_HERPBOT="hrp";

const HDLD_ARMGREN="arg";
const HDLD_ARMBLUE="arb";
const HDLD_ARWGREN="awg";
const HDLD_ARWBLUE="awb";

const HDLD_CHAINSW= "cha";
const HDLD_PISTOL= "pis"; 
const HDLD_PISTAUT="pia";
const HDLD_SMG    ="smg";
const HDLD_HUNTER= "hun";
const HDLD_SLAYER= "sla";
const HDLD_ZM66GL= "z66";
const HDLD_ZM66AUT="z6a";
const HDLD_ZM66SMI="z6s";
const HDLD_VULCETT="vul";
const HDLD_LAUNCHR="lau";
const HDLD_BLOOPER="blo";
const HDLD_THUNDER="thu";
const HDLD_LIBGL=  "lib";
const HDLD_LIBNOGL="lbn";
const HDLD_BFG=    "bfg";
const HDLD_BRONTO= "bro";
const HDLD_BOSS=   "bos";

class loadoutcode:custominventory{
	states{
	pickup:
		TNT1 A 0{
			string lll="";
			bool first=true;
			for(inventory hdppp=inv;hdppp!=null;hdppp=hdppp.inv){
				let hdw=hdweapon(hdppp);
				let hdp=hdpickup(hdppp);
				string refid=(hdw?hdw.refid:hdp?hdp.refid:"");
				if(refid=="")continue;
				if(first){
					lll=refid.." "..hdppp.amount;
					first=false;
				}else if(hdw&&hdw==player.readyweapon){
					//readyweapon gets first position
					lll=hdw.refid.." 1, "..lll;
				}else{
					//append all items to end
					lll=lll..", "..refid.." "..hdppp.amount;
				}
			}
			A_Log("The loadout code for your current gear is:  "..lll,true);
		}fail;
	}
}





const HDCONST_BPMAX=1500;
class HDBackpack:HDWeapon{
	int index;

	array<string> nicenames;
	array<string> invclasses;

	array<string> amounts;
	//because the last time I tried nested dynamic arrays it did not work.
	//"10" for 10 rounds/medikits/whatever; "0 10 20" for 3 mags
	//"0 0 0 0 0 0 0 0" for a single weapon

	default{
		+inventory.invbar +weapon.wimpy_weapon
		+weapon.no_auto_switch
		weapon.selectionorder 1010;
		inventory.icon "BPAKA0";
		inventory.pickupmessage "Picked up a backpack to help fill your life with ammo!";
		inventory.pickupsound "weapons/pocket";

		hdweapon.nicename "Backpack";
		hdweapon.refid HDLD_BACKPAK;
	}
	override inventory createtossable(int amount){
		target=owner;
		let ct=hdbackpack(super.createtossable(amount));
		ct.weaponbulk();
		if(ct&&target&&ct.bulk>0){
			ct.target=target;
			ct.translation=target.translation;
		}
		return ct;
	}

	int bpindex;
	override void InitializeWepStats(bool idfa){
		if(idfa)return;
		for(int i=0;i<allactorclasses.size();i++){
			class<actor> reff=allactorclasses[i];
			string ref="";
			if(reff is "HDPickup")ref=getdefaultbytype((class<hdpickup>)(reff)).nicename;
			else if(reff is "HDWeapon")ref=getdefaultbytype((class<hdweapon>)(reff)).nicename;
			if(ref!=""){
				invclasses.push(reff.getclassname());
				nicenames.push(ref);
				amounts.push("");
			}
		}
		bpindex=invclasses.find(getclassname());
	}
	double bulk;
	override double,int weaponbulk(){
		double blk=0;
		for(int i=0;i<invclasses.size();i++){
			if(amounts[i]=="")continue;
			class<actor> reff=invclasses[i];
			array<string> theseamounts;
			if(((class<hdmagammo>)(reff))){
				amounts[i].split(theseamounts," ");
				let mmm=getdefaultbytype((class<hdmagammo>)(reff));
				bool armour=!!((class<HDArmour>)(reff));
				for(int j=0;j<theseamounts.size();j++){
					if(armour)blk+=theseamounts[j].toint()>=1000?ENC_BLUEARMOUR/2:ENC_GREENARMOUR;
					else blk+=mmm.magbulk+theseamounts[j].toint()*mmm.roundbulk;
				}
			}else if(((class<hdweapon>)(reff))){
				if(((class<inventory>)(reff)) is "HDPistol")blk+=30;
				else blk+=125;
			}else if(((class<hdpickup>)(reff))){
				let classref=((class<hdpickup>)(reff));
				//presets required for default ammos because of One Man Army
				double unitbulk;
				if(classref is "HDShellAmmo")unitbulk=ENC_SHELL;
				else if(classref is "FourMilAmmo")unitbulk=ENC_426;
				else if(classref is "SevenMilAmmo")unitbulk=ENC_776;
				else if(classref is "HDPistolAmmo")unitbulk=ENC_9;
				else if(classref is "HDRocketAmmo")unitbulk=ENC_ROCKET;
				else if(classref is "HDBattery")unitbulk=ENC_BATTERY;
				else if(classref is "BrontornisRound")unitbulk=ENC_BRONTOSHELL;
				else if(classref is "HEATAmmo")unitbulk=ENC_HEATROCKET;
				else if(classref is "HDFragGrenadeAmmo")unitbulk=ENC_FRAG;
				else unitbulk=getdefaultbytype(classref).bulk;
				blk+=amounts[i].toint()*unitbulk;
			}
		}
		bulk=blk;
		return max(blk*0.6,100),0;
	}
	void UpdateMessage(int num){
		int nnsiz=nicenames.size();
		int maxindex=nicenames.size()-1;
		if(num==index)weaponbulk();
		if(num!=index&&owner){
			int toadd=num>index?1:-1;
			do{
				index+=toadd;
				if(index>maxindex)index=0;
				else if(index<0)index=maxindex;
			}while(index!=bpindex&&amounts[index]==""&&(!owner.countinv(invclasses[index])));
		}else if(max(0-num,num-nnsiz)<maxindex){
			while(num<0)num+=nnsiz;
			while(num>maxindex)num-=nnsiz;
			index=num;
		}

		//translate "amounts" into an actual number of items
		string amt=amounts[index];
		let thisclass=((class<actor>)(invclasses[index]));
		if(amt=="")amt="\cunone";
		else if(thisclass is "HDWeapon"||thisclass is "HDMagAmmo"){
			array<string>mags;
			amt.split(mags," ");
			if(thisclass is "HDWeapon")amt="\ce"..(mags.size()/8);
			else amt="\ce"..mags.size();
		}else amt="\ce"..amt;

		//look for an actual amount on the player
		string ininv;
		if(!owner.countinv(invclasses[index]))ininv="\cunone";
		else ininv="\cc"..owner.countinv(invclasses[index]);
		string str="\n\cx"..nicenames[index].."\n"..amt.." in pack   "..ininv.." carried\n";

		if(hd_debug)str=str.."   \cu"..invclasses[index];
		int aaa=index;int bbb=index;
		for(int i=0;i<5;i++){
			aaa--;
			if(aaa<0)aaa=maxindex;
			bool has=(amounts[aaa]!=""||(owner&&owner.countinv(invclasses[aaa])));
			str=(has?"\cs":"")..nicenames[aaa].."\n"..str;
			bbb++;
			if(bbb>maxindex)bbb=0;
			has=(amounts[bbb]!=""||(owner&&owner.countinv(invclasses[bbb])));
			str=str.."\n"..(has?"\cs":"")..nicenames[bbb];
		}

		//display selected item name and amounts carried
		str="\cs[] [] [] \cbBackpack \cs[] [] []\nzoom=fast scroll  unload/reload=take/insert\n\n\n\n"
			..str
			.."\n\n\nTotal Bulk:\n\cf"..int(bulk);

		wepmsg=str;
	}
	//generic code for inserting into backpack
	int ItemToBackpack(inventory item){
		if(item==self&&amount<2)return 1;
		let wep=HDWeapon(item);
		let mag=HDMagAmmo(item);
		let pkup=HDPickup(item);
		if(!wep&&!pkup)return false;
		index=invclasses.find(item.getclassname());
		if(index>=invclasses.size())return 1;
		if(wep){
			if(wep.weaponbulk()+bulk>HDCONST_BPMAX){
				owner.A_Log("Your backpack is too full.",true);
				return 0;
			}
			string newwep=
				(amounts[index]==""?"":" ")..
				wep.weaponstatus[0].." "..
				wep.weaponstatus[1].." "..
				wep.weaponstatus[2].." "..
				wep.weaponstatus[3].." "..
				wep.weaponstatus[4].." "..
				wep.weaponstatus[5].." "..
				wep.weaponstatus[6].." "..
				wep.weaponstatus[7];
			amounts[index]=amounts[index]..newwep;
			item.amount--;if(item.amount<1)item.destroy();
			weaponbulk();
			UpdateMessage(index);
			return 12;
		}else if(mag){
			if(mag.magbulk+bulk>HDCONST_BPMAX){
				owner.A_Log("Your backpack is too full.",true);
				return 0;
			}
			int tookmag=mag.TakeMag(false);if(item.amount<1)item.destroy();
			if(amounts[index]=="")amounts[index]=""..tookmag;
			else amounts[index]=tookmag.." "..amounts[index];
		}else{
			int units=item.owner?1:item.amount;
			if(pkup.bulk*units+bulk>HDCONST_BPMAX){
				A_Log("Your backpack is too full.",true);
				return 0;
			}
			amounts[index]=""..amounts[index].toint()+units;
			item.amount-=units;if(item.amount<1)item.destroy();
		}
		weaponbulk();
		UpdateMessage(index);
		if(pkup.multipickup)return 4;else return 10;
	}
	//generic code for removing from backpack
	int RemoveFromBackpack(int which=-1,bool trytopocket=true){
		if(which<0||which>invclasses.size())which=index;
		if(amounts[which]=="")return 1;
		array<string>tempamounts;
		bool basicpickup=false;
		amounts[which].split(tempamounts," ");
		if(tempamounts.size()<1)return 1;
		int ticks=0;
		let wepth=(class<hdweapon>)(invclasses[which]);
		let thisclass=(class<hdpickup>)(invclasses[which]);
		if(wepth){
			if(!trytopocket||owner.countinv(wepth)){
				let newp=HDWeapon(spawn(wepth,owner.pos+(0,0,owner.height-12),ALLOW_REPLACE));
				newp.angle=angle;newp.A_ChangeVelocity(1,1,1,CVF_RELATIVE);
				for(int i=0;i<8;i++){
					newp.weaponstatus[i]=tempamounts[0].toint();
					tempamounts.delete(0);
				}
			}else{
				let newp=HDWeapon(owner.GiveInventoryType(wepth));
				for(int i=0;i<8;i++){
					newp.weaponstatus[i]=tempamounts[0].toint();
					tempamounts.delete(0);
				}
			}
			ticks=10;
		}
		if(thisclass){
			int thisamt=tempamounts[0].toint();
			if(thisclass is "HDMagAmmo"){
				if(trytopocket)HDMagAmmo.GiveMag(owner,thisclass,thisamt);
				else HDMagAmmo.SpawnMag(owner,thisclass,thisamt);
				tempamounts.delete(0);
			}else{
				basicpickup=true;
				thisamt--;
				tempamounts[0]=""..thisamt;
				if(!trytopocket||A_JumpIfInventory(thisclass,0,"null"))owner.A_DropItem(thisclass);
				else HDF.Give(owner,thisclass,1);
			}
			//allow continuous move for smaller items
			if(getdefaultbytype(thisclass).multipickup)ticks=6;else ticks=10;
		}
		//put the string back together
		string newamounts="";
		if(basicpickup){
			if(tempamounts[0].toint()>0)newamounts=tempamounts[0];
		}else{
			for(int i=0;i<tempamounts.size();i++){
				newamounts=newamounts..(i?" ":"")..tempamounts[i];
			}
		}
		amounts[index]=newamounts;
		UpdateMessage(index);
		return ticks;
	}
	//main interface
	action void A_BPReady(){
		if(pressingzoom()){
			int inputamt=player.cmd.pitch>>5;
			invoker.UpdateMessage(invoker.index-inputamt);
			HijackMouse();
		}
		int ttt=1;
		if(justpressed(BT_ATTACK))invoker.UpdateMessage(invoker.index-1);
		else if(justpressed(BT_ALTATTACK))invoker.UpdateMessage(invoker.index+1);
		else if(pressingreload()&&countinv(invoker.invclasses[invoker.index])){
			ttt=invoker.ItemToBackpack(findinventory(invoker.invclasses[invoker.index]));
		}else if(pressingunload()){
			ttt=invoker.RemoveFromBackpack(invoker.index,true);
		}else if(pressing(BT_ALTRELOAD)){
			invoker.RemoveFromBackpack(invoker.index,false);
			invoker.updatemessage(invoker.index+1);
			ttt=3;
			
		}
		A_SetTics(max(1,ttt));
		if(!pressing(BT_ALTRELOAD))A_WeaponMessage(invoker.wepmsg,ttt+1);
		A_WeaponReady(
			WRF_NOFIRE|WRF_ALLOWUSER3
			|((player.cmd.buttons&(BT_RELOAD|BT_UNLOAD|BT_USE))?WRF_DISABLESWITCH:0)
		);
	}
	states{
	spawn:
		BPAK ABC -1 nodelay{
			invoker.weaponbulk();
			if(!invoker.bulk)frame=1;
			else if(target){
				translation=target.translation;
				frame=2;
			}
			invoker.bno_auto_switch=false;
		}
	select0:
		TNT1 A 10{
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			if(invoker.bulk>(HDBPC_CAPACITY*0.7))A_SetTics(20);
			invoker.UpdateMessage(invoker.index);
		}goto super::select0;
	ready:
		TNT1 A 1 A_BPReady();
		goto readyend;
	nope:
		TNT1 A 0 A_WeaponMessage(invoker.wepmsg,5);
		goto super::nope;
	}
}
