// ------------------------------------------------------------
// Loadout-related stuff!
// ------------------------------------------------------------

//basic stuff every player should have
extend class HDPlayerPawn{
	void GiveBasics(){
		class<weapon> curr;
		if(player.readyweapon)curr=player.readyweapon.getclass();
		A_GiveInventory("Ring");
		A_GiveInventory("SelfBandage");
		A_GiveInventory("HDFragGrenades");
		A_GiveInventory("HDWeaponPurge");
		A_GiveInventory("HDDropOne");
		A_GiveInventory("Taunter");
		A_GiveInventory("HDDropArmour");

		//now for configs!
		if(getcvar("hd_startzoomed")){  
			A_GiveInventory("ZM66Zoom");
			A_GiveInventory("ChaingunZoom");
			A_GiveInventory("RocketZoom");
			A_GiveInventory("PlasmaZoom");
			A_GiveInventory("LiberatorZoom");
		}
		A_SetInventory("DERPMode",getcvar("hd_derpmode"));
		if(countinv("HDSMGChamber"))
			A_SetInventory("SMGFullAuto",getcvar("hd_smgfiremode"));
		if(getcvar("hd_pistauto")){
			if(countinv("HDPistolFullAuto"))
				A_GiveInventory("HDPistolFullAuto",2);
			if(countinv("HDSecondPistolFullAuto"))
				A_GiveInventory("HDSecondPistolFullAuto",2);
		}
		if(countinv("Hunter"))
			A_SetInventory("ShotgunAuto",getcvar("hd_huntauto"));
		if(countinv("ZM66Chamber")>0){  
			A_SetInventory("ZM66FullAuto",getcvar("hd_zmfiremode"));
			A_SetInventory("ZM66ZoomDegree",getcvar("hd_zmzoom"));
		}
		if(countinv("Vulcanette"))
			A_SetInventory("ChaingunFast",getcvar("hd_vulcsuper"));
		if(countinv("RocquetteLauncher")){  
			if(getcvar("hd_rlmode")==1){ //GL
				A_GiveInventory("IsUsingRocketUnderslung");
			}else if(getcvar("hd_rlmode")==2){ //HEAT
				A_TakeInventory("RocketMag",1);
				A_GiveInventory("HEATLoaded");
			}
		}
		if(countinv("LiberatorChamber")){
			A_SetInventory("LiberatorFullAuto",getcvar("hd_libauto"));
			A_SetInventory("LiberatorZoomDegree",getcvar("hd_libzoom"));
		}
		if(countinv("ThunderBuster")){
			if(getcvar("hd_tbmode"))A_GiveInventory("PlasmaAlt");
		}
		if(countinv("BossRifle")){
			A_SetInventory("BossZoomDegree",getcvar("hd_bosszoom"));
			A_SetInventory("BossMOA",getcvar("hd_bossmoa"));
		}

		//so you don't start out with the fist all the time
		if(player.readyweapon){
			weapon a=player.readyweapon;
			a.detachfromowner();
			a.attachtoowner(self);
		}
	}
}

//loadout common to all soldier classes
class SoldierExtras:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			A_SetInventory("PortableMedikit",max(1,countinv("PortableMedikit")));
			A_SetInventory("PortableStimpack",max(2,countinv("PortableStimpack")));
			if(
				!countinv("BlackArmour")
				&&!countinv("BlueArmour")
			)A_SetInventory("GreenArmour",HDCONST_GREENARMOUR);

			if(!countinv("HDPistol")){
				A_GiveInventory("HDPistol");
				A_GiveInventory("HDPistolLoaded",15);
				A_GiveInventory("HDPistolChamber");
			}
			else if(!countinv("HDSecondPistol")){
				A_GiveInventory("HDSecondPistol");
				A_GiveInventory("HDSecondPistolLoaded",15);
				A_GiveInventory("HDSecondPistolChamber");
			}
			A_SetInventory("HDPistolMag",max(countinv("HDPistolMag"),3));

			A_SetInventory("HDFragGrenadeAmmo",max(3,countinv("HDFragGrenadeAmmo")));
			A_SetInventory("DERPUsable",max(1,countinv("DERPUsable")));
		}
	}
}



//reset inventory
class InvReset:Inventory{
	void ReallyClearInventory(actor resetee,bool keepkeys=false){
		//can't just use ClearInventory since we want to get all the +undroppables too
		thinkeriterator it=thinkeriterator.create("Inventory");
		actor inv;
		while(
			inv=inventory(it.Next())
		){
			let invv=inventory(inv);
			if(
				invv
				&& (!keepkeys || !(inv is "Key"))
				&& invv.owner==resetee
			)invv.destroy();
		}
	}
	void GiveStartItems(actor resetee){
		//now get all the "dropitems" (i.e. player's startitems) and give them
		let drop=resetee.getdropitems();
		if(drop){
			for(dropitem di=drop;di;di=di.Next){
				if(di.Name=='None')continue;
				resetee.A_GiveInventory(di.Name,di.Amount);
			}
		}
	}
	override void attachtoowner(actor other){
		reallyclearinventory(other);
		givestartitems(other);
		goawayanddie();
		return;
	}
}
class DoomguyLoadout:InvReset{
	override void attachtoowner(actor other){
		reallyclearinventory(other,true);
		let d=HDPlayerPawn(self);
		if(d)d.GiveBasics();
		other.A_GiveInventory("HDPistol");
		other.A_GiveInventory("HDPistolLoaded",15);
		other.A_GiveInventory("HDPistolChamber");
		other.A_GiveInventory("HDPistolMag",2);
		other.A_GiveInventory("HDPistolAmmo",4);
		goawayanddie();
		return;
	}
}





/*
	CUSTOM LOADOUTS!
	000s: misc
	100s: weapons, in format 1xy: x=slot, y=priority
	200s: ammo, no spares allowed
*/
const HDCONST_CUSTOMWEPOFFSET=200;
class CustomLoadout:InventoryFlag{}
class CustomLoadoutWeaponSelector:IdleDummy{ //GROSS! HACK!!!
	class<weapon> newwep;
	states{
	spawn:
		TNT1 A 1;
		TNT1 A 0{
			if(master)master.A_SelectWeapon(newwep,SWF_SELECTPRIORITY);
		}stop;
	}
}
extend class HDPlayerPawn{
	void GiveCustomLoadout(){
		if(!countinv("CustomLoadout"))return;
		A_TakeInventory("CustomLoadout");
		int ldt;int lda;
		class<weapon> newwep;
		for(int i=100;i>=0;i--){ //reverse order so top weapons are added last
			ldt=getcvar(string.format("hd_load%i",i));
			lda=max(0,getcvar(string.format("hd_load%ia",i)));

			class<weapon> nw=NumForInv(ldt,lda);
			if(nw)newwep=nw;
		}
		if(newwep){
			//GROSS! HACK!!!
			actor a=spawn("CustomLoadoutWeaponSelector",pos);
			let aa=CustomLoadoutWeaponSelector(a);
			if(aa)aa.newwep=newwep;
			aa.master=self;
		}
	}
	class<weapon> NumForInv(int num,int amt){
		class<weapon> nw;
		if(!num||!amt)return null;
		else if(num>=HDCONST_CUSTOMWEPOFFSET){ //weapons
			num-=HDCONST_CUSTOMWEPOFFSET;
			switch(num){
			case 0:
				nw="HDFragGrenades";A_GiveInventory(nw);
				A_GiveInventory("HDFragGrenadeAmmo",max(1,amt));
				break;
			case 10:
				nw="Lumberjack";A_GiveInventory(nw);
				A_GiveInventory("LumberCell",99999);
				break;
			case 20:
			case 21:
				if(amt>1){
					if(num==21){
						A_GiveInventory("HDPistolFullAuto");
						A_GiveInventory("HDSecondPistolFullAuto");
					}else{
						A_TakeInventory("HDPistolFullAuto");
						A_TakeInventory("HDSecondPistolFullAuto");
					}
					A_GiveInventory("HDSecondPistol");
					A_GiveInventory("HDSecondPistolChamber");
					A_GiveInventory("HDSecondPistolLoaded",15);
					nw="HDPistol";A_GiveInventory(nw);
					A_GiveInventory("HDPistolChamber");
					A_GiveInventory("HDPistolLoaded",15);
				}else{
					PistolConsolidator();
					if(countinv("HDPistol")){
						A_GiveInventory("HDSecondPistol");
						A_GiveInventory("HDSecondPistolChamber");
						A_GiveInventory("HDSecondPistolLoaded",15);
						if(num==21){
							if(!countinv("HDPistolFullAuto"))
								A_GiveInventory("HDPistolFullAuto");
							else
								A_GiveInventory("HDSecondPistolFullAuto");
						}
					}else{
						nw="HDPistol";A_GiveInventory(nw);
						A_GiveInventory("HDPistolChamber");
						A_GiveInventory("HDPistolLoaded",15);
						if(num==21)A_GiveInventory("HDPistolFullAuto");
					}
				}
				break;
			case 22:
				nw="HDSMG";A_GiveInventory(nw);
				A_GiveInventory("HDSMGChamber");
				A_GiveInventory("HDSMGLoaded",30);
				break;
			case 30:
				nw="Slayer";A_GiveInventory(nw);
				A_GiveInventory("ShellChamber1");
				A_GiveInventory("ShellChamber2");
				A_GiveInventory("ShotgunQuickAmmo2",12);
				break;
			case 31:
				nw="Hunter";A_GiveInventory(nw);
				A_GiveInventory("ShotgunTube",8);
				A_GiveInventory("ShotgunQuickAmmo",12);
				break;
			case 40:
			case 41:
			case 42:
				if(num==40)nw="ZM66SemiRifle";
				else if(num==41)nw="ZM66Rifle";
				else if(num==42){
					nw="ZM66GrenadeRifle";
					A_GiveInventory("ZM66GLoaded");
				}
				A_GiveInventory("ZM66Chamber");
				A_GiveInventory("ZM66Loaded",50);
				A_GiveInventory(nw);
				break;
			case 43:
				nw="Vulcanette";A_GiveInventory(nw);
				A_GiveInventory("VulcJuice",99999);
				A_GiveInventory("VulcChamber5");
				A_GiveInventory("VulcChamber4");
				A_GiveInventory("VulcChamber3");
				A_GiveInventory("VulcLoaded1",47);
				A_GiveInventory("VulcLoaded2",50);
				A_GiveInventory("VulcLoaded3",50);
				A_GiveInventory("VulcLoaded4",50);
				A_GiveInventory("VulcLoaded5",50);
				break;
			case 50:
				nw="Blooper";A_GiveInventory(nw);
				A_GiveInventory("BloopChamber",1);
				break;
			case 51:
				nw="RocquetteLauncher";A_GiveInventory(nw);
				A_GiveInventory("RocketMag",6);
				break;
			case 60:
			case 61:
				if(num==60)nw="LiberatorRifle";
				else{
					nw="LiberatorGrenadeRifle";
					A_GiveInventory("LiberatorGrenadeChamber");
				}
				A_GiveInventory("LiberatorChamber");
				A_GiveInventory("LiberatorLoaded",30);
				A_GiveInventory(nw);
				break;
			case 62:
				nw="ThunderBuster";A_GiveInventory(nw);
				A_GiveInventory("PlasmaBattery",99999);
				break;
			case 70:
				nw="Brontornis";A_GiveInventory(nw);
				A_GiveInventory("BrontornisMag");
				break;
			case 71:
				nw="BFG9k";A_GiveInventory(nw);
				A_GiveInventory("BFGLoaded");
				A_GiveInventory("BFGChamber",99999);
				A_GiveInventory("BFGInternalCharge",99999);
				break;
			case 80:
				nw="BossRifle";A_GiveInventory(nw);
				A_GiveInventory("BossChamber");
				A_GiveInventory("BossMag",10);
				break;
			case 90:
				nw="HDMedikitter";A_GiveInventory(nw);
				break;
			default:
				break;
			}
			return nw;
		}
		else if(num>=100){ //ammo
			switch(num){
				case 100:A_GiveInventory("HDCellPacks",amt);break;
				case 101:A_GiveInventory("HDPistolMag",amt);break;
				case 102:A_GiveInventory("HDSMGMag",amt);break;
				case 103:A_GiveInventory("HDShellAmmo",amt);break;
				case 104:A_GiveInventory("ZM66RifleMags",amt);break;
				case 105:A_GiveInventory("HDRocketAmmo",amt);break;
				case 106:A_GiveInventory("HEATAmmo",amt);break;
				case 107:A_GiveInventory("LiberatorMag",amt);break;
				case 108:A_GiveInventory("BossClip",amt);break;
				case 109:A_GiveInventory("BrontornisRound",amt);break;
				case 110:A_GiveInventory("HDFragGrenadeAmmo",amt);break;
				default:break;
			}
		}
		else{ //all other shit
			switch(num){
				case 1:
					A_TakeInventory("BlackArmour");A_TakeInventory("BlueArmour");
					A_GiveInventory("GreenArmour",HDCONST_GREENARMOUR);break;
				case 2:
					A_TakeInventory("BlackArmour");A_TakeInventory("GreenArmour");
					A_GiveInventory("BlueArmour",HDCONST_BLUEARMOUR);break;
				case 3:
					A_TakeInventory("GreenArmour");A_TakeInventory("BlueArmour");
					A_GiveInventory("BlackArmour",HDCONST_BLACKARMOUR);break;

				case 4: A_GiveInventory("PortableMedikit",amt);break;
				case 5: A_GiveInventory("PortableStimpack",amt);break;
				case 6: A_GiveInventory("PortableBerserkPack",amt);break;
				case 7: A_GiveInventory("PortableRadsuit",amt);break;
				case 8:
					A_GiveInventory("PortableLiteAmp");
					break;
				case 9: A_GiveInventory("HDBackpack",amt);break;
				case 10: A_GiveInventory("DERPUsable",amt);break;
				case 11: A_GiveInventory("HERPUsable",amt);break;
				case 12: A_GiveInventory("HDIEDKit",amt);break;

				case 13: A_GiveInventory("MapRevealer",amt);break;
				case 14: A_GiveInventory("RedCard",amt);break;
				case 15: A_GiveInventory("BlueCard",amt);break;
				case 16: A_GiveInventory("YellowCard",amt);break;

				case 17:
					A_GiveInventory("StoredArmour",HDCONST_GREENARMOUR);
					A_GiveInventory("GreenArmourStored");
					break;
				case 18:
					A_GiveInventory("StoredArmour",HDCONST_BLUEARMOUR);
					A_GiveInventory("BlueArmourStored");
					break;
				case 19:
					A_GiveInventory("StoredArmour",HDCONST_BLACKARMOUR);
					A_GiveInventory("BlackArmourStored");
					break;
				case 99:
					A_GiveInventory("SoldierExtras",amt);
					return "HDPistol";
					break;
				default:break;
			}
		}
		return null;
	}
}