// ------------------------------------------------------------
// Loadout-related stuff!
// ------------------------------------------------------------
extend class HDPlayerPawn{
	//basic stuff every player should have
	void GiveBasics(){
		if(!player)return;
		A_GiveInventory("Ring");
		A_GiveInventory("SelfBandage");
		A_GiveInventory("HDFragGrenades");
		A_GiveInventory("HDWeaponPurge");
		A_GiveInventory("HDDropOne");
		A_GiveInventory("Taunter");
		A_GiveInventory("HDDropArmour");
		A_GiveInventory("MagManager");

		//now for configs!
		A_SetInventory("DERPMode",getcvar("hd_derpmode"));

		//so you don't start out with the fist all the time
		if(player.readyweapon){
			weapon a=player.readyweapon;
			a.detachfromowner();
			a.attachtoowner(self);
		}
	}
}

//loadout common to all soldier classes
class SoldierExtras:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			A_SetInventory("PortableMedikit",max(1,countinv("PortableMedikit")));
			A_SetInventory("PortableStimpack",max(2,countinv("PortableStimpack")));
			if(
				!countinv("BlueArmour")
			)A_SetInventory("GreenArmour",HDCONST_GREENARMOUR);

			if(!countinv("HDPistol"))A_GiveInventory("HDPistol");
			else if(!countinv("HDSecondPistol"))A_GiveInventory("HDSecondPistol");
			A_SetInventory("HDPistolMag",max(3,countinv("HDPistolMag")));

			A_SetInventory("HDFragGrenadeAmmo",max(3,countinv("HDFragGrenadeAmmo")));
			A_SetInventory("DERPUsable",max(1,countinv("DERPUsable")));
			A_SetInventory("PortableLadder",max(1,countinv("PortableLadder")));
		}fail;
	}
}



//reset inventory
class InvReset:Inventory{
	void ReallyClearInventory(actor resetee,bool keepkeys=false){
		for(inventory item=resetee.inv;item!=null;item=item.inv){
			if(
				(!keepkeys||!(item is "Key"))
			){
				item.destroy();
				item=resetee.inv;
			}
		}
	}
	void GiveStartItems(actor resetee){
		//now get all the "dropitems" (i.e. player's startitems) and give them
		let drop=resetee.getdropitems();
		if(drop){
			for(dropitem di=drop;di;di=di.Next){
				if(di.Name=='None')continue;
				resetee.A_GiveInventory(di.Name,di.Amount);
			}
		}
		let d=HDPlayerPawn(resetee);
		if(d)d.GiveBasics();
	}
	override void attachtoowner(actor other){
		reallyclearinventory(other);
		givestartitems(other);
		goawayanddie();
		return;
	}
}
class DoomguyLoadout:InvReset{
	override void attachtoowner(actor other){
		reallyclearinventory(other,true);
		let d=HDPlayerPawn(other);
		if(d)d.GiveBasics();
		other.A_GiveInventory("HDPistol");
		other.A_GiveInventory("HDPistolMag",2);
		other.A_GiveInventory("HDPistolAmmo",4);
		other.A_SelectWeapon("HDPistol");
		goawayanddie();
		return;
	}
}





/*
	CUSTOM LOADOUTS!
	000s: misc
	100s: weapons, in format 1xy: x=slot, y=priority
	200s: ammo, no spares allowed
*/
const HDCONST_CUSTOMWEPOFFSET=200;
class CustomLoadout:InventoryFlag{
	override void tick(){
		let hdp=HDPlayerPawn(owner);
		if(hdp){
			hdp.GiveCustomLoadout();
			hdp.GiveBasics();
		}destroy();
	}
}
extend class HDPlayerPawn{
	void GiveCustomLoadout(){
		int ldt;int lda;
		name newwep="";
		for(int i=100;i>=0;i--){ //reverse order so top weapons are added last
			ldt=getcvar(string.format("hd_load%i",i));
			lda=max(0,getcvar(string.format("hd_load%ia",i)));

			name nw=NumForInv(ldt,lda);
			if(nw!="")newwep=nw;
		}
		if(player && newwep!=""){
			player.pendingweapon=weapon(findinventory(newwep));
			return;
		}
	}
	name NumForInv(int num,int amt){
		name nw="";
		if(!num||!amt)return "";
		else if(num>=HDCONST_CUSTOMWEPOFFSET){ //weapons
			num-=HDCONST_CUSTOMWEPOFFSET;
			switch(num){
			case 0:
				nw="HDFragGrenades";A_GiveInventory(nw);
				A_GiveInventory("HDFragGrenadeAmmo",max(1,amt));
				break;
			case 10:
				nw="Lumberjack";A_GiveInventory(nw);
				break;
			case 20:
			case 21:
				int which=0;
				if(amt>1){
					A_GiveInventory("HDSecondPistol");
					nw="HDPistol";A_GiveInventory(nw);
					which=3;
				}else{
					if(countinv("HDPistol")){
						A_GiveInventory("HDSecondPistol");
						which=2;
					}else{
						nw="HDPistol";A_GiveInventory(nw);
						which=1;
					}
				}
				if(num==21){
					if(which!=2)hdpistol(findinventory("HDPistol")).weaponstatus[PISS_AUTO]=0;
					if(which>1&&countinv("HDSecondPistol"))hdsecondpistol(findinventory("HDSecondPistol")).weaponstatus[PISS_AUTO]=0;
				}
				break;
			case 22:
				nw="HDSMG";A_GiveInventory(nw);
				break;
			case 30:
				nw="Slayer";A_GiveInventory(nw);
				break;
			case 31:
				nw="Hunter";A_GiveInventory(nw);
				break;
			case 40:
			case 41:
			case 42:
				nw="ZM66AssaultRifle";
				let zzz=hdweapon(spawn("ZM66AssaultRifle",pos));
				if(zzz){
					if(num<42){
						zzz.weaponstatus[0]|=ZM66F_NOLAUNCHER;
						if(num==40)zzz.weaponstatus[0]|=ZM66F_NOFIRESELECT;
					}
				}
				zzz.AttachToOwner(self);
				break;
			case 43:
				nw="Vulcanette";A_GiveInventory(nw);
				break;
			case 50:
				nw="Blooper";A_GiveInventory(nw);
				break;
			case 51:
				nw="HDRL";A_GiveInventory(nw);
				break;
			case 60:
			case 61:
				nw="LiberatorRifle";
				let llb=hdweapon(spawn("LiberatorRifle",pos));
				if(llb){
					if(num==60){
						llb.weaponstatus[0]|=LIBF_NOLAUNCHER;
					}
				}
				llb.AttachToOwner(self);
				break;
			case 62:
				nw="ThunderBuster";A_GiveInventory(nw);
				break;
			case 70:
				nw="Brontornis";A_GiveInventory(nw);
				break;
			case 71:
				nw="BFG9k";A_GiveInventory(nw);
				break;
			case 80:
				nw="BossRifle";A_GiveInventory(nw);
				break;
			case 90:
				nw="HDMedikitter";A_GiveInventory(nw);
				break;
			default:
				break;
			}
			return nw;
		}
		else if(num>=100){ //ammo
			switch(num){
				case 100:A_GiveInventory("HDCellPacks",amt);break;
				case 101:A_GiveInventory("HDPistolMag",amt);break;
				case 102:A_GiveInventory("HDSMGMag",amt);break;
				case 103:A_GiveInventory("HDShellAmmo",amt);break;
				case 104:A_GiveInventory("ZM66RifleMags",amt);break;
				case 105:A_GiveInventory("HDRocketAmmo",amt);break;
				case 106:A_GiveInventory("HEATAmmo",amt);break;
				case 107:A_GiveInventory("LiberatorMag",amt);break;
				case 108:A_GiveInventory("BossClip",amt);break;
				case 109:A_GiveInventory("BrontornisRound",amt);break;
				case 110:A_GiveInventory("HDFragGrenadeAmmo",amt);break;
				default:break;
			}
		}
		else{ //all other shit
			switch(num){
				case 1:
					A_TakeInventory("BlueArmour");
					A_SetInventory("GreenArmour",HDCONST_GREENARMOUR);break;
				case 2:
					A_TakeInventory("GreenArmour");
					A_SetInventory("BlueArmour",HDCONST_BLUEARMOUR);break;
				case 3: A_GiveInventory("PortableRadsuit",amt);break;

				case 4: A_GiveInventory("PortableMedikit",amt);break;
				case 5: A_GiveInventory("PortableStimpack",amt);break;
				case 6: A_GiveInventory("PortableBerserkPack",amt);break;
				case 7: A_GiveInventory("PortableLadder",amt);break;
				case 8:
					A_GiveInventory("PortableLiteAmp");
					break;
				case 9: A_GiveInventory("HDBPPreset",999);break;
				case 10: A_GiveInventory("DERPUsable",amt);break;
				case 11: A_GiveInventory("HERPUsable",amt);break;
				case 12: A_GiveInventory("HDIEDKit",amt);break;

				case 13: A_GiveInventory("MapRevealer",amt);break;
				case 14: A_GiveInventory("RedCard",amt);break;
				case 15: A_GiveInventory("BlueCard",amt);break;
				case 16: A_GiveInventory("YellowCard",amt);break;

				case 17:
					A_GiveInventory("StoredArmour",HDCONST_GREENARMOUR);
					A_GiveInventory("GreenArmourStored");
					break;
				case 18:
					A_GiveInventory("StoredArmour",HDCONST_BLUEARMOUR);
					A_GiveInventory("BlueArmourStored");
					break;
				case 99:
					A_GiveInventory("SoldierExtras",amt);
					return "HDPistol";
					break;
				default:break;
			}
		}
		return "";
	}
}
