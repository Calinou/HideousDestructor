// ------------------------------------------------------------
// The heart
// ------------------------------------------------------------

extend class HDPlayerPawn{
	const HDCONST_MINHEARTTICS = 5; //35/5*60=420 beats per minute!
	int beatcount;
	int beatmax;
	int beatcap;
	int beatcounter;

	int bloodpressure;

	int stimcount;
	int regenblues;
	int regenbers;

	int woundcount;
	int burncount;
	int unstablewoundcount;
	int oldwoundcount;
	int aggravateddamage;

	void HeartTicker(){

		if(bkilled) return; //don't really need this...
		A_SetInventory("HeartBeatCounter",beatcount); //for sbarinfo

		//zerk!!!!
		if(regenbers){
			regenbers--;
			healthing(1);
		}else if(countinv("PowerStrength") && !countinv("RegenBers"))A_TakeInventory("PowerStrength");

		//MY ORIFICE IS BLEEDING!!!
		if(woundcount){
			if(random(1,35+bloodpressure)<=woundcount)
			damagemobj(self,null,1,"bleedout",DMG_THRUSTLESS);
		}

		//good old jitters!
		if(
			bloodpressure>20||
			health<33
		){
			double jitter=0.3;
			if(health<20) jitter=1;
			A_SetPitch(pitch+frandom(-jitter,jitter),true);
			A_SetAngle(angle+frandom(-jitter,jitter),true);
		}

		//on every beat
		if(beatcount>0){
			beatcount--;
			pitch-=0.00001*beatcount*bloodpressure;
		}else{
			beatmax=min(beatmax,beatcap);

			//remove these once we're done with them
			//lethal didn't mean the same as oldwoundcount but oh well
			if(countinv("WoundCount")){
				woundcount+=countinv("WoundCount");
				A_TakeInventory("WoundCount");
			}
			if(countinv("RegenBlues")){
				regenblues+=countinv("RegenBlues");
				A_TakeInventory("RegenBlues");
			}
			if(countinv("RegenBers")){
				regenbers+=countinv("RegenBers")*4;
				A_TakeInventory("RegenBers");
			}
			if(countinv("RegenStims")){
				stimcount+=countinv("RegenStims");
				A_TakeInventory("RegenStims");
			}
			if(countinv("AggravatedDamage")){
				aggravateddamage+=countinv("AggravatedDamage");
				A_TakeInventory("AggravatedDamage");
			}
			if(countinv("LethalDamage")){
				oldwoundcount+=countinv("LethalDamage");
				A_TakeInventory("LethalDamage");
			}

			//limit beatmax
			if(countinv("PowerStrength")) beatmax=clamp(beatmax,4,14);
			else beatmax=clamp(beatmax,HDCONST_MINHEARTTICS,35);

			if(beatmax<8)DamageMobj(self,self,1,"internal");
			else{
				if(health<100-aggravateddamage-burncount-oldwoundcount-unstablewoundcount)
				healthing(1);
			}

			//reset beatcount, subject to stims
			if(stimcount) beatcount=beatmax-random(1,2);
				else beatcount=beatmax;
			A_SetBlend("66 10 12",0.3-0.3*(health*0.01),beatcount);
			pitch+=0.002*beatcount*(1+(35-beatmax));
			beatcounter++;

			//sprinting
			if(cansprint && runwalksprint>0){
				beatmax--;
				if(beatmax<=HDCONST_SPRINTMAXHEARTRATE)beatmax-=10;
			}

			//blood pressure
			if(stimcount>0 && bloodpressure<12)bloodpressure++;
			if(stimcount<1 && bloodpressure>0)bloodpressure--;

			//magical healing stops imminent danger first
			if(regenblues>0 && woundcount>0){
				A_TakeInventory("WoundCount",1);
				woundcount--;
				regenblues--;
			}

			//don't go negative wound
			if(woundcount<0)woundcount=0;

			if(beatcounter%4==0){	//every 4 beats
				//recovering heart rate
				if(beatmax<beatcap) beatmax++;
				if(bloodpressure>0)bloodpressure--;
			}
			if(beatcounter%12==0){	//every 12 beats
				if(stimcount>0)stimcount--;
				if(regenblues>0 && oldwoundcount+aggravateddamage>0){
					oldwoundcount-=2;aggravateddamage--;
					regenblues--;
					if(oldwoundcount<0)oldwoundcount=0;
					if(aggravateddamage<0)aggravateddamage=0;
				}
			}
			if(beatcounter%20==0){	//every 20 beats
				beatcap=clamp(beatcap+8,1,35);

				//updating beatcap (minimum heart rate)
				if(health<40) beatcap=clamp(beatcap,1,24);
				else if(health<60) beatcap=clamp(beatcap,1,32);
				if(woundcount>10) beatcap=clamp(beatcap,1,12);    
				else if(woundcount>5) beatcap=clamp(beatcap,1,24);

				//keep stim below cap as long as it's above 12
				if(stimcount>0 && beatcap>12)    
					beatcap=clamp(beatcap,12,beatcap-1);

				if(unstablewoundcount && countinv("IsMoving")>random(0,12)){
					unstablewoundcount--;
					if(!random(0,1))oldwoundcount++;else woundcount++;
				}
			}
			if(beatcounter==120){	//every 120 beats
				beatcounter=0;	//reset
				if(random(70,health)==100-aggravateddamage)oldwoundcount--;
			}
		}
	}
}



class BleedOutAI:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			damagemobj(self,null,1,"bleedout",DMG_THRUSTLESS);
			if(hd_debug)A_Log("Deprecated bleedout.");
		}fail;
	}
}
