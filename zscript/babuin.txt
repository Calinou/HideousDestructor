// ------------------------------------------------------------
// "I call the big one Bitey!"
// ------------------------------------------------------------
class ZBabuin:HDActor{
	vector3 lastpos;
	vector3 latchpos;
	double targangle;
	bool latched;
	double latchforce;
	override void postbeginplay(){
		hdmobai.resize(self,0.8,1.4);
		super.postbeginplay();
	}
	void TryLatch(){
		if(
			!target
			||target.health<1
			||distance3d(target)-target.radius-radius>12
		){
			latched=false;
			return;
		}else{
			latched=true;
			bnotargetswitch=true;
			latchpos.xy=
				rotatevector(pos.xy-target.pos.xy,-target.angle).unit()
				*(target.radius+radius)
			;
			latchpos.z=random(8,target.height-12);
			targangle=target.angle;
			latchforce=min(0.4,mass*0.02/max(1,target.mass));
			lastpos=pos;
			setstatelabel("latched");
		}
	}
	void A_BabuMove(bool wander=false){
		if(wander)A_Wander();else A_Chase();
	}
	override bool cancollidewith(actor other,bool passive){
		return(
			other!=target
			||(
				!latched
				&&max(
					abs(other.pos.x-pos.x),
					abs(other.pos.y-pos.y)
				)>=other.radius+radius
			)
		);
	}
	override void Die(actor source,actor inflictor,int dmgflags=0){
		latched=false;
		bnoclip=false;
		super.Die(source,inflictor,dmgflags);
	}
	override void Tick(){
		if(!latched||!target||target.health<1){
			latched=false;
			bnotargetswitch=false;
		}
		if(latched){
			A_FaceTarget();
			vector3 lp=target.pos;
			targangle=(targangle+target.angle)*0.5;
			lp.xy+=rotatevector(latchpos.xy,target.angle);
			latchpos.z=clamp(latchpos.z+random(-2,2),12,target.height-12);
			lp.z+=latchpos.z+frandom(-0.1,0.1);

			//don't interpolate teleport
			if(
				abs(lp.x-pos.x)>100||
				abs(lp.y-pos.y)>100||
				abs(lp.z-pos.z)>100
			){
				setorigin(lp,false);
			}else setorigin((lp+pos)*0.5,true);

			//can try to bump or shake it off
			if(
//				abs(HDMath.AngleChange(targangle,target.angle))>random(30,180)||
				abs(deltaangle(target.angle,targangle))>random(30,180)||
				floorz>pos.z||  
				ceilingz<pos.z+height||
				(!trymove(pos.xy,true)&&(
						blockingmobj!=target
					)
				)
			){
				latched=false;
				A_FaceTarget(0,0);
				A_ChangeVelocity(-6,random(-2,2),4,CVF_RELATIVE);
			}else{
				//fun!
				target.A_SetAngle(frandom(
					target.angle,targangle)+random(-8,8),SPF_INTERPOLATE
				);
				target.A_SetPitch(target.pitch+random(-6,10),SPF_INTERPOLATE);
				target.vel+=(pos-lastpos)*latchforce;
				lastpos=pos;
				//lift the victim as circumstances permit
				if(
					floorz>=pos.z
					&&mass>target.mass
				){
					target.addz(random(-1,2),true);
				}
			}
		}
		super.Tick();
	}
	states{
	latched:
		#### EF random(1,2){
			if(latched){
				if(!random(0,30))A_Pain();
				target.damagemobj(
					self,self,random(0,1),"teeth"
				);
			}else{
				setstatelabel("pain");
			}
		}loop;
	}
}