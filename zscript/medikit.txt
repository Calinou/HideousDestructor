//-------------------------------------------------
// Medikit
//-------------------------------------------------

class PortableMedikit:HDPickup{
	default{
		inventory.maxamount 8;
		inventory.pickupmessage "Picked up a medikit.";
		inventory.icon "PMEDA0";
		missiletype "PortableMedikitPickup";
	}
	states{
	use:
		TNT1 A 0{
			let md=HDMedikitter(FindInventory("HDMedikitter"));
			if(!md || md.usedflesh || md.usedpatches){
				A_TakeInventory("HDMedikitter");
				A_GiveInventory("HDMedikitter");
				A_TakeInventory("PortableMedikit",1);
			}
			A_SelectWeapon("HDMedikitter");
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
		}
		fail;
	}
}
class PortableMedikitPickup:HDUPK replaces PortableMedikit{
	default{
		activesound "weapons/pocket";
		hdupk.pickuptype "PortableMedikit";
		accuracy 2;
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(vel==(0,0,0)){
			stamina=1;
			A_GiveInventory("PortableStimpack",1);
		}
		if(stamina>1){
			scale=(0.51,0.39);
		}else{
			stamina=1;
			scale=(0.4,0.4);
		}
	}
	states{
	spawn:
		MEDI A -1 A_Stop();
	}
	override void A_HDUPKGive(){
		if(target && countinv("PortableStimpack")){
			int cur=target.countinv("PortableStimpack");
			target.A_GiveInventory("PortableStimpack",countinv("PortableStimpack"));
			int sub=target.countinv("PortableStimpack")-cur;
			if(sub)A_TakeInventory("PortableStimpack",sub);
			angle=target.angle;
			while(countinv("PortableStimpack")){
				A_TakeInventory("PortableStimpack",1);
				A_SpawnItemEx("PortableStimpack",0,0,0,3,0,1,0,SXF_NOCHECKPOSITION);
			}
		}
		super.A_HDUPKGive();
	}
}

class HDWoundFixer:HDWeapon{
	default{
		+weapon.wimpy_weapon +weapon.no_auto_switch
	}
	int checkwoundcount(bool checkunstable=false){
		let slf=HDPlayerPawn(owner);
		if(slf){
			if(checkunstable)return slf.woundcount+slf.unstablewoundcount;
			else return slf.woundcount;
		}
		return 0;
	}
}
class HDMedikitter:HDWoundFixer{
	default{
		+inventory.untossable +weapon.cheatnotweapon
		weapon.slotnumber 9;
	}
	bool useonother;
	bool usedflesh;
	int usedpatches;
	void patchwound(int amt,actor targ){
		let slf=HDPlayerPawn(targ);
		if(!slf)return;
		int wound=max(slf.woundcount,0);
		int unstablewound=max(slf.unstablewoundcount,0);
		if(wound){
			amt=min(amt,wound);
			slf.woundcount-=amt;
		}else if(unstablewound){
			amt=min(amt,unstablewound);
			slf.unstablewoundcount-=amt;
		}else amt=0;
		slf.oldwoundcount+=amt;
	}
	states{
	select:
		TNT1 A 0{
			if(invoker.usedflesh && invoker.usedpatches>100) A_SelectWeapon("SelfBandage");
		}
		TNT1 A 10{
			if(!getcvar("hd_helptext")) return;
			if(invoker.checkwoundcount())A_Print("Press and hold Fire\n\nto try to not die.",5);
			else A_Print("Use this to patch yourself up.\n\n\n\nYou're fine now, so go\n\ndo something else.\n\n\n\n(Altfire deploys that nasty accelerated healing thing.\nwhile fire mode runs a diagnostic.)",5);
		}
		goto super::select;
	reload:
		TNT1 A 14{A_GiveInventory("HDDropArmourRTFN");}
		goto nope;
	flashstaple:
		TNT1 A 1{
			A_PlaySound("weapons/pistol",CHAN_WEAPON);
			A_PlaySound("misc/smallslop",CHAN_BODY);
			invoker.patchwound(1,self);
		}goto flashend;
	flashtampon: //heh
		TNT1 A 1{
			A_PlaySound("misc/punch",CHAN_WEAPON);
			A_PlaySound("misc/bulletflesh",CHAN_BODY);
			invoker.patchwound(random(1,3),self);
		}goto flashend;
	flashend:
		TNT1 A 1{
			damagemobj(invoker,self,1,"smallarms0");
			HealThing(1);
			A_ZoomFactor(0.98);
			A_ChangeVelocity(frandom(-1,0.1),frandom(-1,1),0.5,CVF_RELATIVE);
		}
		TNT1 A 1 A_ZoomFactor(0.99);
		TNT1 A 1 A_ZoomFactor(1);
		stop;
	zoom:
		TNT1 A 1{
			if(invoker.useonother){
				invoker.useonother=false;
				A_Print("Using this on yourself.");
			}else{
				invoker.useonother=true;
				A_Print("Using this on someone else.");
			}
		}goto nope;
	fireother:
		TNT1 A 10{
			actor a;int b;
			[a,b]=LineAttack(angle,42,pitch,0,"none",
				"NewBulletMovePuff",flags:LAF_NORANDOMPUFFZ|LAF_NOINTERACT
			);
			let c=HDPlayerPawn(a.tracer);
			if(!c){
				A_Print("Nothing to be done here.\n\nHeal thyself? (press zoom)",2);
				return resolvestate("nope");
			}
			if(c.countinv("IsMoving")>4){
				c.A_Print(string.format("Stop squirming!\n\n%s is trying to heal you\n\nnot bugger you...",player.getusername()));
				A_Print("You'll need them to stay still...");
				return resolvestate("nope");
			}
			if(!c.countinv("IsBot") && c.countinv("GreenArmour")+c.countinv("BlueArmour")+c.countinv("BlackArmour")){
				A_Print("Get them to take off their armour first!\n\n(\cdhd_strip\c- in the console)");
				return resolvestate("nope");
			}
			if(!(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK) && c.woundcount+c.unstablewoundcount<1){
				A_Print("They're not bleeding.");
				return resolvestate("nope");
			}
			if(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK && c.burncount+c.oldwoundcount<1){
				A_Print("They have no injuries to treat.");
				return resolvestate("nope");
			}
			if(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK && invoker.usedflesh){
				A_Print("You have no Second Flesh to apply.");
				return resolvestate("nope");
			}
			invoker.target=c;
			return resolvestate("applythatshit");
		}goto nope;
	applythatshit:
		TNT1 A 0 A_JumpIf(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK,"applythathotshit");
		TNT1 A 0{invoker.usedpatches++;}
		TNT1 A 0 A_Jump(112,"applythatstaplershit");
	applythatinjectorshit:
		TNT1 A 10{
			if(invoker.target){
				invoker.target.A_PlaySound("misc/punch",CHAN_WEAPON);
				invoker.target.A_PlaySound("misc/bulletflesh",CHAN_BODY);
				invoker.patchwound(random(1,3),invoker.target);
				invoker.target.damagemobj(invoker,self,-1,"none");
				invoker.target.damagemobj(invoker,self,1,"smallarms0");
			}
		}goto patchupend;
	applythatstaplershit:
		TNT1 AAAAA 3{
			A_PlaySound("weapons/pistol",CHAN_WEAPON);
			if(invoker.target){
				invoker.target.A_PlaySound("misc/smallslop",CHAN_BODY);
				invoker.patchwound(1,invoker.target);
				if(!random(0,3))invoker.setstatelabel("patchupend");
				invoker.target.damagemobj(invoker,self,-1,"none");
				invoker.target.damagemobj(invoker,self,1,"smallarms0");
			}
		}goto patchupend;
	applythathotshit:
		TNT1 A 10{
			if(invoker.target){
				invoker.usedflesh=true;
				invoker.target.A_PlaySound("misc/punch",CHAN_WEAPON);
				invoker.target.A_PlaySound("misc/bulletflesh",CHAN_BODY);
				invoker.target.A_PlaySound("misc/smallslop",CHAN_VOICE);
				actor a=spawn("SecondFleshBeast",invoker.target.pos);
				a.target=invoker.target;
				a.stamina=15;
			}
		}
		goto nope;
	altfire:
		TNT1 A 0{
			if(invoker.usedflesh){
				A_Print("You are out of Second Flesh.");
				A_Refire("nope");
			}else A_Refire("althold");
		}
	fire:
		TNT1 A 0{
			if(invoker.usedpatches>100){
				A_Print("You are out of Auto-Sutures.");
				A_Refire("nope");
			}else A_Refire("hold");
		}
	hold:
	althold:
		TNT1 A 0 A_JumpIf(invoker.useonother,"fireother");
		TNT1 A 1{
			if(countinv("GreenArmour")+countinv("BlueArmour")+countinv("BlackArmour")){
				if(getcvar("hd_autostrip"))A_GiveInventory("HDDropArmourRTFN");
				else{
					A_Print("Take off your armour first!\n\n(\cdhd_strip\c- in the console\n\nor hit reload)");
					A_Refire("nope");
				}
			}
		}
		TNT1 A 1;
		TNT1 A 0{
			if(pitch<60){
				A_SetPitch(pitch+8,SPF_INTERPOLATE);
				A_Refire();
			}
			else if(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK){
				let a=HDPlayerPawn(self);
				if(a){
					if(a.oldwoundcount+a.burncount+a.unstablewoundcount<1){
						A_Print("You have no stabilized injuries to treat.");
						A_Refire("nope");
					}else{
						A_Refire("secondflesh");
					}
				}
			}else{
				if(invoker.usedpatches>100){
					A_Print("You are out of Auto-Sutures.");
					A_Refire("nope");
				}else if(!invoker.checkwoundcount(true)){
					A_Print("You are not bleeding.");
					A_Refire("nope");
				}
				else A_Refire("patchup");
			}
		}
		goto nope;
	patchup:
		TNT1 A 10;
		TNT1 A 0{invoker.usedpatches++;}
		TNT1 A 0 A_Jump(112,"stapler");
	injector:
		TNT1 A 0 A_Overlay(3,"flashtampon");
		goto patchupend;
	stapler:
		TNT1 AAAAA random(4,5){
			A_Overlay(3,"flashstaple");
			if(!random(0,3))invoker.setstatelabel("patchupend");
		}goto patchupend;
	patchupend:
		TNT1 A 10;
		TNT1 A 0 A_Refire();
		goto ready;
	secondflesh:
		TNT1 A 10;
		TNT1 A 10{
			if(!(self is "HDPlayerPawn"))return;
			invoker.usedflesh=true;
			A_PlaySound("misc/punch",CHAN_WEAPON);
			A_PlaySound("misc/bulletflesh",CHAN_BODY);
			A_PlaySound("misc/smallslop",CHAN_VOICE);
			actor a=spawn("SecondFleshBeast",pos);
			a.target=self;
			a.stamina=100;
		}
		goto nope;
	firemode:
		TNT1 A 0 A_Print("\cdMedikit Auto-Diagnostic Tool engaged.\n\n\ccScanning, please wait...");
		TNT1 AAAAAAAAAAAA 2{
			A_PlaySound("weapons/plasidle",CHAN_WEAPON,0.4);
			A_SetBlend("aa aa 88",0.04,1);
		}
		TNT1 A 0{
			A_PlaySound("misc/i_pkup",CHAN_WEAPON);
			let slf=HDPlayerPawn(self);
			if(!slf){
				if(hd_debug)A_Log("how are you not an hdplayerpawn");
				return;
			}
			int uw=slf.unstablewoundcount;
			int ww=slf.woundcount;
			int ow=slf.oldwoundcount;
			int bb=slf.burncount;
			int ag=slf.aggravateddamage*0.2+countinv("IsMoving");
			int wg=0;
			if(ww||uw)wg+=2;
			if(countinv("GreenArmour")+countinv("BlueArmour")+countinv("BlackArmour"))wg+=5;
			ow=max(ow+random(-ag,ag),0);
			bb=max(bb+random(-ag,ag),0);
			uw=max(uw+random(-wg,wg),0);
			ww=max(ww+random(-wg,wg),0);
			A_Print(string.format("Medikit Auto-Diagnostic complete.

			Status report:

			\ccOpen wounds: \cg%u%%

			\ccWounds temporarily bandaged: \ca%u%%
			\ccWounds already treated: \cd%u%%
			\ccBurns: \cq%u%%

			\cu(all numbers are based on %% of minimum
			\cuconsidered to be lethal in all situations.)",
			ww,uw,ow,bb),8);
		}
		goto nope;
	}
}
class SecondFleshBeast:IdleDummy{
	states{
	spawn:
		TNT1 A 30;
		TNT1 A 12{target.A_Scream();}
		TNT1 A 4{
			let tgt=HDPlayerPawn(target);
			if(!tgt || tgt.bkilled || stamina<1){destroy();return;}
			if(tgt.health>10)tgt.damagemobj(tgt,tgt,min(tgt.health-10,10),"internal",DMG_NO_ARMOR);
			tgt.A_Pain();
			tgt.stunned+=10;
			if(!random(0,7))tgt.oldwoundcount--;
			else if(!random(0,4))tgt.burncount--;
			else if(tgt.unstablewoundcount && !random(0,2)){
				tgt.unstablewoundcount--;
				tgt.aggravateddamage++;
			}
			if(!random(0,999))tgt.aggravateddamage++;
			stamina--;
		}wait;
	}
}


class SelfBandage:HDWoundFixer{
	default{
		weapon.slotnumber 9; weapon.selectionorder 999;
	}
	void patchwound(int amt,actor targ){
		let slf=HDPlayerPawn(targ);
		if(!slf)return;
		int wound=max(slf.woundcount,0);
		amt=min(amt,wound);
		if(wound){
			amt=min(amt,wound);
			slf.woundcount-=amt;
			slf.unstablewoundcount+=amt;
		}
	}
	int targetlock;
	states{
	select:
		TNT1 A 0{
			if(!getcvar("hd_helptext")) return;
			if(invoker.checkwoundcount())A_Print("Press and hold Fire\n\nwhile standing still\n\nto try to not die.",5);
			else A_Print("Use this to bandage yourself\n\nwhen you have no meds.\n\n\n\nYou're fine now, so go\n\ndo something else.\n\n\n\n(Altfire can still be used to \n\nbandage someone else, of course.)",5);
		}
		goto super::select;
	silentselect:
		TNT1 A 0;
		goto super::select;
	abort:
		TNT1 A 0{
			if(getcvar("hd_helptext"))A_Print("You must stay still\n\nto bandage yourself!",5);
		}goto nope;
	fire:
		TNT1 A 0 A_JumpIf(invoker.checkwoundcount(),"hold");
		TNT1 A 0{
			if(getcvar("hd_helptext"))A_Print("You have no\n\ninjuries to bandage.",5);
		}goto nope;
	hold:
	lower:
		TNT1 A 0 A_JumpIf(pitch>89,2);
		TNT1 A 0 A_JumpIf(pitch<45,1);
		goto try;
		TNT1 A 1 A_SetPitch(pitch+6,SPF_INTERPOLATE);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("lower");
		goto ready;
	try:
		TNT1 A random(15,25);
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,15),0);
		TNT1 A 0 A_GiveInventory("Fatigue",4);
		TNT1 A 0 A_Jump(32,2);
		TNT1 A random(5,15) A_GiveInventory("BleedOutAI",1);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
	try2:
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,15),0);
		TNT1 A 0 A_GiveInventory("Fatigue",4);
		TNT1 A random(1,3) A_Jump(32,2,4);
		TNT1 A 0 A_Jump(256,2);
		TNT1 A random(1,3) A_PlaySound("*usefail",CHAN_VOICE);
		TNT1 A 0 A_Jump(256,2);
		TNT1 A random(1,3) A_PlaySound("*grunt",CHAN_VOICE);
		TNT1 A 0 A_Jump(200,2);
		TNT1 A 0 A_PlaySound("imp/melee",CHAN_WEAPON,0.4);
		TNT1 A 0 A_Refire("try4");
		goto ready;
	try3:
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,16),0);
		TNT1 A 0 A_GiveInventory("Fatigue",4);
		TNT1 A 0 A_SetTics(random(20,40));
		TNT1 A 0 A_Jump(200,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("try4");
		goto ready;
	try4:
		TNT1 A 0 A_CheckFloor(2);
		TNT1 A 0 A_Jump(240,2);
		TNT1 A 0 A_ChangeVelocity(frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-2,2));
		TNT1 A 0 A_GiveInventory("Fatigue",4);
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,17),0);
		TNT1 A 0 A_Jump(240,2);
		TNT1 A random(1,3) A_PlaySound("*grunt",CHAN_VOICE);
		TNT1 A 0 A_Jump(140,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("try5");
		goto ready;
	try5:
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,18),0);
		TNT1 A 0 A_Jump(8,"try2");
		TNT1 A 0 A_Jump(12,"try3");
		TNT1 A 0 A_Jump(16,"try4");
		TNT1 A 0 A_Jump(80,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_Jump(80,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_JumpIf(invoker.checkwoundcount(),3);
		TNT1 A 0 A_JumpIfInventory("IsTextless",1,2);
		TNT1 A 0 A_Print("Despite your best efforts\n\nyou seem to be stable.",5); goto nope;
		TNT1 A 0 A_Jump(32,2);
		TNT1 A 0 A_JumpIf(countinv("GreenArmour")+countinv("BlueArmour")+countinv("BlackArmour"),2);
		TNT1 A 4 A_Jump(80,2,3);
		TNT1 A 0 {invoker.patchwound(random(1,3),self);}
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-24,24),0);
		TNT1 A 0 A_Refire("try2");
		goto ready;
	nope:
		TNT1 A 0{invoker.targetlock=0;}
		goto super::nope;
	altfire:
	althold:
		TNT1 A 1;
		TNT1 A 0{
			actor a;int b;
			[a,b]=LineAttack(angle,42,pitch,0,"none",
				"NewBulletMovePuff",flags:LAF_NORANDOMPUFFZ|LAF_NOINTERACT
			);
			let c=HDPlayerPawn(a.tracer);
			if(!c){
				A_Print("Nothing to be done here.\n\nHeal thyself? (press zoom)",2);
				return resolvestate("nope");
			}
			if(c.countinv("IsMoving")>4){
				c.A_Print(string.format("Stop squirming!\n\n%s is trying to bandage you\n\nnot bugger you...",player.getusername()));
				A_Print("You'll need them to stay still...");
				return resolvestate("nope");
			}
			if(c.woundcount<1){
				A_Print("They're not bleeding.");
				return resolvestate("nope");
			}
			invoker.target=c;
			invoker.targetlock++;
			if(invoker.targetlock>10){
				A_Refire("injectbandage");
			}else A_Refire();
			return resolvestate(null);
		}goto nope;
	injectbandage:
		TNT1 A random(7,14){
			if(invoker.target){
				if(random(0,2)){
					if(!random(0,2))invoker.target.A_PlaySound("weapons/pocket",CHAN_BODY);
					return;
				}
				invoker.target.A_PlaySound("weapons/pocket",CHAN_BODY);
				invoker.patchwound(random(3,5),invoker.target);
			}
		}goto ready;



	spawn:
		TNT1 A 1;
		TNT1 A 0 A_CheckProximity("spawndropped","PlayerPawn",20,1, CPXF_COUNTDEAD|CPXF_SETTARGET|CPXF_ANCESTOR|CPXF_CLOSEST|CPXF_NOZ);
	spawnfresh:
		TNT1 A 0;
		stop;
	spawndropped:
		TNT1 A 0 A_JumpIfInTargetInventory("SelfBandage",1,"spawnfresh");
		TNT1 A 0{
			A_GiveToTarget("SelfBandage");
			A_GiveToTarget("DropMeds");
		}
		stop;
	}
}

