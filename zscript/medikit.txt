//-------------------------------------------------
// Medikit
//-------------------------------------------------

class PortableMedikit:HDPickup{
	default{
		inventory.maxamount 8;
		inventory.pickupmessage "Picked up a medikit.";
		inventory.icon "PMEDA0";
		missiletype "PortableMedikitSingle";
	}
	states{
	use:
		TNT1 A 0{
			if(player.readyweapon && player.readyweapon is "HDMedikitter") return;
			A_GiveInventory("HDMedikitter");
			A_SelectWeapon("HDMedikitter");
			A_TakeInventory("PortableMedikit",1);
		}
		fail;
	}
}

class HDWoundFixer:HDWeapon{
	default{
		+weapon.wimpy_weapon +weapon.no_auto_switch
	}
	int checkwoundcount(){
		let slf=HDPlayerPawn(owner);
		if(slf)return slf.woundcount;
		return 0;
	}
}
class HDMedikitter:HDWoundFixer{
	default{
		+inventory.untossable +weapon.cheatnotweapon
	}
	void patchwound(int amt=1){
		let slf=HDPlayerPawn(owner);
		if(!slf)return;
		int wound=max(slf.woundcount,0);
		int unstablewound=max(slf.unstablewoundcount,0);
		if(wound){
			amt=min(amt,wound);
			slf.woundcount-=amt;
		}else if(unstablewound){
			amt=min(amt,unstablewound);
			slf.unstablewoundcount-=amt;
		}else amt=0;
		slf.oldwoundcount+=amt;
	}
	states{
	select:
		TNT1 A 10{
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			if(!getcvar("hd_helptext")) return;
			if(invoker.checkwoundcount())A_Print("Press and hold Fire\n\nto try to not die.",5);
			else A_Print("Use this to patch yourself up.\n\n\n\nYou're fine now, so go\n\ndo something else.\n\n\n\n(Altfire can still be used to \n\nbandage someone else, of course.)",5);
		}
		goto super::select;
	reload:
		TNT1 A 20 {A_GiveInventory("HDDropArmourRTFN");}
		goto nope;
	flashstaple:
		TNT1 A 1{
			A_PlaySound("weapons/pistol",CHAN_WEAPON);
			A_PlaySound("misc/smallslop",CHAN_BODY);
			invoker.patchwound(1);
		}goto flashend;
	flashtampon: //heh
		TNT1 A 1{
			A_PlaySound("misc/punch",CHAN_WEAPON);
			A_PlaySound("misc/smallslop",CHAN_BODY);
			invoker.patchwound(random(1,3));
		}goto flashend;
	flashend:
		TNT1 A 1{
			damagemobj(invoker,self,1,"smallarms0");
			HealThing(1);
			A_ZoomFactor(0.98);
			A_ChangeVelocity(frandom(-1,0.1),frandom(-1,1),0.5,CVF_RELATIVE);
		}
		TNT1 A 1 A_ZoomFactor(0.99);
		TNT1 A 1 A_ZoomFactor(1);
		stop;
	fire:
	hold:
		TNT1 A 1{
			if(countinv("GreenArmour")+countinv("BlueArmour")+countinv("BlackArmour")){
				A_Print("Take off your armour first!\n\n(\cdhd_strip\c- in the console\n\nor hit reload)");
				A_Refire("nope");
			}
		}
		TNT1 A 1;
		TNT1 A 0{
			if(pitch<60){
				A_SetPitch(pitch+8,SPF_INTERPOLATE);
				A_Refire();
			}
			else{
				if(!invoker.checkwoundcount()){
					A_Print("You are not bleeding.");
					A_Refire("nope");
				}

				//start the process
				else A_Refire("patchup");
			}
		}
		goto nope;
	patchup:
		TNT1 A 10;
		TNT1 A 0 A_Jump(112,"stapler");
	injector:
		TNT1 A 0 A_Overlay(3,"flashtampon");
		goto patchupend;
	stapler:
		TNT1 AAAAA random(4,5){
			A_Overlay(3,"flashstaple");
			if(!random(0,3))invoker.setstatelabel("patchupend");
		}goto patchupend;
	patchupend:
		TNT1 A 10;
		TNT1 A 0 A_Refire();
		goto ready;
	}
}


class SelfBandage:HDWoundFixer{
	default{
		weapon.slotnumber 9; weapon.selectionorder 999;
	}
	void patchwound(int amt=1){
		let slf=HDPlayerPawn(owner);
		if(!slf)return;
		int wound=max(slf.woundcount,0);
		amt=min(amt,wound);
		if(wound){
			amt=min(amt,wound);
			slf.woundcount-=amt;
			slf.unstablewoundcount+=amt;
		}
	}
	states{
	select:
		TNT1 A 0{
			if(!getcvar("hd_helptext")) return;
			if(invoker.checkwoundcount())A_Print("Press and hold Fire\n\nwhile standing still\n\nto try to not die.",5);
			else A_Print("Use this to bandage yourself\n\nwhen you have no meds.\n\n\n\nYou're fine now, so go\n\ndo something else.\n\n\n\n(Altfire can still be used to \n\nbandage someone else, of course.)",5);
		}
		goto super::select;
	silentselect:
		TNT1 A 0;
		goto super::select;
	abort:
		TNT1 A 0{
			if(getcvar("hd_helptext"))A_Print("You must stay still\n\nto bandage yourself!",5);
		}goto nope;
	fire:
		TNT1 A 0 A_JumpIf(invoker.checkwoundcount(),"hold");
		TNT1 A 0{
			if(getcvar("hd_helptext"))A_Print("You have no\n\ninjuries to bandage.",5);
		}goto nope;
	hold:
	lower:
		TNT1 A 0 A_JumpIf(pitch>89,2);
		TNT1 A 0 A_JumpIf(pitch<45,1);
		goto try;
		TNT1 A 1 A_SetPitch(pitch+6,SPF_INTERPOLATE);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("lower");
		goto ready;
	try:
		TNT1 A random(15,25);
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,15),0);
		TNT1 A 0 A_GiveInventory("Fatigue",4);
		TNT1 A 0 A_Jump(32,2);
		TNT1 A random(5,15) A_GiveInventory("BleedOutAI",1);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
	try2:
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,15),0);
		TNT1 A 0 A_GiveInventory("Fatigue",4);
		TNT1 A random(1,3) A_Jump(32,2,4);
		TNT1 A 0 A_Jump(256,2);
		TNT1 A random(1,3) A_PlaySound("*usefail",CHAN_VOICE);
		TNT1 A 0 A_Jump(256,2);
		TNT1 A random(1,3) A_PlaySound("*grunt",CHAN_VOICE);
		TNT1 A 0 A_Jump(200,2);
		TNT1 A 0 A_PlaySound("imp/melee",CHAN_WEAPON,0.4);
		TNT1 A 0 A_Refire("try4");
		goto ready;
	try3:
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,16),0);
		TNT1 A 0 A_GiveInventory("Fatigue",4);
		TNT1 A 0 A_SetTics(random(20,40));
		TNT1 A 0 A_Jump(200,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("try4");
		goto ready;
	try4:
		TNT1 A 0 A_CheckFloor(2);
		TNT1 A 0 A_Jump(240,2);
		TNT1 A 0 A_ChangeVelocity(frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-2,2));
		TNT1 A 0 A_GiveInventory("Fatigue",4);
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,17),0);
		TNT1 A 0 A_Jump(240,2);
		TNT1 A random(1,3) A_PlaySound("*grunt",CHAN_VOICE);
		TNT1 A 0 A_Jump(140,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("try5");
		goto ready;
	try5:
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-18,18),0);
		TNT1 A 0 A_Jump(8,"try2");
		TNT1 A 0 A_Jump(12,"try3");
		TNT1 A 0 A_Jump(16,"try4");
		TNT1 A 0 A_Jump(80,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_Jump(80,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_JumpIf(invoker.checkwoundcount(),3);
		TNT1 A 0 A_JumpIfInventory("IsTextless",1,2);
		TNT1 A 0 A_Print("Despite your best efforts\n\nyou seem to be stable.",5); goto nope;
		TNT1 A 4 A_Jump(160,2,3,4);
		TNT1 A 0 {invoker.patchwound(random(1,2));}
		TNT1 A 0 A_GiveInventory("BleedOutAI",1);
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-24,-24),random(-24,24),0);
		TNT1 A 0 A_Refire("try2");
		goto ready;
	altfire:
	althold:
		TNT1 A random(1,10) A_Jump(128,1,2);
		TNT1 A random(1,10);
		TNT1 A random(1,10) A_PlaySound("weapons/pocket");
		TNT1 A 0 A_FireProjectile("InjectorChecker");
		TNT1 A 0 A_JumpIfInventory("InjectorCheckerFlag",0,"injectbandage"); //heh
		TNT1 A 0 A_Refire();
		TNT1 A 0 A_TakeInventory("InjectorCheckerFlag");
		goto ready;
	injectbandage:
		TNT1 A 0 A_FireProjectile("BandageInjector");
		TNT1 A 0 A_TakeInventory("InjectorCheckerFlag");
		TNT1 A 20;
		TNT1 A 0 A_Refire();
		goto ready;
	spawn:
		TNT1 A 1;
		TNT1 A 0 A_CheckProximity("spawndropped","PlayerPawn",20,1, CPXF_COUNTDEAD|CPXF_SETTARGET|CPXF_ANCESTOR|CPXF_CLOSEST|CPXF_NOZ);
	spawnfresh:
		TNT1 A 0;
		stop;
	spawndropped:
		TNT1 A 0 A_JumpIfInTargetInventory("SelfBandage",1,"spawnfresh");
		TNT1 A 0{
			A_GiveToTarget("SelfBandage");
			A_GiveToTarget("DropMeds");
		}
		stop;
	}
}

