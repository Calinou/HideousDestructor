//-------------------------------------------------
// Medikit
//-------------------------------------------------
const HD_MEDPATCHLIMIT=42;
class PortableMedikit:HDPickup{
	default{
		//$Category "Items/Hideous Destructor/Supplies"
		//$Title "Medikit"
		//$Sprite "PMEDA0"

		inventory.maxamount 4;
		inventory.pickupmessage "Picked up a medikit.";
		inventory.icon "PMEDA0";
		scale 0.4;
		hdpickup.bulk ENC_MEDIKIT;
	}
	bool hasstim;
	override void postbeginplay(){
		super.postbeginplay();
		hasstim=(!owner&&vel==(0,0,0));
	}
	override void actualpickup(actor other){
		if(hasstim){
			hasstim=false;
			A_PlaySound("weapons/pocket");
			if(other.A_JumpIfInventory("PortableStimpack",0,"null"))
				A_DropItem("PortableStimpack",1);
				else other.A_GiveInventory("PortableStimpack",1);
		}
		super.actualpickup(other);
	}
	states{
	spawn:
		MEDI A -1 nodelay{
			translation=0;
			if(invoker.countinv("PortableStimpack"))invoker.scale=(0.47,0.4);
			else invoker.scale=(0.4,0.4);
		}
	use:
		TNT1 A 0{
			if(!FindInventory("HDMedikitter")){
				A_GiveInventory("HDMedikitter");
				A_TakeInventory("PortableMedikit",1);
			}else{
				A_Log("You pull out the medikit you've already unwrapped.",true);
			}
			A_SelectWeapon("HDMedikitter");
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
		}
		fail;
	}
}

class HDWoundFixer:HDWeapon{
	default{
		+weapon.wimpy_weapon +weapon.no_auto_switch +weapon.cheatnotweapon
	}
	int checkwoundcount(bool checkunstable=false){
		let onr=HDPlayerPawn(owner);
		if(onr){
			if(checkunstable)return onr.woundcount+onr.unstablewoundcount;
			else return onr.woundcount;
		}
		return 0;
	}
	states{
	reload:
		TNT1 A 14{
			if(countinv("WornRadsuit"))useinventory(findinventory("portableradsuit"));
			else A_DropInventory("HDArmourWorn");
			A_ClearRefire();
		}
		goto readyend;
	}
}
class HDMedikitter:HDWoundFixer{
	default{
		-weapon.no_auto_switch
		weapon.selectionorder 1001;
		weapon.slotnumber 9;
		scale 0.27;
	}
	enum MediNums{
		MEDIKIT_MAXFLESH=2,
	}
	bool useonother;
	int injectableflesh;
	int usedpatches;
	actor usedon;
	override void beginplay(){
		injectableflesh=MEDIKIT_MAXFLESH;
		usedpatches=0;
		useonother=false;usedon=null;
		super.beginplay();
	}
	override double,int weaponbulk(){
		return ENC_MEDIKIT*1.1,0;
	}
	void patchwound(int amt,actor targ){
		let slf=HDPlayerPawn(targ);
		if(!slf)return;
		if(!random(0,1)&&(slf.alpha<1||slf.bshadow))amt-=random(0,amt+1);
		int wound=max(slf.woundcount,0);
		int unstablewound=max(slf.unstablewoundcount,0);
		if(wound){
			slf.woundcount=max(0,wound-amt);
		}else if(unstablewound){
			slf.unstablewoundcount=max(0,unstablewound-amt);
		}else amt=0;
		slf.oldwoundcount+=amt;
	}
	states{
	select:
		TNT1 A 0{
			if(invoker.injectableflesh<1 && invoker.usedpatches>HD_MEDPATCHLIMIT) A_SelectWeapon("SelfBandage");
		}
		TNT1 A 10{
			if(!getcvar("hd_helptext")) return;
			A_WeaponMessage("\cg+++ \cjMEDIKIT \cg+++\c-\n\n\nPress and hold Fire\nto patch yourself up.\n\nAltfire deploys Second Flesh.\n\nFire Mode runs a diagnostic.\n\nPress Zoom to start\nusing on someone else.",175);
		}
		goto super::select;
	flashstaple:
		TNT1 A 1{
			A_PlaySound("weapons/bigcrack",CHAN_WEAPON);
			A_PlaySound("misc/bulletflesh",CHAN_BODY);
			invoker.patchwound(1,self);
		}goto flashend;
	flashnail:
		TNT1 A 1{
			A_PlaySound("misc/punch",CHAN_WEAPON);
			A_PlaySound("misc/bulletflesh",CHAN_BODY);
			invoker.patchwound(random(1,3),self);
		}goto flashend;
	flashend:
		TNT1 A 1{
			givebody(1);
			damagemobj(invoker,self,1,"staples");
			A_ZoomFactor(0.98);
			A_ChangeVelocity(frandom(-1,0.1),frandom(-1,1),0.5,CVF_RELATIVE);
		}
		TNT1 A 1 A_ZoomFactor(0.99);
		TNT1 A 1 A_ZoomFactor(1);
		stop;
	zoom:
		TNT1 A 1{
			if(invoker.useonother){
				invoker.useonother=false;
				A_WeaponMessage("Using this on yourself.");
			}else{
				invoker.useonother=true;
				A_WeaponMessage("Using this on someone else.");
			}
		}goto nope;
	fireother:
		TNT1 A 10{
			flinetracedata mediline;
			linetrace(
				angle,42,pitch,
				offsetz:height-12,
				data:mediline
			);
			let c=HDPlayerPawn(mediline.hitactor);
			if(!c){
				if(getcvar("hd_helptext"))A_WeaponMessage("Nothing to be done here.\n\nHeal thyself? (press zoom)",150);
				return resolvestate("nope");
			}
			if(invoker.usedon&&c!=invoker.usedon){
				if(c.getcvar("hd_helptext"))c.A_Print(string.format("Get the hell away!\n\n%s is trying to stab you\n\nwith a used syringe!!!",player.getusername()));
				if(getcvar("hd_helptext"))A_Print("Why are you attacking your teammate\n\nwith used medical equipment!?");
			}else if(c.countinv("IsMoving")>4){
				if(c.getcvar("hd_helptext"))c.A_Print(string.format("Stop squirming!\n\n%s is trying to heal you\n\nnot bugger you...",player.getusername()));
				if(getcvar("hd_helptext"))A_WeaponMessage("You'll need them to stay still...");
				return resolvestate("nope");
			}
			if(!c.player.bot && c.countinv("WornRadsuit") && c.countinv("PortableRadsuit")){
				if(getcvar("hd_helptext"))A_WeaponMessage("Get them to take off their environment suit first!\n\n(toggle it in the inventory)",100);
				return resolvestate("nope");
			}
			if(!c.player.bot && c.countinv("HDArmourWorn")){
				if(getcvar("hd_helptext"))A_WeaponMessage("Get them to take off their armour first!\n\n(\cdhd_strip\c- in the console)",100);
				return resolvestate("nope");
			}
			if(!(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK) && c.woundcount+c.unstablewoundcount<1){
				A_WeaponMessage("They're not bleeding.");
				return resolvestate("nope");
			}
			if(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK && c.burncount+c.oldwoundcount<1){
				A_WeaponMessage("They have no lasting injuries to treat.");
				return resolvestate("nope");
			}
			if(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK && invoker.injectableflesh<1){
				A_WeaponMessage("You have no Second Flesh to apply.");
				return resolvestate("nope");
			}
			invoker.target=c;
			return resolvestate("applythatshit");
		}goto nope;
	applythatshit:
		TNT1 A 0{
			if(invoker.target)invoker.usedon=invoker.target;
		}
		TNT1 A 0 A_JumpIf(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK,"applythathotshit");
		TNT1 A 0{invoker.usedpatches++;}
		TNT1 A 0 A_Jump(112,"applythatstaplershit");
	applythatinjectorshit:
		TNT1 A 10{
			if(invoker.target){
				invoker.target.A_PlaySound("misc/punch",CHAN_WEAPON);
				invoker.target.A_PlaySound("misc/bulletflesh",CHAN_BODY);
				invoker.patchwound(random(1,3),invoker.target);
			}
		}goto patchupend;
	applythatstaplershit:
		TNT1 AAAAA 3{
			A_PlaySound("weapons/bigcrack",CHAN_WEAPON);
			if(invoker.target){
				invoker.target.A_PlaySound("misc/smallslop",CHAN_BODY);
				invoker.patchwound(1,invoker.target);
				if(!random(0,3))invoker.setstatelabel("patchupend");
				invoker.target.givebody(1);
				invoker.target.damagemobj(invoker,null,1,"staples",DMG_FORCED);
			}
		}goto patchupend;
	applythathotshit:
		TNT1 A 10{
			if(invoker.target){
				invoker.injectableflesh--;
				invoker.target.A_PlaySound("misc/punch",CHAN_WEAPON);
				invoker.target.A_PlaySound("misc/bulletflesh",CHAN_BODY);
				invoker.target.A_PlaySound("misc/smallslop",CHAN_VOICE);
				actor a=spawn("SecondFleshBeast",invoker.target.pos);
				a.target=invoker.target;
				a.stamina=150;
			}
		}
		goto nope;
	altfire:
		TNT1 A 0{
			if(invoker.injectableflesh<1){
				A_WeaponMessage("You are out of Second Flesh.");
				A_Refire("nope");
			}else A_Refire("althold");
		}
	fire:
		TNT1 A 0{
			if(invoker.usedpatches>HD_MEDPATCHLIMIT){
				A_WeaponMessage("You are out of Auto-Sutures.");
				A_Refire("nope");
			}else A_Refire("hold");
		}
	hold:
	althold:
		TNT1 A 0 A_JumpIf(invoker.useonother,"fireother");
		TNT1 A 1{
			if(countinv("WornRadsuit")){
				if(!countinv("PortableRadsuit"))A_TakeInventory("WornRadsuit");
				else if(getcvar("hd_autostrip"))A_Refire("reload");
				else{
					if(getcvar("hd_helptext"))A_WeaponMessage("Take off your environment suit first!\n\n(toggle it in your inventory or hit reload)",100);
					A_Refire("nope");
				}
			}
			else if(countinv("HDArmourWorn")){
				if(getcvar("hd_autostrip"))A_Refire("reload");
				else{
					if(getcvar("hd_helptext"))A_WeaponMessage("Take off your armour first!\n\n(\cdhd_strip\c- in the console\n\nor hit reload)",100);
					A_Refire("nope");
				}
			}
		}
		TNT1 A 1;
		TNT1 A 0{
			if(pitch<55){
				A_SetPitch(pitch+8,SPF_INTERPOLATE);
				A_Refire();
			}
			else if(getplayerinput(MODINPUT_BUTTONS)&BT_ALTATTACK){
				let a=HDPlayerPawn(self);
				if(a){
					if(a.oldwoundcount+a.burncount+a.unstablewoundcount<1){
						A_WeaponMessage("You have no stabilized injuries to treat.");
						A_Refire("nope");
					}else{
						A_Refire("secondflesh");
					}
				}
			}else{
				if(invoker.usedpatches>HD_MEDPATCHLIMIT){
					A_WeaponMessage("You are out of Auto-Sutures.");
					A_Refire("nope");
				}else if(!invoker.checkwoundcount(true)){
					A_WeaponMessage("You are not bleeding.");
					A_Refire("nope");
				}
				else A_Refire("patchup");
			}
		}
		goto nope;
	patchup:
		TNT1 A 10;
		TNT1 A 0{
			if(!invoker.usedon)invoker.usedon=self;
			invoker.usedpatches++;
		}
		TNT1 A 0 A_Jump(112,"stapler");
	injector:
		TNT1 A 0 A_Overlay(3,"flashnail");
		goto patchupend;
	stapler:
		TNT1 AAAAA random(4,5){
			A_Overlay(3,"flashstaple");
			if(!random(0,3))invoker.setstatelabel("patchupend");
		}goto patchupend;
	patchupend:
		TNT1 A 10;
		TNT1 A 0 A_Refire();
		goto ready;
	secondflesh:
		TNT1 A 10;
		TNT1 A 10{
			if(!(self is "HDPlayerPawn"))return;
			invoker.usedon=self;
			invoker.injectableflesh--;
			A_PlaySound("misc/punch",CHAN_WEAPON);
			A_PlaySound("misc/bulletflesh",CHAN_BODY);
			A_PlaySound("misc/smallslop",CHAN_VOICE);
			actor a=spawn("SecondFleshBeast",pos);
			a.target=self;
			a.stamina=100;
		}
		goto nope;
	firemode:
		TNT1 A 0 A_WeaponMessage("\cdMedikit Auto-Diagnostic Tool engaged.\c-\n\n\ccScanning, please wait...");
		TNT1 AAAAAAAAAAAA 2{
			A_PlaySound("weapons/plasidle",CHAN_WEAPON,0.4);
			A_SetBlend("aa aa 88",0.04,1);
		}
		TNT1 A 0{
			A_PlaySound("misc/i_pkup",CHAN_WEAPON);
			let slf=HDPlayerPawn(self);
			if(!slf){
				if(hd_debug)A_Log("how are you not an hdplayerpawn");
				return;
			}
			int uw=slf.unstablewoundcount;
			int ww=slf.woundcount;
			int ow=slf.oldwoundcount;
			int bb=slf.burncount;
			int ag=slf.aggravateddamage*0.2+countinv("IsMoving");
			int wg=0;
			if(ww||uw)wg+=2;
			if(countinv("HDArmourWorn"))wg+=5;
			ow=max(ow+random(-ag,ag),0);
			bb=max(bb+random(-ag,ag),0);
			uw=max(uw+random(-wg,wg),0);
			ww=max(ww+random(-wg,wg),0);
			A_WeaponMessage(string.format("Medikit Auto-Diagnostic complete.

			Status report:

			\ccOpen wounds: \cg%u%%

			\ccWounds temporarily bandaged: \ca%u%%
			\ccWounds already treated: \cd%u%%
			\ccBurns: \cq%u%%

			\cu(all numbers are based on %% of minimum
			\cuconsidered to be lethal in all situations.)",
			ww,uw,ow,bb),210);

			A_Log(string.format("Medikit Auto-Diagnostic:
\ccPatient: \cy%s
\ccOpen wounds: \cg%u%%
\ccWounds temporarily bandaged: \ca%u%%
\ccWounds already treated: \cd%u%%
\ccBurns: \cq%u%%",player.getusername(),ww,uw,ow,bb),true);
		}
		goto nope;
	spawn:
		MEDI B -1 nodelay{
			if(invoker.usedon)frame=2;
		}stop;
	}
	override string pickupmessage(){
		if(injectableflesh<MEDIKIT_MAXFLESH||usedpatches>0)return "Picked up a used medikit.";
		return "Picked up an opened medikit.";
	}
}
class SecondFleshBeast:IdleDummy{
	states{
	spawn:
		TNT1 A 30;
		TNT1 A 12{target.A_Scream();}
		TNT1 A 4{
			let tgt=HDPlayerPawn(target);
			if(!tgt || tgt.bkilled || stamina<1){destroy();return;}
			if(tgt.health>10)tgt.damagemobj(tgt,tgt,min(tgt.health-10,10),"internal",DMG_NO_ARMOR);
			tgt.A_Pain();
			tgt.stunned+=10;
			switch(random(0,21)){
			case 0:
			case 1:
				tgt.burncount--;
				break;
			case 2:
			case 3:
				tgt.oldwoundcount--;
				break;
			case 4:
				if(tgt.unstablewoundcount){
					tgt.unstablewoundcount--;
					tgt.aggravateddamage++;
				}
			default:break;
			}
			if(!random(0,200))tgt.aggravateddamage++;
			stamina--;
			if(hd_debug)A_Log(string.format("aggro %i  old %i  unstable %i",tgt.aggravateddamage,tgt.oldwoundcount,tgt.unstablewoundcount));
		}wait;
	}
}


class SelfBandage:HDWoundFixer{
	default{
		weapon.selectionorder 1004;
		weapon.slotnumber 9;
	}
	void patchwound(int amt,actor targ){
		let slf=HDPlayerPawn(targ);
		if(!slf)return;
		if(!random(0,2)&&(slf.alpha<1||slf.bshadow))amt-=random(0,amt+1);
		int wound=max(slf.woundcount,0);
		amt=min(amt,wound);
		if(wound){
			amt=min(amt,wound);
			slf.woundcount-=amt;
			slf.unstablewoundcount+=amt;
		}
	}
	int targetlock;
	states{
	select:
		TNT1 A 0{
			if(!getcvar("hd_helptext")) return;
			if(invoker.checkwoundcount())A_WeaponMessage("\cu--- \ccBANDAGING \cu---\c-\n\n\nPress and hold Fire\n\nwhile standing still\n\nto try to not die.",210);
			else A_WeaponMessage("\cu--- \ccBANDAGING \cu---\c-\n\n\nPress and hold Fire to bandage\n\nyourself when you are bleeding.\n\n\n\nPress and hold Altfire\n\nto bandage someone else.",210);
		}
		goto super::select;
	abort:
		TNT1 A 1{
			if(getcvar("hd_helptext"))A_WeaponMessage("You must stay still\n\nto bandage yourself!",70);
		}
		TNT1 A 0 A_Refire("lower");
		goto nope;
	fire:
		TNT1 A 0{
			bool nope=false;
			if(countinv("PortableRadsuit") && countinv("WornRadsuit")){
				if(getcvar("hd_helptext"))A_WeaponMessage("Take off your environment suit first!",70);
				nope=true;
			}
			else if(!invoker.checkwoundcount()){
				if(getcvar("hd_helptext"))A_WeaponMessage("You are not bleeding.",70);
				nope=true;
			}
			if(nope)player.setpsprite(PSP_WEAPON,invoker.findstate("nope"));
		}
	hold:
	lower:
		TNT1 A 0 A_JumpIf(pitch>89,2);
		TNT1 A 0 A_JumpIf(pitch<45,1);
		goto try;
		TNT1 A 1 A_SetPitch(pitch+6,SPF_INTERPOLATE);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("lower");
		goto ready;
	try:
		TNT1 A random(15,25);
		TNT1 A 0{
			A_MuzzleClimb(frandom(-1.5,1.8),frandom(-2.4,2.4));
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
		}
		TNT1 A 0 A_Jump(32,2);
		TNT1 A random(5,15) damagemobj(self,self,1,"bleedout");
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
	try2:
		TNT1 A 0{
			A_MuzzleClimb(frandom(-1.5,1.8),frandom(-2.4,2.4));
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
		}
		TNT1 A random(1,3) A_Jump(32,2,4);
		TNT1 A 0 A_Jump(256,2);
		TNT1 A random(1,3) A_PlaySound("*usefail",CHAN_VOICE);
		TNT1 A 0 A_Jump(256,2);
		TNT1 A random(1,3) A_PlaySound("*grunt",CHAN_VOICE);
		TNT1 A 0 A_Jump(200,2);
		TNT1 A 0 A_PlaySound("imp/melee",CHAN_WEAPON,0.4);
		TNT1 A 0 A_Refire("try4");
		goto ready;
	try3:
		TNT1 A random(20,40){
			A_MuzzleClimb(frandom(-1.6,1.8),frandom(-2.4,2.4));
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
		}
		TNT1 A 0 A_Jump(200,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("try4");
		goto ready;
	try4:
		TNT1 A 0 A_CheckFloor(2);
		TNT1 A 0 A_Jump(240,2);
		TNT1 A 0 A_ChangeVelocity(frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-2,2));
		TNT1 A 0{
			A_MuzzleClimb(frandom(-1.5,1.7),frandom(-2.4,2.4));
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
		}
		TNT1 A 0 A_Jump(240,2);
		TNT1 A random(1,3) A_PlaySound("*grunt",CHAN_VOICE);
		TNT1 A 0 A_Jump(140,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_Refire("try5");
		goto ready;
	try5:
		TNT1 A 0 A_MuzzleClimb(frandom(-1.8,1.8),frandom(-2.4,2.4));
		TNT1 A 0 A_Jump(8,"try2");
		TNT1 A 0 A_Jump(12,"try3");
		TNT1 A 0 A_Jump(16,"try4");
		TNT1 A 0 A_Jump(80,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_Jump(80,2);
		TNT1 A 0 A_PlaySound("weapons/pocket");
		TNT1 A random(10,20);
		TNT1 A 0 A_JumpIfInventory("IsMoving",4,"abort");
		TNT1 A 0 A_JumpIf(invoker.checkwoundcount(),2);
		TNT1 A 0 {
			if(getcvar("hd_helptext"))A_WeaponMessage("You seem to be stable.",144);
		}goto nope;
		TNT1 A 0 A_Jump(42,2);
		TNT1 A 0 A_JumpIfInventory("HDArmourWorn",1,2);
		TNT1 A 4 A_Jump(100,2,3);
		TNT1 A 0 {invoker.patchwound(random(1,3),self);}
		TNT1 A 0 A_MuzzleClimb(frandom(-2.4,2.4),frandom(-2.4,2.4));
		TNT1 A 0 A_Refire("try2");
		goto ready;
	nope:
		TNT1 A 0{invoker.targetlock=0;}
		goto super::nope;
	altfire:
	althold:
		TNT1 A 1;
		TNT1 A 0{
			actor a;int b;
			[a,b]=LineAttack(angle,42,pitch,0,"none",
				"NewBulletMovePuff",flags:LAF_NORANDOMPUFFZ|LAF_NOINTERACT
			);
			let c=HDPlayerPawn(a.tracer);
			if(!c){
				A_WeaponMessage("Nothing to be done here.\n\nHeal thyself?");
				return resolvestate("nope");
			}
			if(c.countinv("IsMoving")>4){
				c.A_Print(string.format("Stop squirming!\n\n%s is trying to bandage you\n\nnot bugger you...",player.getusername()));
				A_WeaponMessage("You'll need them to stay still...");
				return resolvestate("nope");
			}
			if(c.woundcount<1){
				A_WeaponMessage("They're not bleeding.");
				return resolvestate("nope");
			}
			invoker.target=c;
			invoker.targetlock++;
			if(invoker.targetlock>10){
				A_Refire("injectbandage");
			}else A_Refire();
			return resolvestate(null);
		}goto nope;
	injectbandage:
		TNT1 A random(7,14){
			if(invoker.target){
				if(random(0,2)){
					if(!random(0,2))invoker.target.A_PlaySound("weapons/pocket",CHAN_BODY);
					return;
				}
				invoker.target.A_PlaySound("weapons/pocket",CHAN_BODY);
				invoker.patchwound(random(3,5),invoker.target);
			}
		}goto ready;



	spawn:
		TNT1 A 1;
		TNT1 A 0{
			if(
				target
				&&target.player
				&&!target.countinv("SelfBandage")
			){
				A_GiveToTarget("SelfBandage");
				A_GiveToTarget("DropMeds");
			}
		}
		stop;
	}
}

