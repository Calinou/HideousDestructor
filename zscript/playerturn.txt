// ------------------------------------------------------------
//   Stuff related to player turning
// ------------------------------------------------------------

extend class HDPlayerPawn{
	vector2 muzzledrift;

	void TurnCheck(){

		//temporary variables
		double anglechange=0;
		double pitchchange=0;

		//get input
		double yaw=iyaw*(360./65536.);
		double ptch=ipitch*(360./65536.);


		//delete when overriding directly
		//revisit jitter issue when this is gone
		lastangle=angle-yaw;
		lastpitch=pitch+ptch;
		A_SetAngle(lastangle,SPF_INTERPOLATE);
		A_SetPitch(lastpitch,SPF_INTERPOLATE);


		//reduced turning while supported.
		if(countinv("IsSupported") && abs(yaw)<8 && !countinv("IsMoving")){
			yaw*=0.1;ptch*=0.1;
		}
		//reduced turning while crouched.
		else if(height<40 && abs(yaw)>5){
			yaw*=0.6;ptch*=0.6;
		}
		anglechange+=yaw;pitchchange-=ptch;


		//muzzle inertia
		if(!barehanded){
			int amt=36;
		}




//if(anglechange)A_LogFloat(anglechange);




		//set everything and update old
		A_SetAngle(lastangle+anglechange,SPF_INTERPOLATE);
		A_SetPitch(lastpitch+pitchchange,SPF_FORCECLAMP|SPF_INTERPOLATE);


		//feet angle
		double fac=hdmath.anglechange(angle,feetangle);
		if(pos.z==zat && abs(fac)>50-(height<40?20:0)){
			vel+=rotatevector((0,fac/abs(fac)*0.1),angle);
			A_GiveInventory("IsMoving",2);
			feetangle+=clamp(angle-feetangle,-10,10);
			if(
				instatesequence(curstate,resolvestate("spawn"))
			)setstatelabel("see");

			int chancetodouse=63;
			//if on appropriate terrain, easier to quench a fire
			if(CheckLiquidTexture())chancetodouse*=0.4;
			if(height<40 && floorz==pos.z && !random(0,chancetodouse)){
				if(A_CheckProximity("null","HDFire",20,1,CPXF_SETTRACER)){
					tracer.A_SpawnItemEx("HDSmoke",
						random(-3,3),random(-3,3),random(3,7),
						vel.x,vel.y,vel.z,
						flags:SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
					);
					tracer.destroy();
				}
			}
		}

		//move pivot point a little behind the player's view
		anglechange=HDMath.AngleChange(lastangle,angle);
		if(zat-pos.z==0){
			if(abs(anglechange)>1){
				int dir=90;
				if(anglechange<0) dir=-90;
				trymove(self.pos.xy+(cos(angle+dir)*0.8,sin(angle+dir)*0.8),false);
			}
			if(abs(pitchchange)>1 && -30<pitch<30){
				double rate=0.1;
				trymove(self.pos.xy-(cos(angle)*rate*pitchchange,
				sin(angle)*rate*pitchchange),false);
			}
		}
	}




	//seeing if you're standing on a liquid texture
	static const String lq[]={
		"MFLR8_4","MFLR8_2",
		"SFLR6_1","SFLR6_4",
		"SFLR7_1","SFLR7_4",
		"FWATER1","FWATER2","FWATER3","FWATER4",
		"BLOOD1","BLOOD2","BLOOD3",
		"SLIME1","SLIME2","SLIME3","SLIME4",
		"SLIME5","SLIME6","SLIME7","SLIME8"
	};
	bool standingonliquid;
	bool CheckLiquidTexture(){
		int lqlength=lq.size();
		for (int i=0; i<lqlength; i++){
			TextureID tx = TexMan.CheckForTexture(lq[i], TexMan.Type_Flat);
			if (tx && floorpic == tx){
				return true;
			}
		}
		return false;
	}

	//Muzzle climb!
	void MuzzleClimb(
		double down,
		double left,
		bool doublemoving=true
	){
		if(doublemoving && countinv("ismoving")){down*=2;left*=2;}
//		driftdown+=down;
//		driftleft+=left;
	}
}


class HDMuzzleBlocker:HDActor{
	default{
		-solid -nogravity -shootable +noblockmonst +noblockmap
		height 1;radius 1;
	}
}