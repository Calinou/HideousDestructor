// ------------------------------------------------------------
// Manually reload magazines! (and clips too!)
// ------------------------------------------------------------

class HDMagManager:HDWeapon{
	default{
		+weapon.wimpy_weapon
		+weapon.no_auto_switch
		weapon.selectionorder 1011;
	}
	int which;
	hdmagammo thismag;
	name thismagtype;
	string uitext;
	name magtypes[7];
	override void beginplay(){
		super.beginplay();
		uitext="Mag Manager\n\nNo mags selected";
		thismagtype="HDMagAmmo";
		if(owner)thismag=hdmagammo(owner.findinventory(thismagtype));
		magtypes[0]="HD9mMag15";
		magtypes[1]="HD9mMag30";
		magtypes[2]="HD4mMag";
		magtypes[3]="HD7mClip";
		magtypes[4]="HD7mMag";
		magtypes[5]="HDBattery";
//		magtypes[6]="HDMagAmmo";
	}
	override inventory createtossable(int amt){
		if(owner)owner.A_DropInventory(thismagtype,1);
		return null;
	}
	action bool GetMags(){
		invoker.thismag=hdmagammo(findinventory(invoker.thismagtype));
		return !!(invoker.thismag);
	}
	action void NextMagType(bool forwards=true){
		if(!GetMags())return;
		int findindex=0;
		int magrange=invoker.magtypes.size();
		for(int i=0;i<magrange;i++){
			if(invoker.thismagtype==invoker.magtypes[i]){
				findindex=i;
			}
		}
		for(int i=0;i<magrange;i++){
			if(forwards)findindex++;else findindex--;
			if(findindex<0)findindex=magrange-1;
			else if(findindex>=magrange)findindex=0;
			if(findinventory(invoker.magtypes[findindex])){
				invoker.thismag=HDMagAmmo(findinventory(invoker.magtypes[findindex]));
				invoker.thismagtype=invoker.magtypes[findindex];
				break;
			}
		}
		invoker.UpdateText();
	}
	action void Insert(){
		if(!GetMags())return;
		invoker.thismag.Insert();
		invoker.UpdateText();
	}
	action void Extract(){
		if(!GetMags())return;
		invoker.thismag.Extract();
		invoker.UpdateText();
	}
	action void LastToFirst(bool forwards=true){
		if(!GetMags())return;
		if(forwards)invoker.thismag.LastToFirst();
		else invoker.thismag.FirstToLast();
		invoker.UpdateText();
	}
	action void LowestToLast(){
		if(!GetMags())return;
		invoker.thismag.LowestToLast();
		invoker.UpdateText();
	}
	action void Backpack(bool outfrom){
	}
	void UpdateText(){
		if(!thismag){uitext="\cf///\cyMag Manager\cf\\\\\\\n\nNo mags selected";return;}
		thismagtype=thismag.getclassname();
		string toui=string.format(
			"\cf///\cyMag Manager\cf\\\\\\\n\n\cqFire/Altfire\cu  select\n(hold \cqFiremode\cu to select ammo type)\n\cqReload/Unload\cu  load mags\n\cqDrop\cu  drop current mag\n\cqZoom\cu bring up lowest mag\n\n\n\cj%s\n",thismag.nicename
		);
		if(thismag.mags.size()>0){
			int finalindex=thismag.amount-1;
			for(int i=0;i<finalindex;i++){
				toui.appendformat(" %i ",thismag.mags[i]);
			}
			toui.appendformat("\n\nCurrent Mag: \cy%i",thismag.mags[finalindex]);
		}
		if(thismag.roundtype!="")toui.appendformat("\nSpare Rounds: \ce%i",owner.countinv(thismag.roundtype));
		uitext=toui;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	nope:
		---- A 1{
			A_WeaponMessage(invoker.uitext);
			A_ClearRefire();
			A_WeaponReady(WRF_NOFIRE);
		}
		---- A 0{
			int inp=getplayerinput(MODINPUT_BUTTONS);
			if(
				inp&BT_ATTACK||
				inp&BT_ALTATTACK||
				inp&BT_RELOAD||
				inp&BT_ZOOM||
				inp&BT_USER1||
				//all this just to get rid of user2 :(
				inp&BT_USER3||
				inp&BT_USER4
			)setweaponstate("nope");
		}
		---- A 0 A_Jump(256,"ready");
	ready:
		TNT1 A 1{
			A_WeaponMessage(invoker.uitext);
			A_WeaponReady(WRF_ALL&~WRF_ALLOWUSER2);
			invoker.UpdateText();
		}
		goto readyend;
	fire:
//give hd7mmag 5;give hd9mmag15 5;give hd9mmag30 5;give hd4mmag 5;give hdbattery 5;wait 1;use hd9mmag15
		TNT1 A 1{
			if(PressingFireMode())NextMagType(false);
			else LastToFirst(false);
		}goto nope;
	altfire:
		TNT1 A 1{
			if(PressingFireMode())NextMagType();
			else LastToFirst();
		}goto nope;
	reload:
		TNT1 A 8 Insert();
		goto readyend;
	unload:
		TNT1 A 4 Extract();
		goto readyend;
	firemode:
		TNT1 A 0;
		goto nope;
	zoom:
		TNT1 A 0 LowestToLast();
		goto nope;
	}
}








//old, pre-mag-tracking version below




class MagManager:HDWeapon{
	default{
		+weapon.wimpy_weapon
		+weapon.no_auto_switch
		weapon.selectionorder 1011;
	}
	override void detachfromowner(){
		DumpAmmo();
		owner.A_TakeInventory("Ring"); //this will trigger givebasics
		super.detachfromowner();
	}
	override inventory CreateTossable(int amount){
		DropMag(weaponstatus[HDMMS_WHICH]);
		return null;//super.createtossable(amount);
	}
	static bool GiveMMMag(actor caller,actor picker,int which,int amount){
		picker.A_SetInventory("MagManager",1);
		let mmm=magmanager(picker.findinventory("magmanager"));
		if(mmm.weaponstatus[which])return false;
		if(amount>=mmm.magmax[which])return false;
		mmm.weaponstatus[which]=amount;
		if(caller)caller.destroy();
		return true;
	}
	bool DropMag(int which){
		int mmamount=weaponstatus[which];
		if(mmamount<1)return false;

		if(magtype2[which]){
			actor aaa;
			[bnotarget,aaa]=owner.A_SpawnItemEx(magtype2[which],0,0,height-12,
				3,0,1,0,SXF_NOCHECKPOSITION|SXF_SETTARGET
			);
			aaa.stamina=mmamount;
			weaponstatus[which]=0;
		}else while(weaponstatus[which]>0){
			weaponstatus[which]--;
			owner.A_SpawnItemEx(ammotype[which],0,0,height-12,
				frandom(3,4),0,1,frandom(-1,1),SXF_NOCHECKPOSITION
			);
		}
		return true;
	}
	void DumpAmmo(){
		for(int i=0;i<8;i++){
			if(
				weaponstatus[i]>0
				&&ammotype[i]
			)DropMag(i);
		}
	}
	static int TakeSpares(actor caller,class<inventory> type){
		caller.A_SetInventory("MagManager",1);
		let mmm=MagManager(caller.findinventory("MagManager"));
		int rndmag=0;int mmindex=-1;

		//take from magmanager if possible
		for(int i=0;i<8;i++){
			if(mmm.magtype[i]==type){
				rndmag=mmm.weaponstatus[i];
				mmm.weaponstatus[i]=0;
				mmindex=i;
				break;
			}
		}
		if(mmindex<0)return 0;
		if(!rndmag){
			//take from ammo pool
			rndmag=min(
				caller.countinv(mmm.ammotype[mmindex]),
				random(1,mmm.magmax[mmindex]-1)
			);
			caller.A_TakeInventory(mmm.ammotype[mmindex],rndmag);
		}
		return rndmag;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	ready:
		TNT1 A 1 A_WeaponReady(WRF_ALL);
		goto readyend;

	//switch mag types
	altfire:
		TNT1 A 10{
			int which=invoker.weaponstatus[HDMMS_WHICH]+1;
			if(which>HDMMC_LAST)which=HDMMC_FIRST;  
			invoker.weaponstatus[HDMMS_WHICH]=which;
		}goto ready;
	fire:
		TNT1 A 10{
			int which=invoker.weaponstatus[HDMMS_WHICH]-1;
			if(which<HDMMC_FIRST)which=HDMMC_LAST;
			invoker.weaponstatus[HDMMS_WHICH]=which;
		}goto ready;
	reload:
		TNT1 A 12{
			int which=invoker.weaponstatus[HDMMS_WHICH];
			int magmax=invoker.magmax[which];
			if(
				//something can be loaded
				countinv(invoker.ammotype[which])
				&&(
					//either not full or room for a full
					!A_JumpIfInventory(invoker.magtype[which],0,"null")
					||invoker.weaponstatus[which]<magmax-1
				)
			){
				//transfer one into the mag
				A_TakeInventory(invoker.ammotype[which],1);
				invoker.weaponstatus[which]++;
				A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);

				//if full, add one to the full mag pile and reset
				if(invoker.weaponstatus[which]>=magmax){  
					invoker.weaponstatus[which]=0;
					A_GiveInventory(invoker.magtype[which],1);
					A_PlaySound("weapons/pocket",5);
					setweaponstate("nope");
					return;
				}
			}
		}
		TNT1 A 0 A_Refire();
		goto ready;
	unload:
		TNT1 A 2{
			int which=invoker.weaponstatus[HDMMS_WHICH];
			int magmax=invoker.magmax[which];
			if(
				//take one full mag before removing one from it
				invoker.weaponstatus[which]<1
				&&countinv(invoker.magtype[which])
				&&!A_JumpIfInventory(invoker.ammotype[which],0,"null")
			){
				A_TakeInventory(invoker.magtype[which],1);
				invoker.weaponstatus[which]=magmax;
				A_PlaySound("weapons/pocket",5);
				A_SetTics(12);
			}
			if(
				//take one out of the mag
				invoker.weaponstatus[which]>0  
				&&!A_JumpIfInventory(invoker.ammotype[which],0,"null")
			){
				A_GiveInventory(invoker.ammotype[which],1);
				invoker.weaponstatus[which]--;
				A_PlaySound("weapons/rifleclick",CHAN_WEAPON);
			}
			if(!invoker.weaponstatus[which]){
				setweaponstate("nope");
				return;
			}
		}
		TNT1 A 0 A_Refire();
		goto ready;
	}
	int magmax[8];
	class<inventory>magtype[8];class<hdupk>magtype2[8];
	class<inventory>ammotype[8];	
	string magmsg[8];
	override void initializewepstats(bool idfa){
		weaponstatus[HDMMS_WHICH]=HDMMC_FIRST;
		magmax[HDMMS_PIST]=15;
		magmax[HDMMS_SMG]=30;
		magmax[HDMMS_LIB]=30;
		magmax[HDMMS_BOSS]=10;
		magtype[HDMMS_PIST]="HDPistolMag";
		magtype[HDMMS_SMG]="HDSMGMag";
		magtype[HDMMS_LIB]="LiberatorMag";
		magtype[HDMMS_BOSS]="BossClip";
		magtype2[HDMMS_PIST]="HD9mPMag";
		magtype2[HDMMS_SMG]="HD9mSMag";
		magtype2[HDMMS_LIB]="LiberatorMagP";
		magtype2[HDMMS_BOSS]=null;
		ammotype[HDMMS_PIST]="HDPistolAmmo";
		ammotype[HDMMS_SMG]="HDPistolAmmo";
		ammotype[HDMMS_LIB]="SevenMilAmmo";
		ammotype[HDMMS_BOSS]="SevenMilAmmo";
		magmsg[HDMMS_PIST]="15-round pistol magazines";
		magmsg[HDMMS_SMG]="30-round SMG magazines";
		magmsg[HDMMS_LIB]="30-round Liberator magazines";
		magmsg[HDMMS_BOSS]="10-round Boss clips";
	}
}
enum MagManagerNumbers{
	HDMMS_WHICH=1,
	HDMMS_PIST=2,
	HDMMS_SMG=3,
	HDMMS_LIB=4,
	HDMMS_BOSS=5,

	HDMMC_FIRST=2, //# of first HDMMS_<magtype> entry
	HDMMC_LAST=5, //# of last HDMMS_<magtype> entry
}
