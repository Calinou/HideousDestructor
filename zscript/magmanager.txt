// ------------------------------------------------------------
// Manually reload magazines! (and clips too!)
// ------------------------------------------------------------

class MagManager:HDWeapon{
	default{
		+weapon.wimpy_weapon
		+weapon.no_auto_switch
		weapon.selectionorder 1011;
	}
	int which;
	hdmagammo thismag;
	name thismagtype;
	string uitext;
	name magtypes[7];
	override void beginplay(){
		super.beginplay();
		uitext="Mag Manager\n\nNo mags selected";
		thismagtype="HDMagAmmo";
		if(owner)thismag=hdmagammo(owner.findinventory(thismagtype));
		magtypes[0]="HD9mMag15";
		magtypes[1]="HD9mMag30";
		magtypes[2]="HD4mMag";
		magtypes[3]="HD7mClip";
		magtypes[4]="HD7mMag";
		magtypes[5]="HDBattery";
//		magtypes[6]="HDMagAmmo";
	}
	override inventory createtossable(int amt){
		if(owner)owner.A_DropInventory(thismagtype,1);
		return null;
	}
	action bool GetMags(){
		invoker.thismag=hdmagammo(findinventory(invoker.thismagtype));
		return !!(invoker.thismag);
	}
	action void NextMagType(bool forwards=true){
		int findindex=0;
		int magrange=invoker.magtypes.size();
		for(int i=0;i<magrange;i++){
			if(invoker.thismagtype==invoker.magtypes[i]){
				findindex=i;
			}
		}
		for(int i=0;i<magrange;i++){
			if(forwards)findindex++;else findindex--;
			if(findindex<0)findindex=magrange-1;
			else if(findindex>=magrange)findindex=0;
			if(findinventory(invoker.magtypes[findindex])){
				invoker.thismag=HDMagAmmo(findinventory(invoker.magtypes[findindex]));
				invoker.thismagtype=invoker.magtypes[findindex];
				break;
			}
		}
		invoker.UpdateText();
	}
	action void Insert(){
		if(!GetMags())return;
		invoker.thismag.Insert();
		invoker.UpdateText();
	}
	action void Extract(){
		if(!GetMags())return;
		invoker.thismag.Extract();
		invoker.UpdateText();
	}
	action void LastToFirst(bool forwards=true){
		if(!GetMags())return;
		if(forwards)invoker.thismag.LastToFirst();
		else invoker.thismag.FirstToLast();
		invoker.UpdateText();
	}
	action void LowestToLast(){
		if(!GetMags())return;
		invoker.thismag.LowestToLast();
		invoker.UpdateText();
	}
	void UpdateText(){
		string toui=string.format(
			"\cf///\cyMag Manager\cf\\\\\\\n\n\cqFire\cu/\cqAltfire\cu  select mag\n\cqFiremode\cu+\cqF\cu/\cqAF\cu  select ammo type\n\cqReload\cu/\cqUnload\cu  load/unload selected mag\n\cqFM\cu+\cqR\cu/\cqU\cu  move to/from backpack\n\cqDrop\cu  drop current mag\n\cqZoom\cu bring up lowest mag\n\cqDrop one\cu drop some loose rounds\n\n\n\cj%s\n",thismag?thismag.nicename:"No mags selected."
		);
		if(thismag){
			thismagtype=thismag.getclassname();
			if(thismag.mags.size()>0){
				int finalindex=thismag.mags.size()-1;
				for(int i=0;i<finalindex;i++){
					toui.appendformat(" %i ",thismag.mags[i]);
				}
				toui.appendformat("\n\nCurrent Mag: \cy%i",thismag.mags[finalindex]);
			}
			if(thismag is "HDBattery"){
				let battt=HDBattery(thismag).chargemode;
				string batts="uNone";
				if(battt==hdbattery.BATT_CHARGEMAX)batts="eAuto";
				else if(battt==hdbattery.BATT_CHARGETOP)batts="ySelected";
				toui.appendformat("\nCurrently Charging: \c%s\n(Hit \cqReload\cu to cycle modes)",batts);
			}
			else if(thismag.roundtype!="")toui.appendformat("\nSpare Rounds: \ce%i",owner.countinv(thismag.roundtype));
		}
		uitext=toui;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	nope:
		---- A 1{
			A_WeaponMessage(invoker.uitext);
			A_ClearRefire();
			A_WeaponReady(WRF_NOFIRE);
		}
		---- A 0{
			int inp=getplayerinput(MODINPUT_BUTTONS);
			if(
				inp&BT_ATTACK||
				inp&BT_ALTATTACK||
				inp&BT_RELOAD||
				inp&BT_ZOOM||
				inp&BT_USER1||
				//all this just to get rid of user2 :(
				inp&BT_USER3||
				inp&BT_USER4
			)setweaponstate("nope");
		}
		---- A 0 A_Jump(256,"ready");
	select:
		TNT1 A 0{
			if(!invoker.thismag)NextMagType();
			invoker.UpdateText();
		}goto super::select;
	ready:
		TNT1 A 1{
			A_WeaponMessage(invoker.uitext);
			A_WeaponReady(WRF_ALL&~WRF_ALLOWUSER2);
			if(!invoker.thismag)NextMagType();
			invoker.UpdateText();
		}
		goto readyend;
	fire:
		TNT1 A 1{
			if(PressingFireMode())NextMagType(false);
			else LastToFirst(false);
		}goto nope;
	altfire:
		TNT1 A 1{
			if(PressingFireMode())NextMagType();
			else LastToFirst();
		}goto nope;
	reload:
		TNT1 A 8{
			if(PressingFireMode())PutIntoBackpack(invoker.thismagtype);
			else Insert();
		}goto readyend;
	unload:
		TNT1 A 4{
			if(PressingFireMode()){
				GetFromBackpack(invoker.thismagtype);
				A_SetTics(8);
			}else Extract();
		}goto readyend;
	firemode:
		TNT1 A 0;
		goto nope;
	zoom:
		TNT1 A 0 LowestToLast();
		goto nope;
	}


	//backpack stuff
	int,hdbp GetBPIndex(name type){
		let bbb=HDBP(owner.findinventory("HDBP"));
		if(!bbb)return -1,null;
		if(type=="HD9mMag15")return bbb.pistindex,bbb;
		else if(type=="HD9mMag30")return bbb.smgindex,bbb;
		else if(type=="HD4mMag")return bbb.zmindex,bbb;
		else if(type=="HD7mMag")return bbb.libindex,bbb;
		else if(type=="HD7mClip")return bbb.bossindex,bbb;
		else if(type=="HDBattery")return bbb.batteryindex,bbb;
		else return -1,null;
	}
	action void GetFromBackpack(name type){
		int which;hdbp bbb;
		[which,bbb]=invoker.GetBPIndex(type);
		if(which>=0)HDMagAmmo.GiveMag(self,type,bbb.BPTakeMag(which));
	}
	action void PutIntoBackpack(name type){
		int which;hdbp bbb;
		[which,bbb]=invoker.GetBPIndex(type);
		if(which>=0)bbb.BPAddMag(type);
	}
}

