// ------------------------------------------------------------
// Manually reload magazines! (and clips too!)
// ------------------------------------------------------------
class MagManager:HDWeapon{
	default{
		+weapon.wimpy_weapon
		+weapon.no_auto_switch
		weapon.selectionorder 1011;
	}
	int which;
	hdmagammo thismag;
	name thismagtype;
	string uitext;
	name magtypes[7];
	override void beginplay(){
		super.beginplay();
		uitext="Mag Manager\n\nNo mags selected";
		thismagtype="HDMagAmmo";
		if(owner)thismag=hdmagammo(owner.findinventory(thismagtype));
		magtypes[0]="HD9mMag15";
		magtypes[1]="HD9mMag30";
		magtypes[2]="HD4mMag";
		magtypes[3]="HD7mClip";
		magtypes[4]="HD7mMag";
		magtypes[5]="HDBattery";
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let thismag=magmanager(hdw).thismag;
		if(!thismag||thismag.mags.size()<1)return;
		int countermaxx=thismag.mags.size();
		int countermax=countermaxx-1;
		double scl=2.;
		string roundsprite="";
		name roundtype="";
		int howmanylines=countermax/5;
		int linecounter=countermax%5;
		if(linecounter<0)linecounter=4;

		int offx=-64-18*howmanylines;
		int offy=80;
		for(int i=0;i<countermaxx;i++){

			bool imax=i==countermax;
			if(imax){
				offx=-6;
				offy=50;
			}else if(
				linecounter<1
			){
				howmanylines--;
				offx=-64-18*howmanylines;
				offy=80;
				linecounter=4;
			}else{
				if(i>0){
					offx+=2;
					offy-=9;
				}
				linecounter--;
			}

			int thismagamt=thismag.mags[i];
			string magsprite="";
			if(thismag is "HD9mMag30"){
				roundtype="HDPistolAmmo";
				roundsprite="PBRSA0";
				if(thismagamt>0)magsprite="CLP3A0";
				else magsprite="CLP3B0";
			}else if(thismag is "HD9mMag15"){
				roundtype="HDPistolAmmo";
				roundsprite="PBRSA0";
				if(thismagamt>0)magsprite="CLP2A0";
				else magsprite="CLP2B0";
			}else if(thismag is "HD4mMag"){
				roundtype="FourMilAmmo";;
				roundsprite="RBRSICE";
				if(thismagamt>=51)magsprite="ZMAGA0";
				else if(thismagamt>0)magsprite="ZMAGB0";
				else magsprite="ZMAGC0";
			}else if(thismag is "HD7mMag"){
				roundtype="SevenMilAmmo";
				roundsprite="RBRSA3A7";
				if(thismagamt>0)magsprite="RMAGA0";
				else magsprite="RMAGB0";
				scl=1.7;
			}else if(thismag is "HD7mClip"){
				roundtype="SevenMilAmmo";
				roundsprite="RBRSA3A7";
				if(thismagamt>8)magsprite="RCLPA0";
				else if(thismagamt>6)magsprite="RCLPB0";
				else if(thismagamt>4)magsprite="RCLPC0";
				else if(thismagamt>2)magsprite="RCLPD0";
				else if(thismagamt>0)magsprite="RCLPE0";
				else magsprite="RCLPF0";
				scl=1.5;
			}else if(thismag is "HDBattery"){
				roundsprite="CELPA0";
				if(thismagamt>13)magsprite="CELLA0";
				else if(thismagamt>6)magsprite="CELLB0";
				else if(thismagamt>0)magsprite="CELLC0";
				else magsprite="CELLD0";
				scl=0.8;
			}
			sb.drawimage(magsprite,(offx,offy),
				sb.DI_SCREEN_CENTER|sb.DI_ITEM_RIGHT_TOP,
				scale:(scl,scl)*(imax?1.6:1.)
			);
			sb.drawstring(
				imax?sb.pSmallFont:sb.mamountfont,sb.FormatNumber(thismag.mags[i]),
				(offx+2,offy),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_LEFT,
				imax?font.CR_SAPPHIRE:font.CR_BROWN
			);
		}

		if(roundsprite!=""){
			bool helptext=cvar.getcvar("hd_helptext",hpl.player).getbool();
			offx+=40;
			if(roundsprite=="CELPA0"){
				scl=0.4;
				let battt=HDBattery(thismag).chargemode;
				string batts="uNone";
				if(battt==hdbattery.BATT_CHARGEMAX)batts="eAuto";
				else if(battt==hdbattery.BATT_CHARGETOP)batts="ySelected";
				sb.drawstrings(
					sb.pSmallFont,string.format("%s\c%s%s",helptext?"Charging: ":"",batts,helptext?"\n(\cqReload\cu to cycle)":""),
					(offx+2,offy),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_LEFT
				);
			}else{
				scl*=1.6;
				sb.drawstring(
					sb.pSmallFont,sb.FormatNumber(hpl.countinv(roundtype)),
					(offx+2,offy),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_LEFT,
					font.CR_BROWN
				);
			}
			sb.drawimage(roundsprite,(offx,offy),
				sb.DI_SCREEN_CENTER|sb.DI_ITEM_RIGHT_TOP,
				scale:(scl,scl)
			);
		}
	}
	override inventory createtossable(int amt){
		if(owner)owner.A_DropInventory(thismagtype,1);
		return null;
	}
	override void DropOneAmmo(int amt){
		let mmm=HDMagAmmo(thismag);
		if(!mmm)return;
		let what=mmm.roundtype;
		if(!what)return;
		int howmany=min(max(1,hdmath.maxinv(owner,what)*0.2),owner.countinv(what),100);
		if(!howmany)return;
		owner.A_DropInventory(what,howmany);
	}
	action bool GetMags(){
		invoker.thismag=hdmagammo(findinventory(invoker.thismagtype));
		return !!(invoker.thismag);
	}
	action void NextMagType(bool forwards=true){
		int findindex=0;
		int magrange=invoker.magtypes.size();
		for(int i=0;i<magrange;i++){
			if(invoker.thismagtype==invoker.magtypes[i]){
				findindex=i;
			}
		}
		for(int i=0;i<magrange;i++){
			if(forwards)findindex++;else findindex--;
			if(findindex<0)findindex=magrange-1;
			else if(findindex>=magrange)findindex=0;
			if(findinventory(invoker.magtypes[findindex])){
				invoker.thismag=HDMagAmmo(findinventory(invoker.magtypes[findindex]));
				invoker.thismagtype=invoker.magtypes[findindex];
				break;
			}
		}
		invoker.UpdateText();
	}
	action void Insert(){
		if(!GetMags())return;
		invoker.thismag.Insert();
		invoker.UpdateText();
	}
	action void Extract(){
		if(!GetMags())return;
		invoker.thismag.Extract();
		invoker.UpdateText();
	}
	action void LastToFirst(bool forwards=true){
		if(!GetMags())return;
		if(forwards)invoker.thismag.LastToFirst();
		else invoker.thismag.FirstToLast();
		invoker.UpdateText();
	}
	action void LowestToLast(){
		if(!GetMags())return;
		invoker.thismag.LowestToLast();
		invoker.UpdateText();
	}
	void UpdateText(){
		string toui=string.format(
			"\cf///\cyMag Manager\cf\\\\\\\n\n\cqFire\cu/\cqAltfire\cu  select mag\n\cqFiremode\cu+\cqF\cu/\cqAF\cu  select ammo type\n\cqReload\cu/\cqUnload\cu  load/unload selected mag\n\cqFM\cu+\cqR\cu/\cqU\cu  move to/from backpack\n\cqDrop\cu  drop current mag\n\cqZoom\cu bring up lowest mag\n\cqDrop one\cu drop some loose rounds\n\n\n\cj%s\n",thismag?thismag.nicename:"No mags selected."
		);
		if(thismag){
			thismagtype=thismag.getclassname();
		}
		uitext=toui;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	nope:
		---- A 1{
			A_WeaponMessage(invoker.uitext);
			A_ClearRefire();
			A_WeaponReady(WRF_NOFIRE);
		}
		---- A 0{
			int inp=getplayerinput(MODINPUT_BUTTONS);
			if(
				inp&BT_ATTACK||
				inp&BT_ALTATTACK||
				inp&BT_RELOAD||
				inp&BT_ZOOM||
				inp&BT_USER1||
				//all this just to get rid of user2 :(
				inp&BT_USER3||
				inp&BT_USER4
			)setweaponstate("nope");
		}
		---- A 0 A_Jump(256,"ready");
	select:
		TNT1 A 0{
			if(!invoker.thismag)NextMagType();
			invoker.UpdateText();
		}goto super::select;
	ready:
		TNT1 A 1{
			A_WeaponMessage(invoker.uitext);
			A_WeaponReady(WRF_ALL&~WRF_ALLOWUSER2);
			if(!invoker.thismag)NextMagType();
			invoker.UpdateText();
		}
		goto readyend;
	fire:
		TNT1 A 1{
			if(PressingFireMode())NextMagType(false);
			else LastToFirst(false);
		}goto nope;
	altfire:
		TNT1 A 1{
			if(PressingFireMode())NextMagType();
			else LastToFirst();
		}goto nope;
	reload:
		TNT1 A 8{
			if(PressingFireMode())PutIntoBackpack(invoker.thismagtype);
			else Insert();
		}goto readyend;
	unload:
		TNT1 A 4{
			if(PressingFireMode()){
				GetFromBackpack(invoker.thismagtype);
				A_SetTics(8);
			}else Extract();
		}goto readyend;
	firemode:
		TNT1 A 0;
		goto nope;
	zoom:
		TNT1 A 0 LowestToLast();
		goto nope;
	}


	//backpack stuff
	int,hdbp GetBPIndex(name type){
		let bbb=HDBP(owner.findinventory("HDBP"));
		if(!bbb)return -1,null;
		if(type=="HD9mMag15")return bbb.pistindex,bbb;
		else if(type=="HD9mMag30")return bbb.smgindex,bbb;
		else if(type=="HD4mMag")return bbb.zmindex,bbb;
		else if(type=="HD7mMag")return bbb.libindex,bbb;
		else if(type=="HD7mClip")return bbb.bossindex,bbb;
		else if(type=="HDBattery")return bbb.batteryindex,bbb;
		else return -1,null;
	}
	action void GetFromBackpack(name type){
		let bp=hdbackpack(findinventory("HDBackpack"));
		if(!bp)return;
		int which=bp.invclasses.find(type);
		if(bp.havenone(which))return;
		array<string> amts;amts.clear();
		bp.amounts[which].split(amts," ");
		HDMagAmmo.GiveMag(self,type,amts[amts.size()-1].toint());
		amts.pop();
		string newamts="";
		for(int i=0;i<amts.size();i++){
			newamts=newamts..(i?" ":"")..amts[i];
		}
		bp.amounts[which]=newamts;
		bp.weaponbulk();
		bp.updatemessage(bp.index);
	}
	action void PutIntoBackpack(name type){
		let bp=hdbackpack(findinventory("HDBackpack"));
		if(!bp)return;
		let mg=HDMagAmmo(findinventory(type));
		if(!mg)return;
		let gdbt=getdefaultbytype((class<hdmagammo>)(type));
		double minspace=gdbt.magbulk+gdbt.roundbulk*gdbt.maxperunit;
		if(HDCONST_BPMAX-bp.bulk<minspace)return;
		int which=bp.invclasses.find(type);
		string newamts=bp.amounts[which];
		newamts=newamts..(newamts==""?"":" ")..mg.mags[mg.mags.size()-1];
		mg.mags.pop();
		mg.amount--;
		bp.amounts[which]=newamts;
	}
}

