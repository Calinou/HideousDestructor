// ------------------------------------------------------------
// Tracked magazines (and clips and batteries)
// ------------------------------------------------------------
/*
	for the mags:
		debris empty only if not retaining
		debris empty should die and become pickup
		different sprite depending on empty
	for the weapons:
		unload:
			int tounload=blahblahblah
			set the loaded variable to -1
			HDMagAmmo.SpawnMag(self,<type>,tounload);
			HDMagAmmo.GiveMag(self,<type>,tounload);
		reload:
			A_JumpIfInventory(magtype,"reallyreload");
			int toload=mags.TakeMag(true);
			if(toload<0)return;
			let the player load an empty
	for the magmanager:
		actor mags;
		every state, check if mags is null
		fire/altfire: switch mag types
		reload/unload: insert/extract
		zoom: bring up lowest
		firemode: bring last to first
		dropweapon: drop 1 mag
		altreload: place into backpack
		firemode3: retrieve from backpack
	for the magamanger display:
		if(!mags){
			drawstring...
		}
		for(int i=0;i<mags.amount;i++){
			drawsprite...
			drawnum...
		}
	for backpack
		predefine a dynarray in the backpack for each such item
		place:
			check for room
			takemag, push
		retrieve:
			int frombp=bpmags[bpmags.size()-1];
			bpmags.pop();
			HDMagAmmo.GiveMag(self,type,frombp);
	for levelreset
		Consolidate all
	for bulk
		cell: just return amount*cell mass
	override void getbulk(){
		double result=0;
		SyncAmount();
		for(int i=0;i<amount;i++){
			result+=max(
				minimum per mag: full mag * 0.3
				# of rounds * 1.1 * per round
			);
		}
	}
*/
class HDMagAmmo:HDAmmo{
	array<int> mags; //or clips or batteries, whatever
	int maxperunit;
	property maxperunit:maxperunit;
	class<inventory> roundtype;
	property roundtype:roundtype;
	double roundbulk;
	property roundbulk:roundbulk;
	default{
		hdmagammo.maxperunit 30;
		hdmagammo.roundtype "HDPistolAmmo";
		hdmagammo.roundbulk 0;
		inventory.maxamount 10;
	}
	//add mag amount or size as appropriate
	//should be called at the start of each interaction
	//should NEVER reduce the array to none if it was not none before
	void SyncAmount(){
		int amountmorethanmags=amount-mags.size();
		if(!amountmorethanmags)return;
		if(amountmorethanmags>0){
			for(int i=0;i<amountmorethanmags;i++){
//				mags.push(maxperunit);
mags.push(random(1,maxperunit));  //testing
			}
		}else amount=mags.size();
	}
	//remove one mag and return the value
	//use to load or drop
	int TakeMag(bool getmax){
		SyncAmount();
		if(amount<1)return -1;
		int maxindex=mags.find(maxperunit);
		//take the first in the stack
		//(because last is probably what you just unloaded)
		if(!getmax||maxindex==mags.size()){
			int firstmag=mags[0];
			mags.delete(0);
			amount=mags.size();
			return firstmag;
		}
		//take one full mag
		mags.delete(maxindex);
		amount=mags.size();
		return maxperunit;
	}
	//take last mag and put it at index zero
	void LastToFirst(){
		SyncAmount();
		if(amount<2)return;
		mags.insert(0,mags[mags.size()-1]);
		mags.pop();
	}
	//bring up the lowest-value mag
	//useful for refilling and discarding
	void LowestToLast(){
		SyncAmount();
		if(amount<2)return;
		int lowestindex=-1;
		int lowest=maxperunit;
		for(int i=0;i<amount;i++){
			if(lowest>mags[i]){
				lowest=mags[i];
				lowestindex=i;
			}
		}
		if(lowestindex<0)return;
		mags.delete(lowestindex);
		mags.push(lowest);
	}
	//add a mag
	//use to unload
	void AddAMag(int addamt=-1){
		SyncAmount();
		if(amount>=maxamount)return;
		if(addamt<0||addamt>maxperunit)addamt=maxperunit;
		mags.push(addamt);
		amount=mags.size();
	}
	//give a mag to someone
	static bool GiveMag(actor receiver,class<inventory> type,int giveamt){
		if(receiver.findinventory(type)){
			let mmm=HDMagAmmo(receiver.findinventory(type));
			if(mmm.amount>=mmm.maxamount){
				HDMagAmmo.SpawnMag(receiver,type,giveamt);
				return false;
			}
			mmm.AddAMag(giveamt);
		}else{
			receiver.A_GiveInventory(type,1);
			let mmm=HDMagAmmo(receiver.findinventory(type));
			mmm.mags.clear();
			mmm.amount=0;
			mmm.AddAMag(giveamt);
			mmm.amount=mmm.mags.size();
		}
		return true;
	}
	//spawn and drop
	//mostly for unloads
	static actor SpawnMag(actor giver,class<inventory> type,int giveamt){
		let mmm=HDMagAmmo(giver.spawn(type,giver.pos));
		mmm.addz(giver.height-12);mmm.angle=giver.angle;
		mmm.A_ChangeVelocity(2,0,-1,CVF_RELATIVE);
		mmm.vel+=giver.vel;
		mmm.amount=0;
		mmm.mags.clear();
		mmm.AddAMag(giveamt);
		mmm.amount=mmm.mags.size();
		return mmm;
	}

	//add and extract rounds
	//return values can be used to stop loops or affect animations
	bool Extract(){
		SyncAmount();
		if(
			mags[mags.size()-1]<1
			||owner.A_JumpIfInventory(roundtype,0,"null")
		)return false;
		HDF.Give(owner,roundtype,1);
		mags[mags.size()-1]--;
		return true;
	}
	bool Insert(){
		SyncAmount();
		if(
			mags[mags.size()-1]>=maxperunit
			||!owner.countinv(roundtype)
		)return false;
		owner.A_TakeInventory(roundtype,1,TIF_NOTAKEINFINITE);
		mags[mags.size()-1]++;
		return true;
	}
	//consolidate
	void Consolidate(){
		SyncAmount();
		if(amount<2)return;
		int totalrounds=0;
		for(int i=0;i<amount;i++){
			totalrounds+=mags[i];
			mags[i]=0; //keep the empties, do NOT call clear()!
		}
		for(int i=0;i<amount;i++){
			int toinsert=min(maxperunit,totalrounds);
			mags[i]=toinsert;
			totalrounds-=toinsert;
			if(totalrounds<1)break;
		}
	}
	//max everything
	void MaxCheat(){
		mags.clear();
		SyncAmount();
	}

	//debug: log amounts
	void LogAmounts(){
		string stt=string.format("%i  %s: ",amount,getclassname());
		for(int i=0;i<amount;i++){
			stt=string.format("%s %i",stt,mags[i]);
		}
		A_Log(stt);
	}

	override void actualpickup(actor other){
		if(!other)other=picktarget;
		if(!other)return;
		name gcn=getclassname();

		//you're only ever picking up one at a time
//		if(HDMath.MaxInv(other,gcn)<=other.countinv(gcn))return;
		let alreadygot=HDMagAmmo(other.findinventory(gcn));
		if(alreadygot){
			while(alreadygot.amount>=alreadygot.maxamount){
				int thismag=mags[0];
				bool thisisbetter=false;
				for(int i=0;i<alreadygot.amount;i++){
					if(thismag>alreadygot.mags[i]){
						thisisbetter=true;
						break;
					}
				}
				if(!thisisbetter)return;
				alreadygot.LowestToLast();
				other.A_DropInventory(gcn,1);
			}
		}

		//misc. effects
		other.A_PlaySound(pickupsound,CHAN_AUTO);
		other.A_Log(string.format("\cg%s",pickupmessage()),true);

		//if no information, give max, otherwise use own array info
		if(mags.size()<1)other.A_GiveInventory(gcn);
		else HDMagAmmo.GiveMag(other,gcn,mags[0]);
		destroy();
	}
	override inventory createtossable(int amt){
		if(amount<1)return null;
		amt=min(max(1,amt),amount);
		inventory iii;
		for(int i=0;i<amt;i++){
			iii=inventory(spawn(getclassname(),owner.pos));
			if(iii){
				iii.addz(owner.height*0.6);
				iii.angle=owner.angle;iii.target=owner;iii.vel=owner.vel;
				iii.A_ChangeVelocity(4,frandom(-0.6,0.6),frandom(0.9,1.1),CVF_RELATIVE);
				if(droptranslation&&owner){
					actor onr=owner;
					if(iii)iii.translation=onr.translation;
				}
				let mmm=HDMagAmmo(iii);
				mmm.mags.clear();
				mmm.mags.push(takemag(false));
			}
		}
		return iii;
	}

	states{
	use:
		TNT1 A 0{
			invoker.SyncAmount();
			if(!invoker.amount||!hd_debug)return;

			invoker.LogAmounts();

			//stuff to test
			//give hdmagammo 10;wait 1;use hdmagammo
			//A_Log("Consolidate");invoker.Consolidate();
			//A_Log("SpawnMag");HDMagAmmo.SpawnMag(self,invoker.getclassname(),5);
				//MaxCheat
				//LastToFirst
				//LowestToLast
				//Extract
				//Insert
				//Consolidate
				//TakeMag(true)
				//TakeMag(false)
				//SpawnMag
			//invoker.LogAmounts();
		}fail;
	spawn:
		TNT1 A 1;
		TNT1 A 0{
			invoker.SyncAmount();
			while(invoker.amount>1){
				inventory aa=inventory(spawn(invoker.getclassname(),invoker.pos));
				aa.amount=1;invoker.amount--;
				let aaa=HDMagAmmo(aa);
				aaa.mags.clear();
				aaa.mags.push(invoker.takemag(false));
			}
			if(!invoker.mags[0])invoker.setstatelabel("spawnempty");
			else invoker.setstatelabel("spawn2");
		}stop;
	spawn2:
		CELL A -1;
		stop;
	spawnempty:
		CELL D -1;
		stop;
	}
}
