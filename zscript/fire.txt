// ------------------------------------------------------------
// Setting things on fire
// ------------------------------------------------------------
class ImmunityToFire:InventoryFlag{
	override void attachtoowner(actor user){
		super.attachtoowner(user);
		if(owner){
			actoriterator it=actoriterator.create(-7677,"HDFire");
			actor fff;
			while(fff=it.next()){
				if(fff.target==owner){
					fff.destroy();
				}
			}
		}
	}
}
class HDFireEnder:InventoryFlag{
	default{
		inventory.maxamount 5;
	}
}
class HDFireDouse:InventoryFlag{
	default{
		inventory.maxamount 20;
	}
	override void DoEffect(){
		if(amount>0)amount--;
	}
}


class HDFireStarter:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			if(!self) return;
			if(hd_debug)a_log("deprecated fire. please use A_Immolate() directly.");
			actor f=spawn("HDFire",pos);
			f.target=self;f.master=self.target;
			f.stamina=random(40,80);
			return;
		}fail;
	}
}


//how to immolate
extend class HDActor{
	//should be in HDActor once all conversions are done
	//A_Immolate(tracer,target);
	virtual void A_Immolate(
		actor victim,
		actor perpetrator,
		int duration=0
	){
		if(!victim
			||(
				perpetrator&&
				perpetrator.bdontharmspecies&&
				perpetrator.getspecies()==victim.getspecies()
			)
		){
			victim=spawn("PersistentDamager",self.pos);
			victim.target=perpetrator;
		}
		actor f=victim.spawn("HDFire",victim.pos);
		f.target=victim;f.master=perpetrator;
		if(duration<1) f.stamina=random(40,80);
		else f.stamina=duration;
		if(victim is "PlayerPawn")f.changetid(-7677);
	}
}
//fire actor
class HDFire:IdleDummy{
	int halfrad;int minz;int maxz;int lastheight;
	default{
		+bloodlessimpact
		obituary "%o was burned by %k.";
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(target){
			stamina=target.ApplyDamageFactor("Thermal",stamina);
			if(target is "PlayerPawn" || target is "HDPlayerCorpse"){
				changetid(-7677);
				if(!skill||hd_lowdamage)stamina=max(1,stamina*0.3);
			}
			if(!target.bshootable && stamina>20)stamina=20;
		}
		if(
			A_CheckProximity("null","HDFire",64,12,CPXF_CHECKSIGHT|CPXF_SETTRACER)
			&&(!target||tracer.target==target)
		){
			tracer.stamina+=stamina;
			destroy();
			return;
		}
		if(hd_debug)A_Log(string.format("fire duration \ci%i",stamina));
	}
	override void ondestroy(){
		if(target&&target is "PersistentDamager")target.destroy();
		super.ondestroy();
	}
	states{
	spawn:
		TNT1 A 3{
			if(target&&target.countinv("ImmunityToFire")){
				destroy();return;
			}

			if(waterlevel){
				destroy();
				if(waterlevel<2)spawn("HDSmoke",pos);
				return;
			}
			if(!master)master=self;
			if(!target){
				target=spawn("PersistentDamager",self.pos);
				target.target=master;
				if(stamina>20)stamina=20;
			}
			setorigin(target.pos,false);
			A_SetTics(clamp(random(3,30-stamina*0.1),2,12));
			if(stamina<=0 || target.countinv("HDFireEnder")){
				A_TakeFromTarget("HDFireEnder");
				spawn("HDSmoke",pos);
				destroy();
				return;
			}
			int ds=target.countinv("HDFireDouse");
			if(ds){
				target.A_TakeInventory("HDFireDouse",ds);
				stamina-=ds;
			}
			stamina--;

			//set flame spawn point
			if(lastheight!=target.height){ //poll only height
				halfrad=max(4,target.radius*0.5);
				lastheight=target.height;
				minz=lastheight*0.2;
				maxz=max(lastheight*0.75,4);
			}

			//position and spawn flame
			setorigin(pos+(
					random(-halfrad,halfrad),
					random(-halfrad,halfrad),
					random(minz,maxz)
			),false);
			actor sp=spawn("HDFlameRed",pos);
			sp.vel+=target.vel+(frandom(-2,2),frandom(-2,2),frandom(-1,3));
			A_PlaySound("misc/firecrkl",CHAN_AUTO,0.4,0,6);

			//check if player
			let tgt=HDPlayerPawn(target);
			if(tgt){
				if(tgt.playercorpse){
					target=tgt.playercorpse;
				}
				A_AlertMonsters();
				A_TakeFromTarget("PowerFrightener");
				A_GiveToTarget("WeaponBusy",1);
				A_GiveToTarget("IsMoving",4);
			}else stamina-=3; //monsters assumed to be trying to douse
			//damage the target
			target.damagemobj(self,master,randompick(0,0,0,1),"Thermal",flags:DMG_NO_FACTOR);
			target.A_GiveInventory("Heat",10);
		}
		wait;
	}
}




//an invisible actor that constantly damages anything it collides with
/* special uses:
	threshold = damage interval
	damage = *exact* damage amount each time
	accuracy = temporary number tracking interval
	gibhealth = % chance to immolate
*/
class PersistentDamager:HDActor{
	vector3 relpos;
	default{
		+noblockmap +missile
		height 8;radius 8;threshold 35;damage 1;accuracy 0;gibhealth 5;
		damagetype "thermal";
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(master)relpos=self.pos-master.pos;
	}
	override void tick(){
		if(globalfreeze||level.Frozen) return;

		if(master)setorigin(master.pos+relpos,false);
		trymove(pos.xy,true);

		//nexttic
		if(CheckNoDelay()){
			if(tics>0)tics--;  
			while(!tics){
				if(!SetState(CurState.NextState)){
					return;
				}
			}
		}
	}
	override bool CanCollideWith(actor other,bool passive){
		if(
			passive
			||(
				target &&
				target.bdontharmspecies &&
				other.getspecies()==target.getspecies()
			)
		){
			return false;
		}
		other.A_GiveInventory("Heat",1);
		return false;
	}
	states{
	spawn:
		TNT1 A -1;
	}
}





//new shit

class Heat:Inventory{
	double volume;
	double inversevolumeratio;
	double baseinversevolumeratio;
	double realamount;
	int effectivemass;
	enum HeatNumbers{
		HEATNUM_DEFAULTVOLUME=12*12*48*4,
	}
	states{spawn:TNT1 A 0;stop;}
	default{
		inventory.amount 1;
		inventory.maxamount 9999999;
	}
	override void attachtoowner(actor user){
		super.attachtoowner(user);
		volume=(user.radius*user.radius*user.height)*4;
		baseinversevolumeratio=HEATNUM_DEFAULTVOLUME/max(0.000001,volume);
		inversevolumeratio=baseinversevolumeratio;
		effectivemass=max(user.mass,user.spawnhealth());
		A_SetSize(owner.radius,owner.height);
	}
	override void DoEffect(){
		if(!owner){destroy();return;}

		//make adjustments based on armour and player status
		let hdp=hdplayerpawn(owner);
		if(hdp){
			inversevolumeratio=baseinversevolumeratio;
			if(owner.countinv("WornRadsuit"))amount/=5;
			int al=hdp.armourlevel;
			if(al==1){
				inversevolumeratio*=0.4;
				amount=max(0,amount-5);
			}else if(al==3)inversevolumeratio*=0.6;
			if(
				hdp.health<1&&
				hdp.playercorpse
			){
				hdp.playercorpse.A_GiveInventory("Heat",amount);
				Heat(hdp.playercorpse.findinventory("Heat")).realamount+=realamount;
				amount=0;
				realamount=0;
				return;
			}
		}

		//convert given to real
		if(amount){
			realamount+=amount*inversevolumeratio;
			amount=0;
		}
		//clamp number to zero
		if(realamount<1){
			realamount=0;
			return;
		}

		//flame
		if(realamount>frandom(90,140)&&!(int(realamount)%3)){
			if(owner.bshootable){
				realamount+=2.;
				if(realamount>150&&!random(0,7))owner.A_GiveInventory("SawGib",1);
			}
			actor aaa=spawn("HDFlameRed",owner.pos+(
				frandom(-radius,radius),
				frandom(-radius,radius),
				frandom(2,owner.height)
			));
			aaa.target=owner;
			aaa.A_PlaySound("misc/firecrkl",CHAN_BODY,clamp(realamount*0.001,0,0.2));
		}

		//damage
		if(realamount>50){
			double dmgamt=realamount*0.01;
			if(dmgamt<1.&&frandom(0.,1.)<dmgamt)dmgamt=1;
			owner.damagemobj(self,self,dmgamt,"thermal",DMG_NO_ARMOR);
			if(!owner)return;
		}

		//cooldown
		double reduce=inversevolumeratio;
		if(owner.vel dot owner.vel > 4)reduce*=1.6;
		if(absangle(angle,owner.angle)>16)reduce*=1.6;
		realamount-=reduce;
		angle=owner.angle;

//		A_LogFloat(realamount);
	}
}





