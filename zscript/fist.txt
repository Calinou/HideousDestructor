// ------------------------------------------------------------
//   Fist
// ------------------------------------------------------------
class FistTurner:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			if(radius<50){
				A_SetAngle(angle+random(-4,4)*30,SPF_INTERPOLATE);
				A_SetPitch(randompick(-90,90),SPF_INTERPOLATE);
				if(mass<50)vel.z+=0.1;
			}
		}fail;
	}
}
class HDNullPuff:HDFistPuff{
	default{
		+puffonactors
		stamina 0;
	}
	states{
	spawn:
		TNT1 A 0 nodelay;
		stop;
	}
}
class HDZerkGibber:FastProjectile{
	default{
		+hittarget
		projectile;speed 1;height 2;radius 2;
	}
	states{
	spawn:
		TNT1 A 0 nodelay{vel*=64;}
		TNT1 A 1;
		stop;
	xdeath:
		TNT1 A 1 A_GiveInventory("ZerkGib",1,AAPTR_TARGET);
		stop;
	}
}
class Ring:HDWeapon replaces Fist{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	default{
		+WEAPON.WIMPY_WEAPON +WEAPON.MELEEWEAPON +WEAPON.NOALERT +WEAPON.NO_AUTO_SWITCH
		+forcepain
		obituary "%o made %k take the kid gloves off.";
		attacksound "*fist";
		weapon.selectionorder 1;
		weapon.kickback 120;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.5;
		weapon.slotnumber 1;
	}
	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
	}
	action void HDPunch(int dmg){
		actor a;int b;
		[a,b]=LineAttack(angle,64,pitch,0,"none",
			"HDFistPuncher",flags:LAF_NORANDOMPUFFZ
		);
		if(!a)return;

		//actual puff effect if the shot connects
		LineAttack(angle,64,pitch,0,"none",
			countinv("PowerStrength")?"HDZerkPuff":"HDFistPuff"
		);

		if(!a.tracer)return;
		actor punchee=a.tracer;

		//come in swinging
		let onr=hdplayerpawn(invoker.owner);
		if(onr){
			int iy=onr.iyaw;
			int ip=onr.ipitch;
			if(abs(ip)>abs(iy))iy=-ip;
			if(iy>0)iy*=0.01;
			else if(iy<0)iy*=0.02;
			dmg+=min(abs(iy),dmg*2);

			//need to be well grounded
			if(onr.zat<pos.z)dmg*=0.5;
		}

		//shit happens
		dmg*=frandom(0.6,1.6);


		//other effects
		if(
			punchee.mass<200
			||(
				punchee.radius*2<punchee.height
				&& a.pos.z>punchee.pos.z+punchee.height*0.6
			)
		){
			if(abs(onr.iyaw)>100){
				punchee.A_SetAngle(punchee.angle-onr.iyaw*0.01,SPF_INTERPOLATE);
			}
			if(abs(onr.ipitch)>100){
				punchee.A_SetPitch(punchee.angle+onr.ipitch*0.01,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&& punchee.health>0
			&& punchee.findstate("pain")
			&& a.pos.z>punchee.pos.z+punchee.height*0.75
		){
			punchee.setstatelabel("pain");
			dmg*=frandom(1.1,1.8);
		}

		if(hd_debug)A_Log(string.format("Punched %s for %i damage!",punchee.getclassname(),dmg));
		punchee.damagemobj(a,self,dmg,"SmallArms0");

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}
	states{
	ready:
		TNT1 A 1{
			A_WeaponReady(WRF_ALLOWRELOAD);
			A_TakeInventory("IsKicking");
			invoker.flicked=false;
		}goto readyend;
	reload:
		PUNF A 0 A_JumpIfInventory("IsFemale",1,3);
		PUNG A 0 A_JumpIfInventory("IsMale",1,2);
		TNT1 A 0;
		#### A 1 offset(0,50){
			if(floorz==pos.z)A_Recoil(-3);
		}
		#### A 1 offset(0,36);
		#### A 0 A_JumpIfInventory("PowerStrength",1,"ZerkFlick");
		#### AAAAAAA 0 A_CustomPunch((1),1,CPF_PULLIN,"HDNullPuff",36);
		goto flickend;
	zerkflick:
		#### AAAAAAA 0 A_CustomPunch((random(1,3)),1,CPF_PULLIN,"HDNullPuff",36);
	flickend:
		#### AA 1 offset(0,38){invoker.flicked=true;}
		#### A 1 offset(0,42);
		#### A 1 offset(0,50);
		goto fire;
	fire:
	hold:
	althold:
		PUNF A 0 A_JumpIfInventory("IsFemale",1,3);
		PUNG A 0 A_JumpIfInventory("IsMale",1,2);
		TNT1 A 0;
		#### A 0 A_GiveInventory("IsKicking");
		#### A 0 A_JumpIfInventory("PowerStrength",1,"zerkpunch");
		goto punch;
	punch:
		#### B 1 offset(0,32);
		#### D 0 HDPunch(invoker.flicked?15:10);
		#### D 6;
		#### CB 3;
		TNT1 A 3;
		TNT1 A 1 A_ReFire();
		goto ready;
	zerkpunch:
		#### D 0 A_Recoil(-1);
		#### D 0 HDPunch(invoker.flicked?150:100);
		#### D 3;
		#### CB 1;
		TNT1 A 5;
		TNT1 A 2 A_ReFire();
		goto ready;
	altfire:
		#### A 1 offset(0,36);
		#### A 1 offset(0,50);
		TNT1 A 0 A_GiveInventory("IsKicking",1);
		TNT1 A 2 A_CheckFloor("lunge");
		goto kick;
	lunge:
		TNT1 A 0 A_JumpIfInventory("Fatigue",30,"hold");
		TNT1 A 0 A_GiveInventory("Fatigue",3);
		TNT1 A 0 A_JumpIfInventory("PowerStrength",1,2);
		TNT1 A 0 A_Jump(256,3);
		TNT1 AA 1 A_Recoil(-random(4,8)*(countinv("PowerStrength")*2+1));
		TNT1 A 0 offset(0,50) A_Recoil(-4);
		TNT1 A 1 offset(0,70) A_Recoil(-4);
	kick:
		TNT1 A 0 A_GiveInventory("Fatigue",2);
		TNT1 A 8 A_SpawnItemEx("KickProjectile",0,0,4,vel.x,vel.y,vel.z,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM);
		TNT1 A 5 A_JumpIfInventory("PowerStrength",1,1);
		PUNF A 0 A_Refire();
		goto ready;
	spawn:
		TNT1 A 1;
		TNT1 A 0 A_GiveToTarget("DropMisc");
		stop;
	}
}
class IsKicking:InventoryFlag{}


class HDFistPuncher:IdleDummy{
	default{
		+bloodlessimpact +nodecal +hittracer +puffonactors
		stamina 1;
	}
}
class HDFistPuff:BulletPuffMedium{
	default{
		+bloodlessimpact +hittracer +puffonactors
		stamina 6;scale 0.5;
	}
	states{
	xdeath:
		TNT1 A 6{
			if(hd_debug)sprite=(GetSpriteIndex("BAL2A0"));
			A_PlaySound("misc/punch");
			tracer.A_GiveInventory("FistTurner");
		}stop;
	}
}
class HDZerkPuff:HDFistPuff{
	default{
		-bloodlessimpact -nodecal
		decal "BulletChipSmall";
	}
}

