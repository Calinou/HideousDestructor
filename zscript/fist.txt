// ------------------------------------------------------------
// Fist
// ------------------------------------------------------------
class HDFistPuncher:IdleDummy{
	default{
		+bloodlessimpact +nodecal +hittracer +puffonactors
		stamina 1;
	}
}
class HDFist:HDWeapon replaces Fist{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	default{
		+WEAPON.WIMPY_WEAPON +WEAPON.MELEEWEAPON +WEAPON.NOALERT +WEAPON.NO_AUTO_SWITCH
		+forcepain
		obituary "%o made %k take the kid gloves off.";
		attacksound "*fist";
		weapon.selectionorder 100;
		weapon.kickback 120;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.5;
		weapon.slotnumber 1;
		hdweapon.nicename "Fists";
		hdweapon.refid HDLD_FIST;
	}
	override inventory CreateTossable(int amount){
		owner.A_GiveInventory("DropMisc");
		owner.A_GiveInventory("HDFist");
		owner.A_SelectWeapon("HDFist");
		return null;//super.createtossable(amount);
	}
	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
	}
	action void A_CheckGender(statelabel st){
		if(player){
			int gnd=player.getgender();
			if(!gnd)gnd=getspriteindex("PUNGA0");
			else if(gnd==1)gnd=getspriteindex("PUNFA0");
			else gnd=getspriteindex("TNT1A0");
			player.findPSprite(PSP_WEAPON).sprite=gnd;
		}
	}
	action void HDPunch(int dmg){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle,48,pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		if(!punchy)return;

		//actual puff effect if the shot connects
		LineAttack(angle,48,pitch,0,"none",
			countinv("PowerStrength")?"BulletPuffMedium":"BulletPuffSmall",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
		);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else dmg+=HDMath.TowardsEachOther(self,punchee)*2;

		//come in swinging
		let onr=hdplayerpawn(self);
		if(onr){
			int iy=max(abs(player.cmd.pitch),abs(player.cmd.yaw));
			if(iy>0)iy*=100;
			else if(iy<0)iy*=200;
			dmg+=min(abs(iy),dmg*2);

			//need to be well grounded
			if(floorz<pos.z)dmg*=0.5;
		}

		//shit happens
		dmg*=frandom(0.6,1.6);


		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&& punchee.health>0
			&& !(punchee is "HDBarrel")
			&& punchee.findstate("pain")
			&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.setstatelabel("pain");
			dmg*=frandom(1.1,1.8);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Punched %s for %i damage!",pch,dmg));
		}
		if(dmg*2>punchee.health)punchee.A_PlaySound("misc/bulletflesh",CHAN_BODY);  
		if(punchee.health>0)punchee.damagemobj(self,self,dmg,"SmallArms0");
		else HDF.Give(punchee,"SawGib",dmg*0.2);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}
	static void kick(actor kicker,actor kickee,actor kicking){
		kickee.A_PlaySound("weapons/smack",CHAN_BODY);
		bool kzk=kicker.countinv("PowerStrength");
		kickee.damagemobj(kicking,kicker,kzk?random(20,40):random(10,20),"bashing");
		if(kickee&&!kickee.bnopain&&kickee.health>0&&random(0,4))kickee.setstatelabel("pain");
		vector3 kickdir=(kickee.pos-kicker.pos).unit();
		if(kickee)kickee.vel=kickdir*(kzk?10:2);
		kicker.vel-=kickdir;
	}
	states{
	female:
		PUNF A 0;goto nope;
	male:
		PUNG A 0;goto nope;
	ready:
		TNT1 A 1{
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
		}goto readyend;
	reload:
		TNT1 A 0 A_CheckGender("flick");
	flick:
		#### A 1 offset(0,50){
			if(floorz==pos.z)A_Recoil(-3);
		}
		#### A 1 offset(0,36);
		#### A 0 A_JumpIfInventory("PowerStrength",1,"ZerkFlick");
		#### AAAAAAA 0 A_CustomPunch((1),1,CPF_PULLIN,"HDFistPuncher",36);
		goto flickend;
	zerkflick:
		#### AAAAAAA 0 A_CustomPunch((random(1,3)),1,CPF_PULLIN,"HDFistPuncher",36);
	flickend:
		#### AA 1 offset(0,38){invoker.flicked=true;}
		#### A 1 offset(0,42);
		#### A 1 offset(0,50);
		goto fire;
	fire:
	hold:
	althold:
		TNT1 A 0 A_CheckGender("startfire");
	startfire:
		#### A 0 A_JumpIfInventory("PowerStrength",1,"zerkpunch");
		goto punch;
	punch:
		#### B 1 offset(0,32);
		#### D 0 HDPunch(12);
		#### D 6;
		#### CB 3;
		TNT1 A 3;
		TNT1 A 1 A_ReFire();
		goto ready;
	zerkpunch:
		#### D 0 A_Recoil(-1);
		#### D 0 HDPunch(invoker.flicked?140:100);
		#### D 3;
		#### CB 1;
		TNT1 A 5;
		TNT1 A 2 A_ReFire();
		goto ready;
	altfire:
		#### A 1 offset(0,36);
		#### A 1 offset(0,50);
		TNT1 A 2 A_CheckFloor("lunge");
		goto kick;
	lunge:
		TNT1 A 0{
			hdplayerpawn hdp=hdplayerpawn(self);
			if(hdp){
				if(hdp.fatigue>=30){setweaponstate("hold");return;}
				else hdp.fatigue+=3;
			}
			A_Recoil(-4);
		}
		TNT1 AA 1{
			if(countinv("PowerStrength"))A_Recoil(-random(12,24));
		}
		TNT1 A 1 A_Recoil(-4);
	kick:
		TNT1 A 13{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			flinetracedata ktl;
			LineTrace(angle,radius*1.6,0,offsetz:10,data:ktl);
			if(ktl.hitactor)invoker.kick(self,ktl.hitactor,invoker);
			if(countinv("PowerStrength"))A_SetTics(8);
		}
		PUNF A 0 A_Refire();
		goto ready;
	spawn:
		TNT1 A 1;
		stop;
	}
}

