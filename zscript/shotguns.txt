// ------------------------------------------------------------
// Shotgun (Common)
// ------------------------------------------------------------
class HDShotgun:HDWeapon{
	default{
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		scale 0.6;
		inventory.pickupmessage "You got the pump-action shotgun!";
		obituary "%o was brutally pumped full of %k's hot, manly lead.";
	}
	int handshells;
	action void EmptyHand(){
		while(invoker.handshells>0){
 			if(invoker.handshells>=4){
				invoker.handshells-=4;
				A_SpawnItemEx("ShellPickup",
					cos(pitch)*1,1,height-7-sin(pitch)*1,
					cos(pitch)*cos(angle)+vel.x,
					cos(pitch)*sin(angle)+vel.y,
					-sin(pitch)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else{
				invoker.handshells--;
				A_SpawnItemEx("HDFumblingShell",
					cos(pitch)*5,1,height-7-sin(pitch)*5,
					cos(pitch)*cos(angle)*random(1,4)+vel.x,
					cos(pitch)*sin(angle)*random(1,4)+vel.y,
					-sin(pitch)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
	}
	override void DetachFromOwner(){
		EmptyHand();
		super.detachfromowner();
	}
}

// ------------------------------------------------------------
// A 12-gauge pump for protection
// ------------------------------------------------------------
class Hunter:HDShotgun replaces Shotgun{
	default{
		weapon.selectionorder 31;
		weapon.slotnumber 3;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		scale 0.6;
		inventory.pickupmessage "You got the pump-action shotgun!";
		obituary "%o was brutally pumped full of %k's hot, manly lead.";
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(owner&&owner.player){
			if(cvar.getcvar("hd_huntauto",owner.player).getint())
				weaponstatus[0]|=HUNTF_AUTO;
				else weaponstatus[0]&=~HUNTF_AUTO;
		}
	}
	action void A_Chamber(){
		int chm=invoker.weaponstatus[HUNTS_CHAMBER];
		invoker.weaponstatus[HUNTS_CHAMBER]=0;
		if(invoker.weaponstatus[HUNTS_TUBE]>0){  
			invoker.weaponstatus[HUNTS_CHAMBER]=2;
			invoker.weaponstatus[HUNTS_TUBE]--;
		}
		if(chm>1)A_SpawnItemEx("HDFumblingShell",  
			cos(pitch)*8,0,height-7-sin(pitch)*8,
			vel.x+cos(pitch)*cos(angle-random(86,90))*5,
			vel.y+cos(pitch)*sin(angle-random(86,90))*5,
			vel.z+sin(pitch)*random(4,6),
			0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);else if(chm>0)A_SpawnItemEx("HDSpentShell",
			cos(pitch)*8,0,height-7-sin(pitch)*8,
			vel.x+cos(pitch)*cos(angle-random(86,90))*6,
			vel.y+cos(pitch)*sin(angle-random(86,90))*6,
			vel.z+sin(pitch)*random(5,7),
			0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
	}
	states{
	select0:
		SHTG A 0;
		goto select0big;
	deselect0:
		SHTG A 0;
		goto deselect0big;
	firemode:
		SHTG A 0{
			invoker.weaponstatus[0]^=HUNTF_AUTO;
		}goto nope;
	ready:
		SHTG A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	reloadSS:
		SHTG A 1 offset(1,34);
		SHTG A 2 offset(2,34);
		SHTG A 3 offset(3,36);
	reloadSSrestart:
		SHTG A 6 offset(3,35);
		SHTG A 9 offset(4,34);
		SHTG A 4 offset(3,34){
			int hnd=min(
				countinv("HDShellAmmo"),
				12-invoker.weaponstatus[HUNTS_SIDESADDLE],
				max(1,health/22),
				3
			);
			if(hnd<1)setweaponstate("reloadSSend");
			else{
				A_TakeInventory("HDShellAmmo",hnd);
				invoker.handshells=hnd;
			}
			invoker.weaponstatus[HUNTS_SIDESADDLE]+=invoker.handshells;  
		}
		SHTG A 0 {
			if(
				PressingUnload()
				||PressingReload()
				||PressingFire()
				||PressingAltfire()
			)setweaponstate("reloadSSend");
			else if(
				invoker.weaponstatus[HUNTS_SIDESADDLE]<12
				&&countinv("HDShellAmmo")
			)setweaponstate("ReloadSSrestart");
		}
	reloadSSend:
		SHTG A 3 offset(2,34);
		SHTG A 1 offset(1,34);
		goto nope;
	fire:
		SHTG E 0 A_JumpIf(invoker.weaponstatus[HUNTS_CHAMBER]==2,"shoot");
		goto nope;
	shoot:
		SHTG A 2;
		SHTG A 1 offset(0,36){
			actor p=spawn("HDBullet00b",pos+(0,0,height-6));
			p.target=self;p.angle=angle;p.pitch=pitch;
			p.vel+=(
				frandom(-1.,1.),frandom(-1.,1.),frandom(-1.,1.)
			);
			p.speed+=10*frandom(-1.,1.);
			p.vel+=self.vel;


			A_GunFlash();
			invoker.weaponstatus[HUNTS_CHAMBER]=1;
			A_PlaySound("weapons/hunter",CHAN_WEAPON);
			if(invoker.weaponstatus[0]&HUNTF_AUTO)
				A_MuzzleClimb(randompick(-1,1)*1.4,-3.4);
				else A_MuzzleClimb(randompick(-1,1)*1.,-2.6);
		}
		SHTG E 1 A_MuzzleClimb(randompick(-1,1)*1.,-0.3);
		SHTG E 0{
			if(
				invoker.weaponstatus[0]&HUNTF_AUTO
				&&random(0,127)
			)setweaponstate("chamberauto");
		}goto ready;
	altfire:
	chamber:
		SHTG A 1 A_PlaySound("weapons/shotgr",5);
		SHTG AE 1 A_MuzzleClimb(0,-frandom(1.,1.6));
		SHTG E 0 A_Refire("LongStroke");
		SHTG EA 2 A_MuzzleClimb(0,frandom(1.,1.6));
		goto ready;
	longstroke:
		SHTG F 2 A_MuzzleClimb(frandom(1.,2.));
		SHTG F 0{
			A_Chamber();
			A_MuzzleClimb(-frandom(1.,2.));
		}
		SHTG EA 2 A_MuzzleClimb(frandom(1.,1.6));
		goto nope;
	chamberauto:
		SHTG A 2;
		SHTG A 1{
			A_Chamber();
			A_Refire("nope");
		}goto ready;
	flash:
		SHTF B 1 bright{
			A_Light2();
			HDFlashAlpha(-32);
		}
		TNT1 A 1 A_ZoomFactor(0.98,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		TNT1 A 0{
			A_Light0();
			A_AlertMonsters();
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		}stop;
	altreload:
	reloadfrompockets:
		SHTG A 0{
			int ppp=countinv("HDShellAmmo");
			if(ppp<1)setweaponstate("nope");
				else if(ppp<1)
					invoker.weaponstatus[0]&=~HUNTF_FROMPOCKETS;
				else invoker.weaponstatus[0]|=HUNTF_FROMPOCKETS;
		}goto startreload;
	reload:
	reloadfromsidesaddles:
		SHTG A 0{
			int sss=invoker.weaponstatus[HUNTS_SIDESADDLE];
			int ppp=countinv("HDShellAmmo");
			if(ppp<1&&sss<1)setweaponstate("nope");
				else if(sss<1)
					invoker.weaponstatus[0]|=HUNTF_FROMPOCKETS;
				else invoker.weaponstatus[0]&=~HUNTF_FROMPOCKETS;
		}goto startreload;
	startreload:
		SHTG A 1{
			if(
				invoker.weaponstatus[HUNTS_CHAMBER]>1
				&&invoker.weaponstatus[HUNTS_TUBE]>=7
			){
				if(
					invoker.weaponstatus[HUNTS_SIDESADDLE]<12
					&&countinv("HDShellAmmo")
				)setweaponstate("ReloadSS");
				else setweaponstate("nope");
			}
		}
		SHTG BC 4 A_MuzzleClimb(frandom(1.2,2.4),-frandom(1.2,2.4));
		SHTG D 1;
		SHTG D 0 A_PlaySound("weapons/huntopen",CHAN_WEAPON);
	reloadstarthand:
		SHTG D 1 offset(0,34);
		SHTG D 1 offset(0,36);
		SHTG D 1 offset(0,38);
		SHTG D 4 offset(0,36){
			invoker.weaponstatus[HUNTS_CHAMBER]=clamp(invoker.weaponstatus[HUNTS_CHAMBER],0,2);
			if(invoker.weaponstatus[HUNTS_CHAMBER]!=1)setweaponstate("reloadfast");
		}
		SHTG D 4 offset(0,34);
		SHTG D 4 offset(0,36){
			invoker.weaponstatus[HUNTS_CHAMBER]=0;
			double cp=cos(pitch);
			A_SpawnItemEx("HDSpentShell",
				cp*8,0,height-7-sin(pitch)*8,
				vel.x+cp*cos(angle-random(86,90))*5,
				vel.y+cp*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}
		SHTG D 4 offset(0,40);
	reloadfast:
		SHTG D 4 offset(0,40){
			if(invoker.weaponstatus[0]&HUNTF_FROMPOCKETS)setweaponstate("reloadpocket");
			else{
				int ssh=min(
					invoker.weaponstatus[HUNTS_SIDESADDLE],
					7-invoker.weaponstatus[HUNTS_TUBE],
					max(1,health/22),
					3
				);
				if(ssh<1){
					setweaponstate("reloadend");
					return;
				}
				if(health>40)A_SetTics(0);
				invoker.handshells=ssh;
				invoker.weaponstatus[HUNTS_SIDESADDLE]-=ssh;
			}
		}
		SHTG D 3 offset(0,42)A_PlaySound("weapons/pocket",CHAN_WEAPON);
		SHTG D 4 offset(0,41);
		goto reloadashell;
	reloadpocket:
		SHTG D 4 offset(0,39){
			int ssh=min(
				countinv("HDShellAmmo"),
				7-invoker.weaponstatus[HUNTS_TUBE],
				max(1,health/22),
				3
			);
			if(ssh<1){
				setweaponstate("reloadend");
				return;
			}
			invoker.handshells=ssh;
			A_TakeInventory("HDShellAmmo",ssh,TIF_NOTAKEINFINITE);
		}
		SHTG D 6 offset(0,40) {if(health>40)A_SetTics(0);}
		SHTG D 4 offset(0,40) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		SHTG D 8 offset(0,42) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		SHTG D 6 offset(0,41) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		SHTG D 6 offset(0,40);
		goto reloadashell;

	reloadashell:
		SHTG D 2 offset(0,36)A_PlaySound("weapons/huntreload",CHAN_WEAPON);
		SHTG D 4 offset(0,34){
			invoker.handshells--;
			if(invoker.weaponstatus[HUNTS_CHAMBER]!=2)
				invoker.weaponstatus[HUNTS_CHAMBER]=2;
				else invoker.weaponstatus[HUNTS_TUBE]++;
		}
		SHTG DDDDDD 1 offset(0,33){
			if(
				PressingReload()
				||PressingUnload()
				||PressingFire()
				||PressingAltfire()
				||invoker.weaponstatus[HUNTS_TUBE]>=7  
				||(
					invoker.handshells<1&&(
						invoker.weaponstatus[HUNTS_SIDESADDLE]<1
						||invoker.weaponstatus[0]&HUNTF_FROMPOCKETS
					)&&
					!countinv("HDShellAmmo")
				)
			)setweaponstate("reloadend");
			else if(invoker.handshells<1)setweaponstate("reloadstarthand");
		}goto reloadashell;
	reloadend:
		SHTG D 6 offset(0,34);
		SHTG D 2 offset(0,34) A_PlaySound("weapons/huntopen",CHAN_WEAPON);
		SHTG D 1 offset(0,36);
		SHTG D 1 offset(0,34);
		SHTG CB 4;
		goto ready;
	zoom:
	cannibalize:
		SHTG A 2 offset(0,36){
			if(!countinv("Slayer"))setweaponstate("nope");
		}
		SHTG A 2 offset(0,40) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		SHTG A 6 offset(0,42);
		SHTG A 4 offset(0,44);
		SHTG A 6 offset(0,42);
		SHTG A 2 offset (0,36){
			let sss=hdweapon(findinventory("Slayer"));
			if(sss){
				int totake=min(
					sss.weaponstatus[SLAYS_SIDESADDLE],
					AmmoCap("HDShellAmmo")-countinv("HDShellAmmo"),
					3
				);
				if(totake>0){
					sss.weaponstatus[SLAYS_SIDESADDLE]-=totake;
					A_GiveInventory("HDShellAmmo",totake);
				}
			}
		}goto ready;

	unloadSS:
		SHTG A 2 offset(1,34){
			if(invoker.weaponstatus[HUNTS_SIDESADDLE]<1)setweaponstate("nope");
		}
		SHTG A 1 offset(2,34);
		SHTG A 1 offset(3,36) A_PlaySound("weapons/pocket",CHAN_WEAPON);
	unloadSSLoop1:
		SHTG A 5 offset(4,36){	//from ss to hand
			int hnd=min(invoker.weaponstatus[HUNTS_SIDESADDLE],4);
			invoker.handshells=hnd;
			invoker.weaponstatus[HUNTS_SIDESADDLE]-=hnd;
		}
		SHTG A 3 offset(5,37){	//pocket if there's space
			int limhnd=min(invoker.handshells,
				AmmoCap("HDShellAmmo")
				-countinv("HDShellAmmo")
				-invoker.handshells
			);
			if(limhnd>0){  
				A_SetTics(8);
				A_WeaponReady(WRF_NOFIRE);
				A_PlaySound("weapons/pocket");
				invoker.handshells-=limhnd;
				A_GiveInventory("HDShellAmmo",limhnd);
			}
			EmptyHand();
		}
		SHTG A 2 offset(4,36){	//decide whether to loop
			if(
				PressingUnload()
				||PressingReload()
				||PressingFire()
				||PressingAltfire()
				||invoker.weaponstatus[HUNTS_SIDESADDLE]<1
			)setweaponstate("unloadSSend");
		}goto unloadSSLoop1;
	unloadSSend:
		SHTG A 3 offset(4,35);
		SHTG A 2 offset(3,35);
		SHTG A 1 offset(2,34);
		SHTG A 1 offset(1,34);
		goto nope;
	unload:
		SHTG A 1{
			if(invoker.weaponstatus[HUNTS_SIDESADDLE]>0)setweaponstate("unloadSS");  
			else if(
				invoker.weaponstatus[HUNTS_CHAMBER]<1
				&&invoker.weaponstatus[HUNTS_TUBE]<1
			)setweaponstate("nope");
		}
		SHTG BC 4 A_MuzzleClimb(frandom(1.2,2.4),frandom(1.2,2.4));
		SHTG D 1 A_PlaySound("weapons/huntopen",CHAN_WEAPON);
		SHTG D 1 offset(0,34);
		SHTG D 1 offset(0,36);
		SHTG D 1 offset(0,38);
		SHTG D 4 offset(0,36){
			if(invoker.weaponstatus[HUNTS_CHAMBER]<1)
			setweaponstate("unloadtube");
		}
		SHTG D 4 offset(0,34);
		SHTG D 3 offset(0,36){
			int chm=invoker.weaponstatus[HUNTS_CHAMBER];
			invoker.weaponstatus[HUNTS_CHAMBER]=0;
			if(chm>1){  
				A_PlaySound("weapons/huntreload",CHAN_WEAPON);
				if(A_JumpIfInventory("HDShellAmmo",0,"null"))A_SpawnItemEx("HDFumblingShell",
					cos(pitch)*8,0,height-7-sin(pitch)*8,
					vel.x+cos(pitch)*cos(angle-random(86,90))*5,
					vel.y+cos(pitch)*sin(angle-random(86,90))*5,
					vel.z+sin(pitch)*random(4,6),
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);else{
					A_GiveInventory("HDShellAmmo",1);
					A_PlaySound("weapons/pocket",CHAN_BODY);
					A_SetTics(5);
				}
			}else if(chm>0)A_SpawnItemEx("HDSpentShell",
				cos(pitch)*8,0,height-7-sin(pitch)*8,
				vel.x+cos(pitch)*cos(angle-random(86,90))*5,
				vel.y+cos(pitch)*sin(angle-random(86,90))*5,
				vel.z+sin(pitch)*random(4,6),
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}
		SHTG D 4 offset(0,40);
	unloadtube:
		SHTG D 6 offset(0,40){
			if(invoker.weaponstatus[HUNTS_TUBE]<1)setweaponstate("reloadend");
			else invoker.handshells=0;
		}
	unloadloop:
		SHTG D 8 offset(1,41){
			if(
				invoker.handshells>=3||
				invoker.weaponstatus[HUNTS_TUBE]<1
			)setweaponstate("unloadloopend");
			else{
				invoker.handshells++;
				invoker.weaponstatus[HUNTS_TUBE]--;
			}
		}
		SHTG D 4 offset(0,40) A_PlaySound("weapons/huntreload",CHAN_WEAPON);
		loop;
	unloadloopend:
		SHTG D 6 offset(1,41);
		SHTG D 3 offset(1,42){
			int rmm=ammocap("HDShellAmmo")-countinv("HDShellAmmo");
			if(rmm>0){  
				A_PlaySound("weapons/pocket");
				A_SetTics(8);
				A_GiveInventory("HDShellAmmo",min(rmm,invoker.handshells));
				invoker.handshells=max(invoker.handshells-rmm,0);
			}
		}
		SHTG D 6{
			EmptyHand();
			if (
				invoker.weaponstatus[HUNTS_TUBE]<1
				||PressingUnload()
				||PressingReload()
				||PressingFire()
				||PressingAltfire()
			)setweaponstate("reloadend");
		}goto unloadloop;
	spawn:
		HUNT ABCDEFG -1 nodelay{
			int ssh=invoker.weaponstatus[HUNTS_SIDESADDLE];
			if(ssh>=11)frame=0;  
			else if(ssh>=9)frame=1;
			else if(ssh>=7)frame=2;
			else if(ssh>=5)frame=3;
			else if(ssh>=3)frame=4;
			else if(ssh>=1)frame=5;
			else frame=6;
		}
	}
	override void InitializeWepStats(bool idfa=false){
		if(!owner){
			weaponstatus[0]=randompick(0,0,0,HUNTF_AUTO);
		}
		weaponstatus[HUNTS_CHAMBER]=2;
		weaponstatus[HUNTS_TUBE]=7;
		weaponstatus[HUNTS_SIDESADDLE]=12;
	}
}
enum hunterstatus{
	HUNTF_AUTO=1,
	HUNTF_JAMMED=2,
	HUNTF_UNLOADONLY=4,
	HUNTF_FROMPOCKETS=8,

	HUNTS_CHAMBER=1,
	HUNTS_TUBE=2,
	HUNTS_SIDESADDLE=3,
	HUNTS_HEAT=4,
	HUNTS_HAND=5,
};






// ------------------------------------------------------------
// Super Shotgun
// ------------------------------------------------------------
class Slayer:HDShotgun replaces HDShotgun{
	default{
		weapon.selectionorder 30;
		weapon.slotnumber 3;
		inventory.pickupmessage "You got the double-barreled shotgun!";
		weapon.bobrangex 0.18;
		weapon.bobrangey 0.7;
		scale 0.6;
		obituary "%o was brutally pumped full of %k's hot, manly lead.";
	}
	override void PostBeginPlay(){
		if(Wads.CheckNumForName("SHT2B0",wads.ns_sprites,-1,false)<0){
			if(owner){
				actor ownor=owner;
				destroy();
				if(hd_debug)ownor.A_Log("doom 1 shotty lol",true);
				ownor.A_GiveInventory("Hunter");
				ownor.A_SelectWeapon("Hunter");
			}else{
				spawn("Hunter",pos,ALLOW_REPLACE);
				destroy();
			}
			return;
		}
		super.postbeginplay();
	}
	states{
	select0:
		SHT2 A 0;
		goto select0small;
	deselect0:
		SHT2 A 0;
		goto deselect0small;
	ready:
		TNT1 A 0; //let the PostBeginPlay handle the presence of the relevant sprite
		SHT2 A 1{
			if(
				PressingFire()
				&&PressingAltfire()
				&&invoker.weaponstatus[SLAYS_CHAMBER1]==2
				&&invoker.weaponstatus[SLAYS_CHAMBER2]==2
			)A_Overlay(PSP_FLASH,"flashboth");
			else if(
				PressingFire()
				&&invoker.weaponstatus[SLAYS_CHAMBER1]==2
			)A_Overlay(11,"flashleft");
			else if(
				PressingAltfire()
				&&invoker.weaponstatus[SLAYS_CHAMBER2]==2
			)A_Overlay(12,"flashright");
			A_WeaponReady(WRF_ALL);
		}goto readyend;

	flashleft:
		SHT1 J 1 bright{
			A_Light2();
			HDFlashAlpha(64,false,overlayid());
			A_PlaySound("weapons/slayersingle",6);
			A_ZoomFactor(0.98,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			invoker.weaponstatus[SLAYS_CHAMBER1]=1;

			actor p=spawn("HDBullet00bfl",pos+(0,0,height-6));
			p.target=self;p.angle=angle;p.pitch=pitch;
			p.vel+=(
				frandom(-1.,1.),frandom(-1.,1.),frandom(-1.,1.)
			);
			p.speed+=10*frandom(-1.,1.);
			p.vel+=self.vel;
		}
		TNT1 A 1{
			A_Light0();
			A_MuzzleClimb(1.6,-3.9,1.6,-3.9);
		}goto flasheither;
	flashright:
		SHT1 N 1 bright{
			A_Light2();
			HDFlashAlpha(64,false,overlayid());
			A_PlaySound("weapons/slayersingle",6);
			A_ZoomFactor(0.98,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			invoker.weaponstatus[SLAYS_CHAMBER2]=1;

			actor p=spawn("HDBullet00bfr",pos+(0,0,height-6));
			p.target=self;p.angle=angle;p.pitch=pitch;
			p.vel+=(
				frandom(-1.,1.),frandom(-1.,1.),frandom(-1.,1.)
			);
			p.speed+=10*frandom(-1.,1.);
			p.vel+=self.vel;
		}
		TNT1 A 1{
			A_Light0();
			A_MuzzleClimb(-1.6,-3.9,-1.6,-3.9);
		}goto flasheither;
	flasheither:
		TNT1 A 0{
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_AlertMonsters();
			setweaponstate("recoil");
		}stop;
	flashboth:
		SHT2 J 1 bright{
			A_Light2();
			HDFlashAlpha(128);
			A_PlaySound("weapons/slayersingle",5);
			A_PlaySound("weapons/slayersingle",6);
			A_ZoomFactor(0.95,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			invoker.weaponstatus[SLAYS_CHAMBER1]=1;
			invoker.weaponstatus[SLAYS_CHAMBER2]=1;


			actor p=spawn("HDBullet00bf2",pos+(0,0,height-6));
			p.target=self;p.angle=angle;p.pitch=pitch;
			p.vel+=(
				frandom(-1.,1.),frandom(-1.,1.),frandom(-1.,1.)
			);
			p.speed+=10*frandom(-1.,1.);
			p.vel+=self.vel;
		}
		TNT1 A 1{
			A_Light0();
			A_MuzzleClimb(1.2,-8.,1.2,-8.8);
		}goto flasheither;
	recoil:
		SH2G K 1;
		goto ready;

	altreload:
		SHT2 A 0{
			if(countinv("HDShellAmmo"))
				invoker.weaponstatus[0]|=SLAYF_FROMPOCKETS;
			else setweaponstate("nope");
		}goto reloadstart;
	reload:
		SHT2 A 0{
			if(
				invoker.weaponstatus[SLAYS_CHAMBER1]>1&&
				invoker.weaponstatus[SLAYS_CHAMBER2]>1
			)setweaponstate("reloadss");

			invoker.weaponstatus[0]&=~SLAYF_UNLOADONLY;
			if(invoker.weaponstatus[SLAYS_SIDESADDLE]>0)  
				invoker.weaponstatus[0]&=~SLAYF_FROMPOCKETS;
			else if(countinv("HDShellAmmo"))
				invoker.weaponstatus[0]|=SLAYF_FROMPOCKETS;
			else setweaponstate("nope");
		}goto reloadstart;
	reloadstart:
	unloadstart:
		SH2G K 2 offset(0,34) EmptyHand();
		SH2G K 2 offset(0,40);
		SH2G K 7 offset(0,46) A_PlaySound("weapons/sshoto",CHAN_AUTO);
		SH2G M 5 offset(0,46) A_MuzzleClimb(
			frandom(0.6,1.2),frandom(0.6,1.2),
			frandom(0.6,1.2),frandom(0.6,1.2),
			frandom(1.2,2.4),frandom(1.2,2.4)
		);
		SH2G L 3 offset(0,36){
			//eject whatever is already loaded
			for(int i=0;i<2;i++){
				int chm=invoker.weaponstatus[SLAYS_CHAMBER1+i];
				invoker.weaponstatus[SLAYS_CHAMBER1+i]=0;
				if(chm>1){  
					if(health<90&&countinv("IsMoving"))A_SpawnItemEx("HDFumblingShell",
						cos(pitch)*5,-1,height-7-sin(pitch)*5,
						cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+vel.x,
						cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vel.y,
						-sin(pitch-45)*random(1,4)+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);else A_SpawnItemEx("HDUnspentShell",
						cos(pitch)*5,0,height-7-sin(pitch)*5,
						vel.x,vel.y,vel.z+1,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else if(chm==1)A_SpawnItemEx("HDSpentShell",
					cos(pitch)*5,0,height-7-sin(pitch)*5,
					cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+vel.x,
					cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vel.y,
					-sin(pitch-45)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
		SH2G L 6 offset(0,34);
		SH2G L 10 offset(0,36){
			if(invoker.weaponstatus[0]&SLAYF_UNLOADONLY){
				setweaponstate("unloadend");
				return;
			}

			//play animation to search pockets as appropriate
			if(invoker.weaponstatus[0]&SLAYF_FROMPOCKETS)
				A_PlaySound("weapons/pocket",CHAN_WEAPON);
				else A_SetTics(0);
		}
		SH2G L 12 offset(0,35) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		SH2G L 10 offset(0,34);
		SH2G E 6;
		SH2G E 1 offset(0,36);
		SH2G F 2 offset(0,40);
		SH2G F 2 offset(0,46);
		SH2G F 1 offset(0,54);

		TNT1 A 4{
			//take up to 2 shells in hand
			int ssh=0;
			if(invoker.weaponstatus[0]&SLAYF_FROMPOCKETS){
				ssh=min(2,countinv("HDShellAmmo"));
				if(ssh>0)A_TakeInventory("HDShellAmmo",ssh);  
			}else{
				ssh=min(2,invoker.weaponstatus[SLAYS_SIDESADDLE]);
				invoker.weaponstatus[SLAYS_SIDESADDLE]-=ssh;
			}

			//if the above leaves you with nothing, abort
			if(ssh<1){
				A_SetTics(0);
				return;
			}

			//transfer from hand to chambers
			ssh--;
			while(ssh>=0){  
				invoker.weaponstatus[SLAYS_CHAMBER2-ssh]=2;
				ssh--;
			}
		}
		TNT1 A 6 A_PlaySound("weapons/sshotl",CHAN_WEAPON);
		SH2G G 2 offset(0,46);
		SH2G G 2 offset(0,42);
		SH2G H 2 offset(0,42);
		SH2G H 0 A_PlaySound("weapons/sshotc",CHAN_WEAPON);
		SH2G H 5;
		SHT2 A 3;
		goto ready;
	unloadend:
		SH2G L 6 A_PlaySound("weapons/sshotl",CHAN_WEAPON);
		SH2G G 2 offset(0,46);
		SH2G H 2 offset(0,42);
		SH2G H 2 offset(0,42);
		SH2G H 0 A_PlaySound("weapons/sshotc",CHAN_WEAPON);
		SH2G H 5;
		SHT2 A 3;
		goto ready;

	reloadss:
		SHT2 A 0 A_JumpIf(invoker.weaponstatus[SLAYS_SIDESADDLE]>=12,"nope");
		SHT2 A 1 offset(1,34);
		SHT2 A 2 offset(2,34);
		SHT2 A 3 offset(3,36);
	reloadssrestart:
		SHT2 A 6 offset(3,35);
		SHT2 A 9 offset(4,34) A_PlaySound("weapons/pocket",CHAN_WEAPON);
	reloadssloop1:
		SHT2 A 0{
			if(invoker.weaponstatus[SLAYS_SIDESADDLE]>=12)setweaponstate("reloadssend");  

			//load shells into hand
			int ssh=min(3,countinv("HDShellAmmo"));
			if(ssh<1){
				setweaponstate("reloadssend");
				return;
			}
			ssh=min(3,ssh,max(1,health/20),12-invoker.weaponstatus[SLAYS_SIDESADDLE]);
			invoker.weaponstatus[SLAYS_SIDESADDLE]+=ssh;
			A_TakeInventory("HDShellAmmo",ssh,TIF_NOTAKEINFINITE);
		}
	reloadssend:
		SHT2 A 4 offset(3,34);
		SHT2 A 0{
			if(
				invoker.weaponstatus[SLAYS_SIDESADDLE]<12
				&&!pressingfire()
				&&!pressingaltfire()
				&&!pressingreload()
				&&!pressingunload()
				&&countinv("HDShellAmmo")
			)setweaponstate("reloadssrestart");
		}
		SHT2 A 3 offset(2,34);
		SHT2 A 1 offset(1,34) emptyhand();
		goto nope;
	unloadss:
		SHT2 A 2 offset(2,34){
			EmptyHand();
			if(invoker.weaponstatus[SLAYS_SIDESADDLE]<1)setweaponstate("nope");
		}
		SHT2 A 1 offset(3,36) A_PlaySound("weapons/pocket",CHAN_WEAPON);
	unloadssloop1:
		SHT2 A 5 offset(4,36){
			//transfer to hand
			int ssh=min(invoker.weaponstatus[SLAYS_SIDESADDLE],4);
			invoker.handshells=ssh;
			invoker.weaponstatus[SLAYS_SIDESADDLE]-=ssh;
		}
		SHT2 A 3 offset(5,37){	//pocket if not full
			if(invoker.handshells+countinv("HDShellAmmo")<=AmmoCap("HDShellAmmo")){
				A_SetTics(8);
				A_WeaponReady(WRF_NOFIRE);
				A_PlaySound("weapons/pocket",CHAN_WEAPON);
			}
		}
		SHT2 A 2 offset(4,36){	//decide whether to loop
			EmptyHand();
			if(
				invoker.weaponstatus[SLAYS_SIDESADDLE]>0  
				&&!pressingfire()
				&&!pressingaltfire()
				&&!pressingreload()
				&&!pressingunload()
			)setweaponstate("unloadssloop1");
		}
		SHT2 A 3 offset(4,35);
		SHT2 A 2 offset(3,35);
		SHT2 A 1 offset(2,34);
		goto nope;
	unload:
		SH2G K 2 offset(0,34){
			if(invoker.weaponstatus[SLAYS_SIDESADDLE]>0)setweaponstate("unloadss");  
			else invoker.weaponstatus[0]|=SLAYF_UNLOADONLY;
		}goto unloadstart;


	zoom:
	cannibalize:
		SHT2 A 2 offset(0,36){
			EmptyHand();
			if(!countinv("Hunter"))setweaponstate("nope");
		}
		SHT2 A 2 offset(0,40) A_PlaySound("weapons/pocket",CHAN_WEAPON);
		SHT2 A 8 offset(0,42);
		SHT2 A 8 offset(0,44);
		SHT2 A 8 offset(0,42);
		SHT2 A 2 offset(0,36){
			let hhh=hdweapon(findinventory("Hunter"));
			if(hhh){
				int totake=min(
					hhh.weaponstatus[HUNTS_SIDESADDLE],
					AmmoCap("HDShellAmmo")-countinv("HDShellAmmo"),
					3
				);
				hhh.weaponstatus[HUNTS_SIDESADDLE]-=totake;
				A_GiveInventory("HDShellAmmo",totake);
			}
		}goto ready;

	spawn:
		SLAY ABCDEFG -1 nodelay{
			int ssh=invoker.weaponstatus[SLAYS_SIDESADDLE];
			if(ssh>=11)frame=0;  
			else if(ssh>=9)frame=1;
			else if(ssh>=7)frame=2;
			else if(ssh>=5)frame=3;
			else if(ssh>=3)frame=4;
			else if(ssh>=1)frame=5;
			else frame=6;
		}
	}
	override void InitializeWepStats(bool idfa=false){
		weaponstatus[SLAYS_CHAMBER1]=2;
		weaponstatus[SLAYS_CHAMBER2]=2;
		weaponstatus[SLAYS_SIDESADDLE]=12;
	}
}
enum slayerstatus{
	SLAYF_UNLOADONLY=1,
	SLAYF_FROMPOCKETS=2,

	SLAYS_CHAMBER1=1,
	SLAYS_CHAMBER2=2,
	SLAYS_SIDESADDLE=3,
	SLAYS_HEAT1=4,
	SLAYS_HEAT2=5,
};


