//place this into separate zm66ammo.txt and delete this portion from dcheavy


// ------------------------------------------------------------
// 4.26 UAC Standard ammo
// ------------------------------------------------------------
class FourMilAmmo:Ammo{
	default{
		+inventory.ignoreskill
		inventory.maxamount 60;
		ammo.backpackmaxamount 120;
		ammo.backpackamount 0;
		xscale 0.5; yscale 0.6; height 2; radius 2; translation "ice";
		inventory.pickupmessage "Picked up a stray 4.26 UAC Standard round. Reloading a 4.26 UAC Standard magazine into another firearm without authorization is a breach of the Volt End User License Agreement.";
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(amount==1)return;
		while(amount>1){  
			int ld=min(amount,random(1,49));
			actor a=spawn("HD4mmMag",pos);
			a.vel+=vel+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
			a.stamina=ld;
			amount-=ld;
		}if(amount<1)destroy();
	}
	states{
	spawn:
		RBRS A -1;
	}
}
class ZM66RifleMags:Ammo replaces Clip{
	default{
		+inventory.ignoreskill
		+nointeraction
		inventory.maxamount 6;
		ammo.backpackmaxamount 18;
		ammo.backpackamount 0;
		inventory.pickupmessage "Picked up a 4.26 UAC Standard magazine.";
		xscale 0.3;yscale 0.4;
	}
	states{
	spawn:
		CLIP C 1;
		CLIP C 0{
			actor a=spawn("HD4mmMag",pos);
			if(a){
				a.vel=vel;
			}
		}stop;
	}
}
class HD4mmMag:HDUPK replaces ZM66RifleMags{
	default{
		translation "160:167=144:151";
		xscale 0.3;yscale 0.4;

		stamina 51; //51 means FRESH AND SEALED
	}
	void SetAmmo(inventory invtype="FourMilAmmo"){
		if(target is "PlayerPawn"){
			stamina=target.countinv(invtype);
			A_TakeFromTarget(invtype);
		}
		if(stamina<1){
			actor a=spawn("HD4mmMagEmpty",pos);
			if(a){
				a.vel=vel;
			}
			destroy();return;
		}
	}
	states{
	spawn:
		CLIP A 0 A_Stop();
	spawn2:
		---- A -1;
	give:
		---- A 0{
			if(stamina>50){  
				if(A_JumpIfInTargetInventory("ZM66RifleMags",0,"null")){
					setstatelabel("spawn");return;
				}else{
					target.A_GiveInventory("ZM66RifleMags",1);
					destroy();return;
				}
			}else{
				int al=target.countinv("FourMilAmmo");
				target.A_GiveInventory("FourMilAmmo",stamina);
				al=target.countinv("FourMilAmmo")-al-stamina;
				if(!al){destroy();return;}
				else{
					A_SetInventory("FourMilAmmo",al);
					setstatelabel("spawn");
				}
			}
		}stop;
	}
}
class HD4mMag:HD4mmMag{
	override void postbeginplay(){super.postbeginplay();SetAmmo("ZM66Loaded");}
}
class HD4mDMagMaker:ActionItem{
	states{
	pickup:
		TNT1 A 0{ 
			A_Log("Reduce this with the DropOne stuff.");
			A_DropInventory("FourMilAmmo",countinv("FourMilAmmo"));
		}stop;
	}
}

replace ZM66RifleEmptyMag references
class HD4mmMagEmpty:HDDebris{
	default{
		translation "160:167=104:111";
		bouncesound "misc/casing2";bouncefactor 0.6;xscale 0.4;yscale 0.3;radius 2;height 2;
	}
	states{
	spawn:
		CLIP B 2{
			A_SetRoll(roll+30,SPF_INTERPOLATE);
		}loop;
	death:
		CLIP B -1{
			roll=randompick(0,0,0,0,180,180,180,180,90,270);
		}stop;
	}
}










// ------------------------------------------------------------
// Vulcanette
// ------------------------------------------------------------
class Vulcanette:HDWeapon{
	default{
		scale 0.8;
		inventory.pickupmessage "You got the Vulcanette! Now it's coward killing time!";
		weapon.selectionorder 204;
		weapon.slotnumber 4;
		weapon.ammotype1 "VulcLoaded1";
		weapon.ammotype2 "ZM66RifleMags";
		weapon.ammouse 0;
		weapon.kickback 24;
		weapon.bobrangex 0.3;
		weapon.bobrangey 1;
		weapon.bobspeed 1.2;
		weapon.bobstyle "normal";
		obituary "%o met the budda-budda-budda on the street,and %k killed %h.";
	}
	override void tick(){
		super.tick();
		drainheat(3,18);
	}
	states{
	select0:
		VULG A 0{
			A_Overlay(2,"droop");
			if(!countinv("NulledWeapon"))invoker.weaponstatus[0]&=~VULCF_ON;
		}goto select0bfg;
	deselect0:
		VULG A 0;
		goto deselect0bfg;

	droop:
		TNT1 A 1{
			if(pitch<5&&(!countinv("IsSupported"))){
				if(countinv("IsMoving")>2 && countinv("PowerStrength")<1){  
					MuzzleClimb(frandom(-0.1,0.1),frandom(0.1,clamp(1-pitch,0.2,0.5)));
				}else{
					MuzzleClimb(frandom(-0.06,0.06),frandom(0.1,clamp(1-pitch,0.1,0.3)));
				}
			}
			if(countinv("PressingFire") && invoker.weaponstatus[0]&VULCF_ON){
				//not using AMC because this is constant
				A_SetPitch(pitch+frandom(-0.05,0.05));
				A_SetAngle(angle+frandom(-0.05,0.05));
			}
		}loop;


	zoom:
	zoomadjust:
		VULG A 1 A_WeaponReady(WRF_NOFIRE);
		VULG A 0{
			if(!countinv("IsSupported"))A_GiveInventory("WeaponBusy",1);
			if(countinv("PressingFire")||countinv("PressingAltfire"))
				setweaponstate("zoomclick");
			else if(countinv("PressingZoom"))
				setweaponstate("zoomadjust");
			else setweaponstate("nope");
		}
	zoomclick:
		VULG A 0{
			int iws=invoker.weaponstatus[0]+1;
			if(countinv("PressingAltFire"))iws-=2;
			invoker.weaponstatus[2]=clamp(iws,0,2);
		}
	zoomclicked:
		VULG A 1{
			A_WeaponReady(WRF_NOFIRE);
			if(!countinv("PressingFire")&&!countinv("PressingAltfire"))
			setweaponstate("zoomadjust");
		}goto zoomclicked;

	user2:
	firemode:
		VULG A 1{
			invoker.weaponstatus[0]^=VULCF_FAST;
			A_WeaponReady(WRF_NOFIRE);
		}goto nope;

	ready:
		VULG A 1{
			A_SetCrosshair(21);
			A_GiveInventory("IsWeaponReady");
			invoker.weaponstatus[0]&=~(VULCF_JUSTUNLOAD|VULCF_LOADCELL);
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM|
				WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER4
			);
		}
		goto readyend;

	fire:
		VULG A 1{
			if(invoker.weaponstatus[1]>0 && !random(0,700))invoker.weaponstatus[1]--;  
		}goto shoot;
	hold:
		VULG A 0{
			if(invoker.weaponstatus[1]<1)setweaponstate("nope");
		}
	shoot:
		VULG A 2{
			if(
				invoker.weaponstatus[1]>0  
				&&!random(0,invoker.weaponstatus[0]&VULCF_SPINNINGFAST?2060:2100)
			)invoker.weaponstatus[1]--;
			invoker.weaponstatus[0]&=~VULCF_SPINNINGFAST;

			//check speed and then shoot
			if(
				invoker.weaponstatus[0]&VULCF_FAST &&
				invoker.weaponstatus[1]>=4 &&  
				invoker.vulcchamber[0]
			){
				A_SetTics(1);
				invoker.weaponstatus[0]|=VULCF_SPINNINGFAST;
			}else if(invoker.weaponstatus[1]<2){
				A_SetTics(random(3,4));
			}else if(invoker.weaponstatus[1]<3){
				A_SetTics(random(2,3));
			}
			VulcShoot();
			VulcNextRound();
		}
		VULG B 1{
			//check speed and then shoot
			if(
				invoker.weaponstatus[0]&VULCF_SPINNINGFAST &&
				invoker.vulcchamber[0]
			){
				A_SetTics(1);
				VulcShoot(true);
				VulcNextRound();
			}else if(invoker.weaponstatus[1]<2){
				A_SetTics(random(3,4));
			}else if(invoker.weaponstatus[1]<3){
				A_SetTics(random(2,3));
			}
		}
		VULG B 1{
			if(invoker.weaponstatus[1]<1)setweaponstate("spindown");
			else if(invoker.vulcchamber[1])A_Refire();
		}
		VULG A 0{
			VulcNextMag();
			A_PlaySound("weapons/grenopen",CHAN_BODY);
			if(invoker.weaponstatus[0]&VULCF_SPINNINGFAST)setweaponstate("spindown");
		}
		goto ready;
	spindown:
		VULG B 0{
			A_JumpIf(!(invoker.weaponstatus&VULCF_SPINNINGFAST),"nope");
			invoker.weaponstatus&=~VULCF_SPINNINGFAST;
		}
		VULG AB 1{
			A_MuzzleClimb(random(0.4,0.6),-random(0.4,0.6));
			A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		}
		VULG ABAABB 2 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		goto ready;


	flash2:
		VULF B 0;
		goto flashfollow;
	flash:
		VULF A 0;
		goto flashfollow;
	flashfollow:
		---- A 0{
			A_ZoomFactor(0.99,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			HDFlashAlpha(weaponstatus[3]*48);
		}
		---- A 1 bright A_Light2();
		TNT1 A 0{
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_MuzzleClimb(-frandom(0.4,0.8),-frandom(0.6,1.6));
		}goto lightdone;


	reload:
		VULG A 0{
			if(
				//abort if all mag slots taken or no spare ammo
				(
					!countinv("ZM66RifleMags")
					&&!countinv("FourMilAmmo")
				)||(
					invoker.vulcmag[0]>0
					&&invoker.vulcmag[1]>0
					&&invoker.vulcmag[2]>0
					&&invoker.vulcmag[3]>0
					&&invoker.vulcmag[4]>0  
				)
			)setweaponstate("nope");else{
				weaponstatus[0]&=~VULCF_JUSTUNLOAD;
				weaponstatus[0]&=~VULCF_LOADCELL;
				setweaponstate("lowertoopen");
			}
		}
	altreload:
	cellreload:
		VULG A 0{
			if(
				//abort if full battery loaded or no spares
				(
					invoker.weaponstatus[1]>=20  
				)||(
					!countinv("HDCellPacks")
					&&!countinv("HDCellAmmo")
				)
			)setweaponstate("nope");else{
				weaponstatus[0]&=~VULCF_JUSTUNLOAD;
				weaponstatus[0]|=VULCF_LOADCELL;
				setweaponstate("lowertoopen");
			}
		}
	unload:
		VULG A 0{
			//abort if no mags to unload
			if(invoker.vulcmag!={-1,-1,-1,-1,-1})
			setweaponstate("nope");else{
				weaponstatus[0]|=VULCF_JUSTUNLOAD;
				weaponstatus[0]&=~VULCF_LOADCELL;
				setweaponstate("lowertoopen");
			}
		}
	//what key to use for cellunload???
	cellunload:
		VULG A 0{
			//abort if no cell to unload
			if(invoker.weaponstatus[1]<0)
			setweaponstate("nope");else{
				weaponstatus[0]|=VULCF_JUSTUNLOAD;
				weaponstatus[0]|=VULCF_LOADCELL;
				setweaponstate("lowertoopen");
			}
		}

	//lower the weapon, open it, decide what to do
	lowertoopen:
		VULG A 2 offset(0,36)
		VULG A 2 offset(4,38){
			A_PlaySound("weapons/rifleclick2");
			A_MuzzleClimb(-frandom(1.2,1.8),-frandom(1.8,2.4));
		}
		VULG A 6 offset(10,40){
			A_PlaySound("weapons/rifleload");
			A_MuzzleClimb(-frandom(1.2,1.8),-frandom(1.8,2.4));
		}
		VULG A 6 offset(9,41) A_PlaySound("weapons/pocket");
		VULG A 8 offset(12,43) A_PlaySound("weapons/huntreload");
		VULG A 5 offset(10,41) A_PlaySound("weapons/grenopen");
		VULG A 0{
			if(weaponstats[0]&VULCF_LOADCELL)setweaponstate("uncell");
			else if(weaponstats[0]&VULCF_JUSTUNLOAD)setweaponstate("unmag");
		}goto loadmag;

	uncell:
		VULG A 10 offset(11,42){
			if(invoker.weaponstatus[1]<0)setweaponstate("cellout");
			else if(
				(
					!countinv("PressingUnload")
					&&!countinv("PressingAltReload")
					&&!countinv("PressingReload")
				)||(
					invoker.weaponstatus[1]<20
					&& countinv("HDCellAmmo")+invoker.weaponstatus[1]>AmmoCap("HDCellAmmo")
				)||(
					invoker.weaponstatus[1]>=20  
					&& A_JumpIfInventory("HDCellPacks",0,"null")
				)||(
					!invoker.weaponstatus[1]
					&& A_JumpIfInventory("HDCellPackEmpty",0,"null")
				)
			){
				A_SetTics(4);
				A_SpawnItemEx("HDCelXV",8,0,height-14,
					vel.x,vel.y,vel.z,
					0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_SETTARGET
				);
				invoker.weaponstatus[1]=-1;
				setweaponstate("cellout");
			}else setweaponstate("pocketcell");
		}

	pocketcell:
		VULG A 10 offset(11,42){
			A_PlaySound("weapons/pocket",CHAN_WEAPON);
			if(invoker.weaponstatus[1]>=20)A_GiveInventory("HDCellPacks",1);  
			else if(!invoker.weaponstatus[1])A_GiveInventory("HDCellPackEmpty",1);
			else A_GiveInventory("HDCellAmmo",invoker.weaponstatus[1]);
			invoker.weaponstatus[1]=-1;
		}
		VULG AA 6 offset(9,40) A_MuzzleClimb(frandom(0.5,0.6),-frandom(0.5,0.6));
		goto cellout;

	cellout:
		VULG A 0 A_TakeInventory("VulcEmptyCell");
		VULG A 0 offset(10,40) A_JumpIf(weaponstatus[0]&VULCF_JUSTUNLOAD,"reloadend");
	loadcell:
		VULG A 8 offset(11,42)A_PlaySound("weapons/pocket",CHAN_WEAPON);
		VULG A 5 offset(10,41)A_PlaySound("weapons/grenopen",CHAN_WEAPON);
		VULG A 8 offset(12,43)A_PlaySound("weapons/huntreload",CHAN_WEAPON);
		VULG A 0{
			if(countinv("HDCellPacks")){
				A_GiveInventory("VulcBattery",20);
				A_TakeInventory("HDCellPacks",1,TIF_NOTAKEINFINITE);
			}else{
				int lod=min(random(1,19),countinv("HDCellAmmo"));
				A_GiveInventory("VulcBattery",lod);
				A_TakeInventory("HDCellAmmo",lod,TIF_NOTAKEINFINITE);
			}
			A_TakeInventory("VulcEmptyCell");
		}

	reloadend:
		VULG A 3 offset(9,41);
		VULG A 2 offset(6,38);
		VULG A 3 offset(2,34);
		goto nope;


	unchamber:
		VULG B 4 A_PlaySound("derp/crawl",CHAN_AUTO,0.3);
		VULG A 4
		VULG A 0 A_JumpIfInventory("PressingUnload",1,"unchamber");
		goto nope;
	unmag:
		//if no mags, remove battery
		//if not even battery, remove rounds from chambers
		VULG A 0{
			if(
				invoker.vulcmag=={-1,-1,-1,-1,-1}
			){
				if(invoker.weaponstatus[1]>=0)setweaponstate("cellunload");  
				else setweaponstate("unchamber");
			}
		}
		//first, check if there's a mag2-5.
		//if there's no mag2 but stuff after that, shunt everything over until there is.
		//if there's nothing but mag1, unload mag1.
		VULG A 2 offset(0,36)
		VULG A 2 offset(4,38){
			A_PlaySound("weapons/rifleclick2");
			A_MuzzleClimb(-random(1.2,1.8),-random(1.8,2.4));
		}
		VULG A 6 offset(10,40){
			if(!countinv("JustUnloading"))setweaponstate("loadmag");
			A_PlaySound("weapons/rifleload");
			A_MuzzleClimb(-random(1.2,1.8),-random(1.8,2.4));
		}
	//remove mag #2 first, #1 only if out of options
	unmag0:
		VULG A 0{
			if(invoker.vulcmag[1]>=0)setweaponstate("unmag2");  
			else if(
				invoker.vulcmag!={invoker.vulcmag[0],-1,-1,-1,-1}
			)setweaponstate("unmagshunt");
			else if(
				invoker.vulcmag[0]>=0  
			)setweaponstate("unmag1");
		}goto nope;
	unmagshunt:
		VULG A 0{
			VulcNextMag();
			A_PlaySound("weapons/grenopen",CHAN_BODY);
		}
		VULG AB 2 A_MuzzleClimb(-random(0.4,0.6),random(0.4,0.6));
		goto nope;

	unmag2:
		VULC A 0{
			int mg1=invoker.vulcmag[1];
			invoker.vulcmag[1]=-1;
			if(
				!mg1
				||(
					!countinv("PressingUnload")
					&&!countinv("PressingReload")
				)||(
					countinv("FourMilAmmo")+mg1>AmmoCap("FourMilAmmo")  
				||(
					mg1>50  
					&&A_JumpIfInventory("ZM66RifleMags",0,"null")
				)
			){
				actor a;int b;
				[b,a]=A_SpawnItemEx("HD4mmMag",
					cos(pitch)*8,0,height-10-8*sin(pitch),
					vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				a.stamina=mg1;
				setweaponstate("mag2out");
			}else{
				if(mg1>50)A_GiveInventory("ZM66RifleMags",1);  
				else A_GiveInventory("FourMilAmmo",mg1);
				setweaponstate("pocketmag");
			}
		}goto mag2out;
	unmag1:
		VULC A 0{
			int mg0=invoker.vulcmag[0];
			invoker.vulcmag[0]=-1;
			if(
				!mg0
				||(
					!countinv("PressingUnload")
					&&!countinv("PressingReload")
				)||(
					countinv("FourMilAmmo")+mg0>AmmoCap("FourMilAmmo")  
				||(
					mg0>50  
					&&A_JumpIfInventory("ZM66RifleMags",0,"null")
				)
			){
				actor a;int b;
				[b,a]=A_SpawnItemEx("HD4mmMag",
					cos(pitch)*8,0,height-10-8*sin(pitch),
					vel.x,vel.y,vel.z,0,
					SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				a.stamina=mg0;
				setweaponstate("mag2out");
			}else{
				if(mg0>50)A_GiveInventory("ZM66RifleMags",1);  
				else A_GiveInventory("FourMilAmmo",mg0);
				setweaponstate("pocketmag");
			}
		}goto mag1out;

	pocketmag:
		VULG A 0 A_PlaySound("weapons/pocket");
		VULG AA 6 A_MuzzleClimb(frandom(0.4,0.6),-frandom(0.4,0.6));
		VULG A 0 A_JumpIf(invoker.vulcmag[0]<1,"mag1out");
		goto mag2out;

	mag2out:
		VULG A 1;
		VULG A 0{
			VulcNextMag();
			A_PlaySound("weapons/grenopen",CHAN_BODY);
		}
		VULG AB 2 A_MuzzleClimb(-frandom(0.4,0.6),frandom(0.4,0.6));
	mag1out:
		VULG A 6{
			if(
				(
					countinv("PressingReload")
					||countinv("PressingUnload")
					||countinv("PressingFire")
				)||(
					invoker.vulcmag=={invoker.vulcmag[0],-1,-1,-1,-1}
				)
			)setweaponstate("reloadend");
		}goto unmag0;

	loadmag:
		//pick the first empty slot and fill that
		VULG A 0 A_PlaySound("weapons/pocket",CHAN_WEAPON);
		VULG AA 6 A_MuzzleClimb(-frandom(0.4,0.6),frandom(-0.4,0.4))
		VULG A 6 offset(10,41){
			int lod;
			int magslot=-1;
			if(countinv("ZM66RifleMags")){
				lod=51;
				A_TakeInventory("ZM66RifleMags",1,TIF_NOTAKEINFINITE);
			}else{
				lod=min(random(1,50),countinv("FourMilAmmo"));
				A_TakeInventory("FourMilAmmo",lod,TIF_NOTAKEINFINITE);
			}
			if(invoker.vulcmag[0]<0)magslot=0;
			else if(invoker.vulcmag[1]<0)magslot=1;
			else if(invoker.vulcmag[2]<0)magslot=2;
			else if(invoker.vulcmag[3]<0)magslot=3;
			else if(invoker.vulcmag[4]<0)magslot=4;

			if(lod<51)invoker.vulcmag[magslot]=100+lod;
			else invoker.vulcmag[magslot]=50;

			A_MuzzleClimb(-frandom(1.,1.2),-frandom(0.5,0.7));
		}
		VULG A 8 offset(9,38){
			A_PlaySound("weapons/rifleclick");
			A_MuzzleClimb(-frandom(1.0,1.2),-frandom(0.5,0.7));
		}
		VULG A 0{
			if(
				(
					countinv("PressingReload")
					||countinv("PressingUnload")
					||countinv("PressingFire")
				)||(
					!countinv("ZM66RifleMags")
					&&!countinv("FourMilAmmo")
				)||(
					invoker.vulcmag[0]>=0
					&&invoker.vulcmag[1]>=0
					&&invoker.vulcmag[2]>=0
					&&invoker.vulcmag[3]>=0
					&&invoker.vulcmag[4]>=0  
					
				)
			)setweaponstate("reloadend");
		}goto loadmag;

	spawn:
		VULC A -1;
	}

	/*
		[0]status
		[too many fuckin' mags and chambers lol, put 'em in another array]
		[1]battery, -1 is no battery loaded
		[2]zoom
		[3]heat
	*/
	int vulcmag[5]; //-1 is no mag loaded; 100+ is jailbroken mag
	int vulcchamber[5]; //2 is broken round
	enum vulcstatus{
		VULCF_FAST=1,
		VULCF_SPINNINGFAST=2,
		VULCF_JUSTUNLOAD=4,
		VULCF_LOADCELL,
	};

	override void beginplay(){
		initializewepstats();
		super.beginplay();
	}
	void InitializeWepStats(){
		if(!initializedweapon){
			initializedweapon=true;
			vulcmag={51,51,51,51,51};
			weaponstatus[1]=20;
		}
	}

	//shooting and cycling actions
	//move this somewhere sensible
	action void VulcShoot(bool flash2=false){
		if(invoker.vulcchamber[0]!=1)return; //0 is empty, 2 is broken
		A_GunFlash(flash2?"flash2":"flash");
		A_PlaySound("weapons/vulcanette",CHAN_AUTO);
		int heat=min(50,weaponstatus[3]);
		actor b=spawn("HDBullet426",pos+height-8);
		b.target=self;b.vel+=vel;
		if(heat>20)b.vel+=(frandom(-heat,heat),frandom(-heat,heat),frandom(-heat,heat))*0.1;  
		weaponstatus[3]+=4;
		if(random(0,1023)<heat)A_GiveInventory("VulcBattery",1);
		invoker.vulcchamber[0]=0;
	}
	action void VulcNextMag(){
		if(invoker.vulcmag[0]>=0){  
			double cp=cos(pitch);double ca=cos(angle);
			double sp=sin(pitch);double sa=sin(angle);
			actor mmm=spawn("HD4mmMag",pos+(
				cp*ca*12,
				cp*sa*12,
				height-12-12*sp
			);
			mmm.vel=vel+(
				cp*cos(angle+random(55,65)),
				cp*sin(angle+random(55,65)),
				sp
			);
			mmm.stamina=invoker.vulcmag[0];
			}
		}
		for(int i=0;i<4;i++){
			invoker.vulcmag[i]=invoker.vulcmag[i+1];
		}
		invoker.vulcmag[4]=-1;
	}
	action void VulcNextRound(){
		if(invoker.vulcchamber[0]){
			//spit out a misfired, wasted or broken round
			if(invoker.vulcchamber[0]>1){  
				for(int i=0;i<5;i++){
					A_SpawnItemEx("TinyWallChunk",3,0,height-18,
						random(4,7),random(-2,2),random(-2,1),
						-30,SXF_NOCHECKPOSITION
					);
				}
			}else{
				A_SpawnItemEx("ZM66DroppedRound",3,0,height-18,
					random(4,7),random(-2,2),random(-2,1),
					-30,SXF_NOCHECKPOSITION
				);
			}
			A_MuzzleClimb(random(0.6,2.4),random(1.2,2.4));
			invoker.vulcchamber[0]=0;
		}
		//cycle all chambers
		for(int i=0;i<4;i++){
			invoker.vulcchamber[i]=invoker.vulcchamber[i+1];
		}
		if(vulcmag[0]==51)vulcmag[0]=50; //open the seal

		//figure out what's in the mag and load it to the final chamber
		int inmag=max(0,invoker.vulcmag[0]);
		if(inmag>100)inmag-=100;  
		else if(inmag==100){ //set the mag to merely empty not jailbroken
			vulcmag[0]=0;
			inmag=0;
		}
		if(inmag>0){  
			A_PlaySound("weapons/rifleclick2",CHAN_BODY);
			invoker.vulcchamber[4]++;
			if(random(1,1000)<=
				1+invoker.vulcmag[0]>100?(invoker.weaponstatus[0]&VULCF_FAST?13:9):0  
			)invoker.vulcchamber[4]++;
			invoker.vulcmag[0]--;
		}else invoker.vulcchamber[4]=0;
	}
}

class ZM66DroppedRound:FourMilAmmo{
	default{
		projectile;
		+cannotpush +forcexybillboard -nogravity +doombounce +bounceonactors
		damagefunction(0);bouncefclass 0.2;seesound "misc/casing3";
	}
	states{
	spawn:
		RBRS A 2 A_SetAngle(angle+45);
		wait;
	death:
		---- A -1 A_ChangeFlag("noblockmap",0);
		stop;
	}
}





class VulcanetteGuy:Chaingunguy{
	int burstcount;
	int vulcammo; //0-250, just play an animation on hitting a multiple of 50
	int vulcchambers; //0-5
	default{
		dropitem "";
		translation "60:69=128:135","70:79=144:151","176:191=32:47";
		health 75;gibhealth 100;
		height 54;radius 16;
		deathheight 50;
		obituary "%o met the budda-budda-budda on the street,and it killed %h.";
	}
	states{
	reload:
		CPOS A 0{
			if(!checksight(target))setstatelabel("loadamag");
			bfrightened=true;
		}
		CPOS AABBCCDD 3 A_Chase("","");
	loadamag:
		CPOS E 9{
			if(vulcammo>=250){  
				vulcammo=250;
				setstatelabel("see");
			}else A_PlaySound("weapons/pocket",CHAN_WEAPON);
		}
		CPOS E 7 A_PlaySound("weapons/rifleload");
		CPOS E 10{
			A_PlaySound("weapons/rifleclick2");
			vulcammo+=50;
		}loop;
	see:
		CPOS AABBCCDD 4 A_Chase();
		CPOS A 0{
			if(!target||!checksight(target))healthing(random(1,6));
			if(!vulcammo)setstatelabel("reload");
			else bfrightened=0;
		}loop;
	see2:
		CPOS E 8 A_FaceTarget(8,0);
		CPOS E 0 A_CheckLOF(1,CLOFF_JUMPNONHOSTILE|CLOFF_SKIPTARGET|CLOFF_JUMPOBJECT|CLOFF_SKIPENEMY|CLOFF_MUSTBESOLID,0,0,0,0,32,9);
		goto ready;
		CPOS E 0 A_Jump(64,"WindDown");
		loop;
	missile:
		CPOS E 0{
			if(!vulcammo)setstatelabel("reload");
			else{
				bfrightened=0;
				A_CheckLOF("see",
					CLOFF_JUMPNONHOSTILE|CLOFF_SKIPTARGET|CLOFF_JUMPOBJECT|
					CLOFF_SKIPENEMY|CLOFF_MUSTBESOLID,
					0,0,0,0,32,9
				);
			}
		}
	ready:
		CPOS ABCD 4{
			if(A_JumpIfTargetInLOS("aim",6))setstatelabel("aim");
			else A_FaceTarget(16,16);
		}loop;
	aim:
		CPOS E 0 A_JumpIfTargetInLOS(2);
		CPOS E 0 A_Jump(256,"see","waitforlos","waitforlos","waitforlos","waitforlos");
		CPOS E 0 A_JumpIfTargetInLOS(1,20);
		goto ready;
		CPOS EE 3 A_FaceTarget(4,4);
		CPOS E 2 A_JumpIfTargetInLOS(1,12);
		loop;
	fire:
		CPOS E 3{
			if(random(1,5)<2)bmissilemore=true;elsebmissilemore=false;
			A_SetPitch(pitch+frandom(-2,2));A_SetAngle(angle+frandom(-2,2));
			burstcount=min(vulcammo,bmissilemore?random(9,90):random(3,30));
		}
	cycle:
		CPOS E 10{
			if(vulcchambers<5 && vulcammo){
				vulcammo--;
				vulcchambers++;
				A_PlaySound("weapons/rifleclick2",CHAN_AUTO);
			}
			if(vulcchambers)setstatelabel("shoot");
		}goto reload;
	shoot:
		CPOS F 1 bright light("SHOT"){
			A_PlaySound("weapons/vulcanette",CHAN_AUTO);
			if(vulcchambers>0)vulcchambers--;  
			burstcount--;
			pitch+=frandom(-0.5,0.5);angle+=frandom(-0.5,0.5);
			A_GiveInventory("DecoBulleter426");
		}
		CPOS E 2{
			if(
				!(vulcammo%50)
			){
				A_SpawnItemEx(
					"ZM66RifleEmptyMag",0,4,32,3,
					random(-3,2),random(0,-2),0,SXF_NOCHECKPOSITION
				);
				A_SetTics(7);
			}
			else if(bmissilemore)A_SetTics(0);
			if(!vulcammo||!burstcount)setstatelabel("winddown");
		}goto cycle;
	winddown:
		CPOS E 6{
			burstcount=0;
			if(bmissilemore)A_SetTics(12);
		}
		CPOS E 0{if(!vulcammo)setstatelabel("reload");}
	waitforlos:
		CPOS EE 4 A_Jump(2,"fire")
		CPOS E 0{
			if(target.health<random(-50,1))
				return resolvestate("winddown");
			if(A_JumpIfTargetInLOS("null"))A_FaceTarget(1,1);
			if(A_CheckLOF("null",
				CLOFF_JUMPNONHOSTILE|CLOFF_SKIPTARGET|CLOFF_JUMPOBJECT|
				CLOFF_SKIPENEMY|CLOFF_MUSTBESOLID,0,0,0,0,32,9)
			)return resolvestate("waitforlos");
			if(A_JumpIfTargetInLOS("null",1))return resolvestate("fire");
			if(A_JumpIfTargetInLOS("null",90))return resolvestate("aim");
			if(!random(0,22))return resolvestate("winddown");
			if(A_JumpIfTargetInLOS("null"))return resolvestate("ready");
			return resolvestate("waitforlos");
		}

	death:
		CPOS H 5{
			A_GivetoTarget("HDKillCount",1);
			A_GiveInventory("HDCorpseFlags");
			A_SpawnItemEx("tempshield",0,0,0,vel.x,vel.y,vel.z,0,40);
		}
		CPOS I 5{
			A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
			A_Scream();
		}

		CPOS J 5{
			A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
			A_SpawnItemEx("tempshield2",0,0,0,vel.x,vel.y,vel.z,0,40);
			A_VulcNoBlocking();
		}
		CPOS KL 5;
		CPOS M 5;
	dead:
		CPOS M 3;
		loop;
		CPOS N 5 canraise{
			if(abs(vel.z)>1)setstatelabel("dead");  
		}wait;
	xdeathbrewtlelulz:
		CPOS L 3{
			bshootable=false;
			A_GiveInventory("IsGibbed");
		}
		CPOS KO 3;
		CPOS P 3{
			A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
			A_XScream();
		}
		CPOS R 2 A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
		CPOS QRS 5 A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
		goto xdead;
	xdeath:
		CPOS O 5{
			bshootable=false;
			A_GiveInventory("IsGibbed");
			A_GivetoTarget("HDKillCount",1);
		}
		CPOS P 3{
			A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
			A_XScream();
		}
		CPOS R 2 A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
		CPOS Q 5 A_VulcNoBlocking();
		CPOS Q 0 A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
		CPOS RS 5 A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
	xdead:
		CPOS S 3;
		loop;
		CPOS T 5 canraise{
			if(abs(vel.z)>1)setstatelabel("dead");  
		}wait;
	raise:
		CPOS N 2{
			HDF.CorpseFlags(self);
			if(countinv("IsGibbed"))setstatelabel("raisegibbed");
			else A_SpawnItemEx("MegaBloodSplatter",0,0,4,0,0,3,0,SXF_NOCHECKPOSITION);
		}
		CPOS NML 6;
		CPOS KJIH 4;
		goto see;
	raisegibbed:
		CPOS T 6{
			A_TakeInventory("IsGibbed");
			A_SpawnItemEx("MegaBloodSplatter",0,0,4,0,0,3,0,SXF_NOCHECKPOSITION);
		}
		CPOS TS 12 A_SpawnItemEx("MegaBloodSplatter",0,0,4,0,0,3,0,SXF_NOCHECKPOSITION);
		CPOS RQ 7;
		CPOS POH 5;
		CPOS H 5 A_Die("ungibbed");
	death.ungibbed:
		CPOS H 5{
			HDF.CorpseFlags(self);
		}
		CPOS I 5 A_SpawnItemEx("MegaBloodSplatter",0,0,34,0,0,0,0,160);
		CPOS J 5 A_NoBlocking();
		CPOS KLM 5;
		goto dead;
	}
	void VulcNoBlocking(){
		A_GiveInventory("NoBlockWepDrop");
		vulcanette vvv=spawn("vulcanette",pos+(0,0,32));
		if(!vvv)return;
		vvv.vel=vel;vvv.angle=angle;
		vvv.A_ChangeVelocity(1,0,2,CVF_RELATIVE);
		for(int i=0;i<4;i++){
			if(i==0){
				int rem=vulcammo%50;
				if(rem){
					vvv.vulcmag[i]=rem;
					vulcammo-=rem;
				}
			}else if(vulcammo>0){
				vvv.vulcmag[i]=50;
				vulcammo-=50;
			}
			if(vulcchambers>0){  
				vvv.vulcchamber[i]=randompick(1,1,2);
				vulcchambers--;
			}
		}
		if(bmissilemore)vvv.weaponstatus[0]|=VULCF_FAST;
		bmissilemore=false;
		vvv.weaponstatus[1]=random(1,20);
	}
}


