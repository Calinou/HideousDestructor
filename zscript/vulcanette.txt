// ------------------------------------------------------------
// Vulcanette
// ------------------------------------------------------------
enum vulcstatus{
	VULCF_FAST=1,
	VULCF_SPINNINGFAST=2,
	VULCF_JUSTUNLOAD=4,
	VULCF_LOADCELL=8,

	VULCS_BATTERY=1,
	VULCS_ZOOM=2,
	VULCS_HEAT=3,
	VULCS_CHANNEL=4,
};
class Vulcanette:HDWeapon{
	int breakchance;
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Vulcanette"
		//$Sprite "VULCA0"

		scale 0.8;
		inventory.pickupmessage "You got the Vulcanette!";
		weapon.selectionorder 40;
		weapon.slotnumber 4;
		weapon.kickback 24;
		weapon.bobrangex 1.4;
		weapon.bobrangey 3.5;
		weapon.bobspeed 2.1;
		weapon.bobstyle "normal";
		obituary "%o met the budda-budda-budda on the street,and %k killed %h.";
		hdweapon.barrelsize 30,3,4;
		hdweapon.refid HDLD_VULCETT;
		hdweapon.nicename "Vulcanette";
	}
	override string pickupmessage(){
		string msg=super.pickupmessage();
		if(!breakchance)msg=msg.." It's coward killing time!";
		else if(breakchance>500)msg=msg.." that might be salvaged for ammo.";
		else if(breakchance>200)msg=msg.." in dire need of repair.";
		else if(breakchance>100)msg=msg..". It has seen better days.";
		if(breakchance>100){
			msg.replace("!","");
			msg.replace("the","a");
		}
		return msg;
	}
	override void tick(){
		if(justchucked)breakchance+=random(10,50);
		super.tick();
		drainheat(3,18);
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(owner&&owner.player){
			if(cvar.getcvar("hd_vulcsuper",owner.player).getint())weaponstatus[0]|=VULCF_FAST;
			weaponstatus[VULCS_ZOOM]=clamp(
				cvar.getcvar("hd_vulczoom",owner.player).getint(),16,70
			);
		}
	}
	override double gunmass(){
		double amt=12+weaponstatus[1]<0?0:1;
		for(int i=0;i<5;i++){
			if(vulcmag[i]>=0)amt+=3.6;
		}
		return amt;
	}
	override double weaponbulk(){
		double blx=200+(weaponstatus[VULCS_BATTERY]>=0?ENC_BATTERY_LOADED:0);
		for(int i=0;i<5;i++){
			if(vulcmag[i]>=0)blx+=ENC_426MAG_LOADED+(ENC_426_LOADED*vulcmag[i]);
		}
		return blx;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.gimmehud){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD4mMag")));
			if(nextmagloaded>50){
				sb.drawimage("ZMAGA0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2,2));
			}else if(nextmagloaded<1){
				sb.drawimage("ZMAGC0",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.,scale:(2,2));
			}else sb.drawbar(
				"ZMAGNORM","ZMAGGREY",
				nextmagloaded,50,
				(-46,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawbattery(-64,-4,sb.DI_SCREEN_CENTER_BOTTOM,reloadorder:true);
			sb.drawnum(hpl.countinv("HD4mMag"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
			sb.drawnum(hpl.countinv("HDBattery"),-56,-8,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
		}
		let vvv=vulcanette(hdw);
		if(vvv){
			for(int i=1;i<5;i++){
				if(vvv.vulcmag[i]>=0)sb.drawwepdot(-16-i*4,-13,(3,2));
			}
			sb.drawwepnum(vvv.vulcmag[0]<100?vvv.vulcmag[0]:vvv.vulcmag[0]-100,50,posy:-10);
			sb.drawwepcounter(vvv.weaponstatus[0]&VULCF_FAST,
				-28,-16,"blank","STFULAUT"
			);
			if(vvv.weaponstatus[1]>0){
				for(int i=0;i<5;i++){
					sb.drawwepcounter(vvv.vulcchamber[i],-14,
						-11-i*2,"blank","RBRSA3A7"
					);
				}
				int lod=random[shitgun](10,99);
				if(vvv.vulcmag[0]<100)lod=clamp(vvv.vulcmag[0],0,50);
				sb.drawnum(lod,-20,-22,
					sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_RED
				);
				sb.drawwepnum(vvv.weaponstatus[1],20);
			}else if(!vvv.weaponstatus[1])sb.drawstring(
				sb.mamountfont,"00000",(-16,-8),
				sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
				Font.CR_DARKGRAY
			);
			sb.drawnum(vvv.weaponstatus[2],
				-30,-22,
				sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,
				Font.CR_DARKGRAY
			);
		}
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		if(hpl.countinv("IsMoving")>2){
			sb.drawimage(
				"riflsite",(bob.x,bob.y+48),sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);
			return;
		}
		double dotoff=max(abs(bob.x),abs(bob.y));
		if(dotoff<20){
			sb.drawimage(
				whichdot,(0,0)+bob*1.6,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				alpha:0.8-dotoff*0.04
			);
		}
		sb.drawimage(
			"riflsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
		);
		int scaledyoffset=47;
		if(scopeview){
			double degree=(hdw.weaponstatus[VULCS_ZOOM])*0.1;
			texman.setcameratotexture(hpc,"HDXHCAM3",degree);
			sb.drawimage(
				"HDXHCAM3",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(0.31,0.31)
			);
			int scaledwidth=57;
			int cx,cy,cw,ch;
			[cx,cy,cw,ch]=screen.GetClipRect();
			sb.SetClipRect(
				-28+bob.x,19+bob.y,scaledwidth,scaledwidth,
				sb.DI_SCREEN_CENTER
			);
			sb.drawimage(
				"scophole",(0,scaledyoffset)+bob*3,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(0.78,0.78)
			);
			sb.SetClipRect(cx,cy,cw,ch);
			sb.drawimage(
				"zm66scop",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(0.8,0.8)
			);
			sb.drawnum(degree*10,
				3+bob.x,73+bob.y,sb.DI_SCREEN_CENTER,Font.CR_BLACK
			);
			sb.drawimage(
				"BLETA0",(0,77)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				alpha:0.6,scale:(1.3,1.3)
			);
		}
	}
	int permadamage;
	override void consolidate(){
		CheckBFGCharge(VULCS_BATTERY);
		if(breakchance>0){
			if(breakchance>permadamage)permadamage+=max(1,breakchance>>7);
			int oldbreakchance=breakchance;
			breakchance=random(breakchance*2/3,breakchance)+permadamage;
			if(!owner)return;
			string msg="You try to unwarp some of the parts of your Vulcanette";
			if(breakchance>oldbreakchance)msg=msg..", but only made things worse.";
			else if(breakchance<oldbreakchance*9/10)msg=msg..". It seems to scroll more smoothly now.";
			else msg=msg..", to little if any avail.";
			owner.A_Log(msg,true);
		}
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("FourMilAmmo"))owner.A_DropInventory("FourMilAmmo",50);
			else{
				owner.angle-=10;
				owner.A_DropInventory("HD4mMag",1);
				owner.angle+=20;
				owner.A_DropInventory("HDBattery",1);
				owner.angle-=10;
			}
		}
	}
	states{
	select0:
		GTLG A 0{
			A_Overlay(2,"droop");
		}goto select0bfg;
	deselect0:
		GTLG A 0;
		goto deselect0bfg;

	droop:
		TNT1 A 1{
			if(pitch<frandom(5,8)&&(!gunbraced())){
				if(countinv("IsMoving")>2 && countinv("PowerStrength")<1){    
					A_MuzzleClimb(frandom(-0.1,0.1),
						frandom(0.1,clamp(1-pitch,0.1,0.3)));
				}else{
					A_MuzzleClimb(frandom(-0.06,0.06),
						frandom(0.1,clamp(1-pitch,0.06,0.12)));
				}
			}
		}loop;

	ready:
		GTLG A 1{
			A_SetCrosshair(21);
			if(pressingzoom())A_ZoomAdjust(VULCS_ZOOM,16,70);
			else if(justpressed(BT_FIREMODE|BT_ALTFIRE)){
				invoker.weaponstatus[0]^=VULCF_FAST;
				A_PlaySound("weapons/fmswitch",7,0.4);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}
		goto readyend;

	fire:
		GTLG A 1{
			A_WeaponReady(WRF_NONE);
			if(
				invoker.weaponstatus[VULCS_BATTERY]>0 
				&&!random(0,max(0,700-(invoker.breakchance>>1)))
			)invoker.weaponstatus[VULCS_BATTERY]--;
		}goto shoot;
	hold:
		GTLG A 0{
			if(invoker.weaponstatus[VULCS_BATTERY]<1)setweaponstate("nope");
		}
	shoot:
		GTLG A 2{
			A_WeaponReady(WRF_NOFIRE);
			if(
				invoker.weaponstatus[VULCS_BATTERY]>0    
				&&!random(0,invoker.weaponstatus[0]&VULCF_SPINNINGFAST?200:210)
			)invoker.weaponstatus[VULCS_BATTERY]--;
			invoker.weaponstatus[0]&=~VULCF_SPINNINGFAST;

			//check speed and then shoot
			if(
				invoker.weaponstatus[0]&VULCF_FAST
				&&invoker.weaponstatus[VULCS_BATTERY]>=4
				&&invoker.vulcchamber[0]
				&&invoker.breakchance<random(100,5000)
			){
				A_SetTics(1);
				invoker.weaponstatus[0]|=VULCF_SPINNINGFAST;
			}else if(invoker.weaponstatus[VULCS_BATTERY]<2){
				A_SetTics(random(3,4));
			}else if(invoker.weaponstatus[VULCS_BATTERY]<3){
				A_SetTics(random(2,3));
			}
			VulcShoot();
			VulcNextRound();
		}
		GTLG B 1{
			A_WeaponReady(WRF_NOFIRE);
			//check speed and then shoot
			if(
				invoker.weaponstatus[0]&VULCF_SPINNINGFAST&&
				invoker.vulcchamber[0]
			){
				A_SetTics(1);
				VulcShoot(true);
				VulcNextRound();
			}else if(invoker.weaponstatus[VULCS_BATTERY]<2){
				A_SetTics(random(3,4));
			}else if(invoker.weaponstatus[VULCS_BATTERY]<3){
				A_SetTics(random(2,3));
			}
		}
		GTLG B 1{
			A_WeaponReady(WRF_NONE);
			if(invoker.weaponstatus[VULCS_BATTERY]<1)setweaponstate("spindown");
			else A_Refire("holdswap");
		}goto spindown;
	holdswap:
		GTLG A 0{
			if(invoker.vulcmag[0]<1){
				VulcNextMag();
				A_PlaySound("weapons/vulcshunt",CHAN_BODY);
			}
		}goto hold;
	spindown:
		GTLG B 0{
			A_ClearRefire();
			if(!(invoker.weaponstatus[0]&VULCF_SPINNINGFAST))setweaponstate("nope");
			invoker.weaponstatus[0]&=~VULCF_SPINNINGFAST;
		}
		GTLG AB 1{
			A_WeaponReady(WRF_NONE);
			A_MuzzleClimb(frandom(0.4,0.6),-frandom(0.4,0.6));
		}
		GTLG ABAABB 2 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		goto ready;


	flash2:
		VULF B 0;
		goto flashfollow;
	flash:
		VULF A 0;
		goto flashfollow;
	flashfollow:
		---- A 0{
			A_MuzzleClimb(0,0,-frandom(0.1,0.3),-frandom(0.4,0.8));
			A_ZoomFactor(0.99,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			HDFlashAlpha(invoker.weaponstatus[VULCS_HEAT]*48);
		}
		---- A 1 bright A_Light2();
		TNT1 A 0{
			A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		}goto lightdone;


	reload:
		GTLG A 0{
			if(
				//abort if all mag slots taken or no spare ammo
				!countinv("HD4mMag")
				||(
					invoker.vulcmag[0]>0
					&&invoker.vulcmag[1]>0
					&&invoker.vulcmag[2]>0
					&&invoker.vulcmag[3]>0
					&&invoker.vulcmag[4]>0    
				)
			)setweaponstate("nope");else{
				invoker.weaponstatus[0]&=~(VULCF_JUSTUNLOAD|VULCF_LOADCELL);
				setweaponstate("lowertoopen");
			}
		}
	altreload:
	cellreload:
		GTLG A 0{
			if(
				//abort if full battery loaded or no spares
				invoker.weaponstatus[VULCS_BATTERY]>=20    
				||!countinv("HDBattery")
			)setweaponstate("nope");else{
				invoker.weaponstatus[0]&=~VULCF_JUSTUNLOAD;
				invoker.weaponstatus[0]|=VULCF_LOADCELL;
				setweaponstate("lowertoopen");
			}
		}
	unload:
		GTLG A 0{
			invoker.weaponstatus[0]&=~VULCF_LOADCELL;
			invoker.weaponstatus[0]|=VULCF_JUSTUNLOAD;
			setweaponstate("lowertoopen");
		}
	//what key to use for cellunload???
	cellunload:
		GTLG A 0{
			//abort if no cell to unload
			if(invoker.weaponstatus[VULCS_BATTERY]<0)
			setweaponstate("nope");else{
				invoker.weaponstatus[0]|=VULCF_JUSTUNLOAD;
				invoker.weaponstatus[0]|=VULCF_LOADCELL;
				setweaponstate("uncell");
			}
		}

	//lower the weapon, open it, decide what to do
	lowertoopen:
		GTLG A 2 offset(0,36);
		GTLG A 2 offset(4,38){
			A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
			A_MuzzleClimb(-frandom(1.2,1.8),-frandom(1.8,2.4));
		}
		GTLG A 6 offset(9,41)A_PlaySound("weapons/pocket",CHAN_AUTO);
		GTLG A 8 offset(12,43)A_PlaySound("weapons/vulcopen1",CHAN_WEAPON);
		GTLG A 5 offset(10,41)A_PlaySound("weapons/vulcopen2",CHAN_AUTO);
		GTLG A 0{
			if(invoker.weaponstatus[0]&VULCF_LOADCELL)setweaponstate("uncell");
			else if(invoker.weaponstatus[0]&VULCF_JUSTUNLOAD)setweaponstate("unmag");
		}goto loadmag;

	uncell:
		GTLG A 10 offset(11,42){
			int btt=invoker.weaponstatus[VULCS_BATTERY];
			invoker.weaponstatus[VULCS_BATTERY]=-1;
			if(btt<0)setweaponstate("cellout");
			else if(
				!PressingUnload()
				&&!PressingAltReload()
				&&!PressingReload()
			){
				A_SetTics(4);
				HDMagAmmo.SpawnMag(self,"HDBattery",btt);
				
			}else{
				A_PlaySound("weapons/pocket",CHAN_WEAPON);
				HDMagAmmo.GiveMag(self,"HDBattery",btt);
			}
		}goto cellout;

	cellout:
		GTLG A 0 offset(10,40) A_JumpIf(invoker.weaponstatus[0]&VULCF_JUSTUNLOAD,"reloadend");
	loadcell:
		GTLG A 0{
			let bbb=HDMagAmmo(findinventory("HDBattery"));
			if(bbb)invoker.weaponstatus[VULCS_BATTERY]=bbb.TakeMag(true);
		}goto reloadend;

	reloadend:
		GTLG A 3 offset(9,41);
		GTLG A 2 offset(6,38);
		GTLG A 3 offset(2,34);
		goto ready;


	unchamber:
		GTLG B 4 A_PlaySound("weapons/vulcextract",CHAN_AUTO,0.3);
		GTLG A 4;
		GTLG A 0 A_JumpIf(PressingUnload(),"unchamber");
		goto nope;
	unmag:
		//if no mags, remove battery
		//if not even battery, remove rounds from chambers
		GTLG A 0{
			if(
				invoker.vulcmag[0]<0&&
				invoker.vulcmag[1]<0&&
				invoker.vulcmag[2]<0&&
				invoker.vulcmag[3]<0&&
				invoker.vulcmag[4]<0
			){
				if(invoker.weaponstatus[VULCS_BATTERY]>=0)setweaponstate("cellunload");    
				else setweaponstate("unchamber");
			}
		}
		//first, check if there's a mag2-5.
		//if there's no mag2 but stuff after that, shunt everything over until there is.
		//if there's nothing but mag1, unload mag1.
		GTLG A 6 offset(10,40){
			if(
				!invoker.weaponstatus[0]&VULCF_JUSTUNLOAD
			)setweaponstate("loadmag");
			A_PlaySound("weapons/rifleload");
			A_MuzzleClimb(-frandom(1.2,1.8),-frandom(1.8,2.4));
		}
	//remove mag #2 first, #1 only if out of options
	unmag0:
		GTLG A 0{
			if(invoker.vulcmag[1]>=0)setweaponstate("unmag2");    
			else if(
				invoker.vulcmag[2]>=0||
				invoker.vulcmag[3]>=0||
				invoker.vulcmag[4]>=0  
			)setweaponstate("unmagshunt");
			else if(
				invoker.vulcmag[0]>=0    
			)setweaponstate("unmag1");
		}goto reloadend;
	unmagshunt:
		GTLG A 0{
			for(int i=1;i<4;i++){
				invoker.vulcmag[i]=invoker.vulcmag[i+1];
			}
			invoker.vulcmag[4]=-1;
			A_PlaySound("weapons/vulcshunt",CHAN_BODY);
		}
		GTLG AB 2 A_MuzzleClimb(-frandom(0.4,0.6),frandom(0.4,0.6));
		goto ready;

	unmag2:
		VULC A 0{
			int mg1=invoker.vulcmag[1]%100;
			invoker.vulcmag[1]=-1;
			if(mg1<0){setweaponstate("mag2out");return;}
			if(
				!PressingUnload()
				&&!PressingReload()
			){
				HDMagAmmo.SpawnMag(self,"HD4mMag",mg1);
				setweaponstate("mag2out");
			}else{
				HDMagAmmo.GiveMag(self,"HD4mMag",mg1);
				setweaponstate("pocketmag");
			}
		}goto mag2out;
	unmag1:
		VULC A 0{
			int mg0=invoker.vulcmag[0]%100;
			invoker.vulcmag[0]=-1;
			if(mg0<0){setweaponstate("mag2out");return;}
			if(
				!PressingUnload()
				&&!PressingReload()
			){
				HDMagAmmo.SpawnMag(self,"HD4mMag",mg0);
				setweaponstate("mag2out"); //this really is mag2 not mag1
			}else{
				HDMagAmmo.GiveMag(self,"HD4mMag",mg0);
				setweaponstate("pocketmag");
			}
		}goto reloadend;
	pocketmag:
		GTLG A 0 A_PlaySound("weapons/pocket");
		GTLG AA 6 A_MuzzleClimb(frandom(0.4,0.6),-frandom(0.4,0.6));
		GTLG A 0 A_JumpIf(invoker.vulcmag[0]<1,"mag1out");
		goto mag2out;
	mag2out:
		GTLG A 1{
			for(int i=1;i<4;i++){
				invoker.vulcmag[i]=invoker.vulcmag[i+1];
			}
			invoker.vulcmag[4]=-1;
			A_PlaySound("weapons/vulcshunt",CHAN_BODY);
		}
		GTLG AB 2 A_MuzzleClimb(-frandom(0.4,0.6),frandom(0.4,0.6));
		GTLG A 6{
			if(
				invoker.vulcmag[1]<0&&
				invoker.vulcmag[2]<0&&
				invoker.vulcmag[3]<0&&
				invoker.vulcmag[4]<0
			)setweaponstate("reloadend");
		}goto unmag0;

	loadmag:
		//pick the first empty slot and fill that
		GTLG A 0 A_PlaySound("weapons/pocket",CHAN_WEAPON);
		GTLG AA 6 A_MuzzleClimb(-frandom(0.4,0.6),frandom(-0.4,0.4));
		GTLG A 6 offset(10,41){
			if(HDMagAmmo.NothingLoaded(self,"HD4mMag")){setweaponstate("reloadend");return;}
			int lod=HDMagAmmo(findinventory("HD4mMag")).TakeMag(true);

			int magslot=-1;
			if(invoker.vulcmag[0]<0)magslot=0;
			else if(invoker.vulcmag[1]<0)magslot=1;
			else if(invoker.vulcmag[2]<0)magslot=2;
			else if(invoker.vulcmag[3]<0)magslot=3;
			else if(invoker.vulcmag[4]<0)magslot=4;
			else{
				//mag1 is loaded but empty
				HDMagAmmo.SpawnMag(self,"HD4mMag",0);
				A_SetTics(9);
				magslot=0;
				invoker.vulcmag[0]=-1;
			}

			if(lod<51){
				if(!random(0,7)){
					A_PlaySound("weapons/vulcforcemag",CHAN_WEAPON);
					lod=min(0,lod-random(1,2));
					A_Log(HDCONST_426MAGMSG,true);
				}
				invoker.vulcmag[magslot]=100+lod;
			}else invoker.vulcmag[magslot]=51;

			A_MuzzleClimb(-frandom(0.4,0.8),-frandom(0.5,0.7));
		}
		GTLG A 8 offset(9,38){
			A_PlaySound("weapons/rifleclick");
			A_MuzzleClimb(
				-frandom(0.2,0.8),-frandom(0.2,0.3)
				-frandom(0.2,0.8),-frandom(0.2,0.3)
			);
		}
		GTLG A 0{
			if(
				(
					PressingReload()
					||PressingUnload()
					||PressingFire()
					||!countinv("HD4mMag")
				)||(
					invoker.vulcmag[0]>=0
					&&invoker.vulcmag[1]>=0
					&&invoker.vulcmag[2]>=0
					&&invoker.vulcmag[3]>=0
					&&invoker.vulcmag[4]>=0    
					
				)
			)setweaponstate("reloadend");
		}goto loadmag;

	user3:
		VULC A 0 A_MagManager("HD4mMag");
		goto ready;

	spawn:
		VULC A -1;
	}

	int vulcmag[5]; //-1 is no mag loaded; 100+ is jailbroken mag
	int vulcchamber[5]; //2 is broken round

	override void InitializeWepStats(bool idfa){
		breakchance=0;
		weaponstatus[VULCS_BATTERY]=20;
		weaponstatus[VULCS_ZOOM]=30;
		for(int i=0;i<5;i++)vulcmag[i]=51;
		if(idfa)for(int i=0;i<5;i++)vulcchamber[i]=1;
	}

	//shooting and cycling actions
	//move this somewhere sensible
	action void VulcShoot(bool flash2=false){
		invoker.breakchance+=random(0,random(0,invoker.weaponstatus[VULCS_HEAT]/256));
		if(invoker.vulcchamber[0]!=1){ //0 is empty, 2 is broken
			if(invoker.vulcchamber[0])invoker.breakchance+=random(0,15);
			else if(!random(0,63))invoker.breakchance++;
			if(hd_debug)A_Log("Break chance: "..invoker.breakchance);
			return;
		}
		if(random(random(1,500),5000)<invoker.breakchance){
			setweaponstate("nope");
			return;
		}

		if(flash2)A_GunFlash("flash2");else A_GunFlash("flash");

		if(invoker.weaponstatus[0]&VULCF_FAST){
			if(invoker.weaponstatus[VULCS_CHANNEL]>7)invoker.weaponstatus[VULCS_CHANNEL]=4;  
			else if(invoker.weaponstatus[VULCS_CHANNEL]==1)invoker.weaponstatus[VULCS_CHANNEL]=5;
			else invoker.weaponstatus[VULCS_CHANNEL]++;
		}else invoker.weaponstatus[VULCS_CHANNEL]=CHAN_WEAPON;
		A_PlaySound("weapons/vulcanette",invoker.weaponstatus[VULCS_CHANNEL]);

		int cm=countinv("IsMoving");if(
			invoker.weaponstatus[0]&VULCF_FAST
			&&!countinv("PowerStrength")
		)cm*=2;
		double offx=frandom(-0.1,0.1)*cm;
		double offy=frandom(-0.1,0.1)*cm;

		actor b=spawn("HDBullet426",pos+(0,0,height-8),ALLOW_REPLACE);
		b.target=self;b.vel+=vel;b.angle=angle+offx;b.pitch=pitch+offy;

		int heat=min(50,invoker.weaponstatus[VULCS_HEAT]);
		if(heat>20)b.vel+=(frandom(-heat,heat),frandom(-heat,heat),frandom(-heat,heat))*0.1;    
		invoker.weaponstatus[VULCS_HEAT]+=2;

		if(random(0,8192)<min(10,heat))invoker.weaponstatus[VULCS_BATTERY]++;

		invoker.vulcchamber[0]=0;
	}
	action void VulcNextMag(){
		if(invoker.vulcmag[0]>=0){    
			double cp=cos(pitch);double ca=cos(angle+60);
			double sp=sin(pitch);double sa=sin(angle+60);
			actor mmm=HDMagAmmo.SpawnMag(self,"HD4mMag",invoker.vulcmag[0]%100);
			mmm.setorigin(pos+(
				cp*ca*16,
				cp*sa*16,
				height-12-12*sp
			),false);
			mmm.vel=vel+(
				cp*cos(angle+random(55,65)),
				cp*sin(angle+random(55,65)),
				sp
			);
		}
		for(int i=0;i<4;i++){
			invoker.vulcmag[i]=invoker.vulcmag[i+1];
		}
		invoker.vulcmag[4]=-1;
	}
	action void VulcNextRound(){
		if(invoker.vulcchamber[0]){
			//spit out a misfired, wasted or broken round
			if(invoker.vulcchamber[0]>1){    
				for(int i=0;i<5;i++){
					A_SpawnItemEx("TinyWallChunk",3,0,height-18,
						random(4,7),random(-2,2),random(-2,1),
						-30,SXF_NOCHECKPOSITION
					);
				}
			}else{
				A_SpawnItemEx("ZM66DroppedRound",3,0,height-18,
					random(4,7),random(-2,2),random(-2,1),
					-30,SXF_NOCHECKPOSITION
				);
			}
			A_MuzzleClimb(frandom(0.6,2.4),frandom(1.2,2.4));
			invoker.vulcchamber[0]=0;
		}
		//cycle all chambers
		for(int i=0;i<4;i++){
			invoker.vulcchamber[i]=invoker.vulcchamber[i+1];
		}
		invoker.vulcchamber[4]=0;
		if(invoker.vulcmag[0]==51)invoker.vulcmag[0]=50; //open the seal
		if(invoker.vulcmag[0]==100)invoker.vulcmag[0]=0; //jailbroken but empty

		//figure out what's in the mag and load it to the final chamber
		int inmag=max(0,invoker.vulcmag[0]%100);
		if(inmag>0){
			A_PlaySound("weapons/vulcchamber",CHAN_BODY);
			invoker.vulcchamber[4]++;
			if(random(0,2000)<=
				1+(invoker.vulcmag[0]>100)?(invoker.weaponstatus[0]&VULCF_FAST?13:9):0
			)invoker.vulcchamber[4]++;
			invoker.vulcmag[0]--;
		}else invoker.vulcchamber[4]=0;
	}
}


