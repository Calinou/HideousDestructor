class HDLoadoutMenu:OptionMenu{
	array<string> refids;
	array<string> nicenames;
	string translatedloadout;
	override void Init(menu parent,optionmenudescriptor desc){
		super.Init(parent,desc);
		refids.clear();
		nicenames.clear();
		translatedloadout="";

		for(int i=0;i<allactorclasses.size();i++){
			class<actor> reff=allactorclasses[i];
			if(reff is "HDPickup"||reff is "HDWeapon"){
				if(reff is "HDPickup"){
					let ref=getdefaultbytype((class<hdpickup>)(reff));
					refids.push(ref.refid);
					nicenames.push(ref.nicename);
				}else{
					let ref=getdefaultbytype((class<hdweapon>)(reff));
					refids.push(ref.refid);
					nicenames.push(ref.nicename);
				}
			}
		}

playerinfo cplayer=players[consoleplayer];
if(cplayer)translatedloadout=gettranslatedloadout(cvar.getcvar("hd_loadout1",cplayer).getstring());
	}
	string GetTranslatedLoadout(string input){
		string ttl="";
		array<string>items;items.clear();
		array<string>bpitems;bpitems.clear();
		input.tolower();
		input.replace(" ","");
		input.split(items,"-");
		bool inbp=items.size()>1&&items[0]!="";
		if(inbp)items[1].split(bpitems,",");
		string iitems=items[0];items.clear();
		iitems.split(items,",");
		for(int i=0;i<items.size();i++){
			string refid=items[i].left(3);
			int whichindex=refids.find(refid);
			if(whichindex>=refids.size())continue;
			int howmany=max((items[i].mid(3,items[i].length())).toint(10),1);
			ttl=ttl.."\n"..howmany.."x   "..nicenames[whichindex];
		}
		if(inbp){
			ttl=ttl.."\n\nIN BACKPACK:";
			for(int i=0;i<bpitems.size();i++){
				string refid=bpitems[i].left(3);
				int whichindex=refids.find(refid);
				if(whichindex>=refids.size())continue;
				int howmany=max((bpitems[i].mid(3,bpitems[i].length())).toint(10),1);
				ttl=ttl.."\n  "..howmany.."x   "..nicenames[whichindex];
			}
		}
		return ttl;
	}
	override void Drawer(){
		Super.Drawer();
		playerinfo cplayer=players[consoleplayer];
		if(!cplayer)return;

translatedloadout=gettranslatedloadout(cvar.getcvar("hd_loadout1",cplayer).getstring());
		string s=translatedloadout;
		screen.DrawText (SmallFont, OptionMenuSettings.mFontColorValue,
			(screen.GetWidth() - SmallFont.StringWidth (s) * CleanXfac_1) / 2,
			SmallFont.GetHeight()*CleanYFac_1*19,
			s,DTA_CleanNoMove_1, true
		);
	}
}
