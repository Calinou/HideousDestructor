enum HDLoadoutMenuNums{
	HD_MAXLOADOUTS=20,
}
class HDLoadoutMenu:OptionMenu{
	array<string> refids;
	array<string> nicenames;
	string translatedloadout;
	string loadoutname;
	textureid loadoutpic;
	string workingstring;
	string statusstring;
	string clipboard;
	string undo;
	string reflist;
	int cursx;
	int cursy;
	int tlcursy;
	bool different;
	bool viewlist;
	bool isnewgamemenu;
	override void Init(menu parent,optionmenudescriptor desc){
		super.Init(parent,desc);
		refids.clear();
		nicenames.clear();
		cursx=0;cursy=1;
		tlcursy=0;
		isnewgamemenu=false;
		different=false;
		statusstring="Now editing loadout no. "..cursy;
		statustimer=0;
		loadoutname="";
		loadoutpic=texman.checkfortexture("TNT1A0",texman.type_sprite);
		reflist="";viewlist=false;

		string curclass=cvar.findcvar("playerclass").getstring();
		if(curclass.left(8)~=="Loadout "){
			cursy=clamp(curclass.mid(8).toint(),1,HD_MAXLOADOUTS);
		}

		int jw=0;int jp=0;
		for(int i=0;i<allactorclasses.size();i++){
			class<actor> reff=allactorclasses[i];
			if(reff is "HDPickup"||reff is "HDWeapon"){
				if(reff is "HDPickup"){
					let ref=getdefaultbytype((class<hdpickup>)(reff));
					if(ref.refid!=""){
						refids.push(ref.refid);
						nicenames.push(ref.nicename);
						if(!(jp%5))reflist=reflist.."\n";jp++;
						reflist=reflist.."\n\cy"..ref.refid.."\cj   "..ref.nicename;
					}
				}else{
					let ref=getdefaultbytype((class<hdweapon>)(reff));
					if(ref.refid!=""){
						refids.push(ref.refid);
						nicenames.push(ref.nicename);
						if(!(jw%5))reflist="\n"..reflist;jw++;
						if(ref.bwimpy_weapon)reflist=reflist.."\n\cy"..ref.refid.."\cj   "..ref.nicename;
						else reflist="\n\cx"..ref.refid.."\cj   "..ref.nicename..reflist;
					}
				}
			}
		}
		workingstring=cvar.findcvar("hd_loadout"..cursy).getstring();
		translatedloadout=gettranslatedloadout(workingstring);
		undo=workingstring;
		reflist=reflist.mid(1); //get rid of the first "\n"
	}
	override bool MenuEvent(int mkey, bool fromcontroller){
		int startedAt = mDesc.mSelectedItem;
		switch(mkey){
		case MKEY_Left:
			cursx=max(0,cursx-1);
			break;
		case MKEY_Right:
			cursx=min(workingstring.length(),cursx+1);
			break;
		case MKEY_Clear: //backspace
			if(cursx>0){
				workingstring=workingstring.left(cursx-1)..workingstring.mid(cursx);
				cursx--;
				checkdifferent();
			}
			break;
		case MKEY_Back:
			if(checkdifferent()){
				resetws();
				return false;
			}
			break;
		case MKEY_Up:
			if(checkdifferent()){
				statustext("\cjENTER or Ctrl+S to save, or ESC to abort.");
			}else{
				cursy--;
				if(cursy<1)cursy=HD_MAXLOADOUTS;
				statustimer=0;
				MenuSound("menu/cursor");
				resetws();
			}
			break;
		case MKEY_Down:
			if(checkdifferent()){
				statustext("\cjENTER or Ctrl+S to save, or ESC to abort.");
			}else{
				cursy++;
				if(cursy>HD_MAXLOADOUTS)cursy=1;
				statustimer=0;
				MenuSound("menu/cursor");
				resetws();
			}
			break;
		case MKEY_Enter:
			if(different)savechanges();
			else{
				cvar.findcvar("playerclass").setstring("Loadout "..cursy);
				statustext("\cxLoadout set to number "..cursy);
			}
			break;
		case MKEY_PageUp:
			tlcursy=max(0,tlcursy-1);
			break;
		case MKEY_PageDown:
			tlcursy++;
			break;
		}
		translatedloadout=gettranslatedloadout(workingstring);
		return super.menuevent(mkey,fromcontroller);
	}
	override bool OnUIEvent(UIEvent ev){
		if(ev.Type==UIEvent.Type_KeyDown){
			switch(ev.KeyChar){
			case UIEvent.Key_Home:
				cursx=0;
				break;
			case UIEvent.Key_End:
				cursx=workingstring.length();
				break;
			case UIEvent.Key_Del:
				workingstring=workingstring.left(cursx)..workingstring.mid(cursx+1);
				checkdifferent();
				break;
			case UIEvent.Key_F1:
				if(viewlist)viewlist=false;else viewlist=true;
				tlcursy=0;
				break;
			case UIEvent.Key_F2:
			case UIEvent.Key_F3:
			case UIEvent.Key_F4:
			case UIEvent.Key_F5:
			case UIEvent.Key_F6:
			case UIEvent.Key_F7:
			case UIEvent.Key_F8:
			case UIEvent.Key_F9:
			case UIEvent.Key_F11:
			case UIEvent.Key_F12:
				break;
			case UIEvent.Key_F10:
				MenuSound("menu/clear");
				resetws();
				close();
				break;
			default:
				string inp="";
				inp.appendformat("%c",ev.KeyChar);
				if(ev.IsCtrl){
					if(inp~=="r"){
						string bak=cvar.findcvar("hd_loadout"..cursy).getstring();
						cvar.findcvar("hd_loadout"..cursy).resettodefault();
						statustext("\cyRESET TO DEFAULT.");
						resetws();
						undo=bak;
					}else if(inp~=="s"){
						savechanges();
					}else if(inp~=="z"){
						workingstring=undo;
					}else if(inp~=="x"){
						clipboard=workingstring;
						workingstring="";
						statustext("\caCut to clipboard.");
					}else if(inp~=="c"){
						clipboard=workingstring;
						statustext("\cdCopied to clipboard.");
					}else if(inp~=="v"){
						workingstring=clipboard;
						statustext("\cxPasted from clipboard.");
					}else if(inp~=="f"){
						if(viewlist)viewlist=false;else viewlist=true;
						tlcursy=0;
					}
					else if(inp~=="n"){
						if(
							workingstring==cvar.findcvar("hd_loadout"..cursy).getstring()
						){
							MenuSound("menu/choose");
							cvar.findcvar("playerclass").setstring("Loadout "..cursy);
							Menu.SetMenu("PlayerclassMenu");
						}else{
							statustext("\ca- Save your loadout first!");
						}
						return true;
					}
				}else if(ev.KeyChar){
					if(ev.IsShift){
						//there's got to be a better way to do this :(
						if(inp~==";")inp=":";
						else if(inp~=="1")inp="!";
						else if(inp~=="2")inp="@";
						else if(inp~=="3")inp="#";
						else if(inp~=="4")inp="$";
						else if(inp~=="5")inp="%";
						else if(inp~=="6")inp="^";
						else if(inp~=="7")inp="&";
						else if(inp~=="8")inp="*";
						else if(inp~=="9")inp="(";
						else if(inp~=="0")inp=")";
						else if(inp~=="-")inp="_";
						else if(inp~=="=")inp="+";
						else inp.toupper();
					}else inp.tolower();
					workingstring=workingstring.left(cursx)..inp..workingstring.mid(cursx);
					//workingstring=ev.keychar.."   "..workingstring; //debug
					cursx++;
				}
				checkdifferent();
				break;
			}
			translatedloadout=gettranslatedloadout(workingstring);
		}
		return Super.OnUIEvent(ev);
	}
	void StatusText(string input,int timer=70){
		statusstring=input;
		statustimer=timer;
	}
	void savechanges(){
		if(checkdifferent()){
			undo=cvar.findcvar("hd_loadout"..cursy).getstring();
			cvar.findcvar("hd_loadout"..cursy).setstring(workingstring);
			statustext("\cy- SAVED TO LOADOUT NO. "..cursy.." -");
			checkdifferent();
		}
		tlcursy=0;
	}
	void resetws(){
		string def=cvar.findcvar("hd_loadout"..cursy).getstring();
		if(def!=workingstring)workingstring=def;
		different=false;
		translatedloadout=gettranslatedloadout(workingstring);
		cursx=workingstring.length();
		undo=workingstring;
		tlcursy=0;
	}
	bool checkdifferent(){
		string def=cvar.findcvar("hd_loadout"..cursy).getstring();
		different=def!=workingstring;
		return different;
	}
	virtual string GetTranslatedLoadout(string input){
		string ttl="";
		if(viewlist)ttl=reflist;
		else{
			array<string>items;items.clear();
			array<string>bpitems;bpitems.clear();

			string lon;
			string finalinput;
			string desc;
			[finalinput,loadoutname,lon,desc]=HDMath.GetLoadoutStrings(input);
			loadoutpic=texman.checkfortexture(lon,texman.type_any);
			if(finalinput=="doomguy"){
				ttl="Pistol and fifty bullets.";
			}else if(finalinput=="insurgent"){
				ttl="It's a surprise...";
			}else if(finalinput==""){
				ttl="Because showing up is half the battle.";
			}else{
				if(desc!="")ttl=desc.."\n\n"..ttl;
				finalinput.split(items,"-");
				bool inbp=items.size()>1;
				if(inbp)items[1].split(bpitems,",");
				string iitems=items[0];items.clear();
				iitems.split(items,",");
				for(int i=0;i<items.size();i++){
					string refid=items[i].left(3);
					if(refid=="bak"){
						inbp=true;
						continue;
					}
					int whichindex=refids.find(refid);
					if(whichindex>=refids.size())continue;
					int howmany=max((items[i].mid(3,items[i].length())).toint(10),1);
					ttl=ttl..(i?"\n":"")..howmany.." x    "..nicenames[whichindex];
				}
				if(inbp){
					ttl=ttl.."\n\nIN BACKPACK:";
					if(!bpitems.size())ttl=ttl.."\n  <nothing>";
					else for(int i=0;i<bpitems.size();i++){
						string refid=bpitems[i].left(3);
						int whichindex=refids.find(refid);
						if(
							whichindex>=refids.size()
							||nicenames[whichindex]==""
						){
							if(bpitems.size()==1){
								ttl=ttl.."\n  <nothing>";
								break;
							}else continue;
						}
						int howmany=max((bpitems[i].mid(3,bpitems[i].length())).toint(10),1);
						ttl=ttl.."\n  "..howmany.." x    "..nicenames[whichindex];
					}
				}
			}
		}
		int skiplines=tlcursy;
		while(skiplines>0){
			skiplines--;
			int brk=ttl.indexof("\n");
			if(brk<0){
				tlcursy-=skiplines+1;
				break;
			}else ttl=ttl.mid(brk+1);
		}

		if(isnewgamemenu)return ttl;

		ttl="\n\cu  Ctrl+F "..(viewlist?"preview":"refID list").."   PgUp/PgDn scroll\cj\n"..ttl;
		if(viewlist)ttl="\cnC O D E   R E F E R E N C E   L I S T            "..ttl;
		       else ttl="\ceL O A D O U T   P R E V I E W                    "..ttl;
		return ttl;
	}
	int blinktimer;
	int statustimer;
	override void Drawer(){
		Super.Drawer();
		playerinfo cplayer=players[consoleplayer];
		if(!cplayer)return;
		int clfp3=CleanYFac_1*3;

		if(loadoutpic.isvalid()){
			screen.drawtexture(
				loadoutpic,false,300-texman.getsize(loadoutpic),smallfont.getheight()*14,
				DTA_Clean,false,DTA_320x200,true,DTA_TopOffset,true,DTA_LeftOffset,true
			);
		}

		string hs="\cgSyntax:   \cazzzz##xxx n, yyy n - yyy n\n\cazzzz\cu preview picture (optional)\n\caxxx\cu starting weapon   \cayyy\cu anything else\n\can\cu number given\cu (optional, default 1)\n\ca-\cu begin backpack settings (use \cabak\cu for empty)\n\camap\cu for map   \cakey\cu for keys (bitflag BYR)\n\n\cdENTER\cu save   \cdESC\cu clear changes   \cdCtrl+R\cu reset";
		screen.DrawText(SmallFont,
			OptionMenuSettings.mFontColor,
			(screen.GetWidth() - SmallFont.StringWidth(hs) * CleanXfac_1) / 2,
			SmallFont.GetHeight()*CleanYFac_1*4 - clfp3,
			hs,DTA_CleanNoMove_1, true
		);

		string ws=workingstring;
		int tempcursx=cursx;
		int maxwidth=screen.GetWidth()*0.6/(SmallFont.StringWidth("_")*CleanXfac_1);
		int halfmaxwidth=maxwidth/2;
		int addarrows=0;
		int textstart=0;
		int textend=ws.length();
		if(ws.length()>maxwidth){
			int wsl=ws.length();
			if(
				cursx>=halfmaxwidth
				&&wsl-cursx>=halfmaxwidth
			){
				//enough space on both sides of cursor
				tempcursx=halfmaxwidth;
				ws=ws.mid(cursx-halfmaxwidth,maxwidth);
				addarrows|=1|2;
				textstart=cursx-halfmaxwidth;
				textend=cursx+halfmaxwidth;
			}else if(cursx<halfmaxwidth){
				//beginning
				ws=ws.left(maxwidth);
				addarrows|=2;
				textend=maxwidth;
			}else{
				//end
				ws=ws.mid(ws.length()-maxwidth);
				tempcursx-=workingstring.length()-ws.length();
				addarrows|=1;
				textstart=textend-maxwidth;
			}
		}
		int wsline=SmallFont.GetHeight()*CleanYFac_1*14;
		int wswidth=SmallFont.StringWidth(ws) * CleanXfac_1;
		int wsxpos=(screen.GetWidth() - wswidth) / 2;
		screen.DrawText(SmallFont,
			different?OptionMenuSettings.mFontColorHeader:OptionMenuSettings.mFontColorValue,
			wsxpos,wsline,ws,DTA_CleanNoMove_1,true
		);

		blinktimer++;
		if(blinktimer>3){
			if(blinktimer>6)blinktimer=0;
			screen.DrawText(SmallFont,OptionMenuSettings.mFontColorHighlight,
				wsxpos+SmallFont.StringWidth(ws.left(tempcursx))*CleanXfac_1,
				wsline + clfp3,
				"_",DTA_CleanNoMove_1,true
			);
		}
		if(addarrows&&blinktimer>2){
			if(addarrows&1)screen.DrawText(SmallFont,
				OptionMenuSettings.mFontColor,
				wsxpos-SmallFont.StringWidth("<<  ") * CleanXfac_1,
				wsline,"<<  ",DTA_CleanNoMove_1, true
			);
			if(addarrows&2)screen.DrawText(SmallFont,
				OptionMenuSettings.mFontColor,
				wsxpos+wswidth,
				wsline,"  >>",DTA_CleanNoMove_1, true
			);
		}
		string s="Now editing loadout no. "..cursy;
		if(loadoutname!="")s=s..", \""..loadoutname.."\"";
		if(statustimer>0){
			statustimer--;
			s=statusstring;
		}
		screen.DrawText(SmallFont,OptionMenuSettings.mTitleColor,
			(screen.GetWidth() - SmallFont.StringWidth(s) * CleanXfac_1) / 2,
			SmallFont.GetHeight()*CleanYFac_1*15 + clfp3,
			s,DTA_CleanNoMove_1, true
		);
		s=translatedloadout;
		screen.DrawText(SmallFont,OptionMenuSettings.mFontColorValue,
			(screen.GetWidth() - SmallFont.StringWidth (s) * CleanXfac_1) / 2,
			SmallFont.GetHeight()*CleanYFac_1*18,
			s,DTA_CleanNoMove_1, true
		);
	}
}




class HDNewGameLoadoutMenu:HDLoadoutMenu{
	override void Init(menu parent,optionmenudescriptor desc){
		super.Init(parent,desc);
		isnewgamemenu=true;
		translatedloadout=gettranslatedloadout(workingstring);
		cursx=workingstring.length();
	}
	override string GetTranslatedLoadout(string input){
		string sss=super.GetTranslatedLoadout(input);
		if(loadoutname=="")loadoutname="Loadout "..cursy;
		if(!loadoutpic.isvalid()){
			string ws=workingstring.mid(workingstring.indexof(":")+1);
			ws.replace(" ","");
			ws=ws.left(3);
			for(int i=0;i<allactorclasses.size();i++){
				let ai=(class<hdpickup>)(allactorclasses[i]);
				let aw=(class<hdweapon>)(allactorclasses[i]);
				if(!ai&&!aw)continue;
				bool match=false;
				if(ai){
					let aai=getdefaultbytype(ai);
					if(ws~==aai.refid){
						match=true;
						loadoutpic=aai.icon;
					}
					if(loadoutpic.isvalid())break;
				}else if(aw){
					let aaw=getdefaultbytype(aw);
					if(ws~==aaw.refid){
						match=true;
						loadoutpic=aaw.icon;
					}
					if(loadoutpic.isvalid())break;
				}
				if(match&&!loadoutpic.isvalid()){
					let gdi=getdefaultbytype(allactorclasses[i]);
					let dds=gdi.spawnstate;
					if(dds!=null)loadoutpic=dds.GetSpriteTexture(0);
				}
				if(loadoutpic.isvalid())break;
			}
			if(!loadoutpic.isvalid())loadoutpic=texman.checkfortexture("AMMOA0",texman.type_sprite);
		}
		return sss;
	}
	override bool MenuEvent(int mkey, bool fromcontroller){
		int startedAt = mDesc.mSelectedItem;
		switch(mkey){
		case MKEY_Up:
			cursy--;
			if(cursy<1)cursy=HD_MAXLOADOUTS;
			statustimer=0;
			MenuSound("menu/cursor");
			resetws();
			return true;
		case MKEY_Down:
			cursy++;
			if(cursy>HD_MAXLOADOUTS)cursy=1;
			statustimer=0;
			MenuSound("menu/cursor");
			resetws();
			return true;
		case MKEY_Enter:
			MenuSound("menu/choose");
			cvar.findcvar("playerclass").setstring("Loadout "..cursy);
			Menu.SetMenu("PlayerclassMenu");
			return true;
		case MKEY_PageUp:
			tlcursy=max(0,tlcursy-1);
			break;
		case MKEY_PageDown:
			tlcursy++;
			break;
		case MKEY_Back:
			MenuSound("menu/clear");
			resetws();
			close();
			break;
		}
		translatedloadout=gettranslatedloadout(workingstring);
		return super.menuevent(mkey,fromcontroller);
	}
	override bool OnUIEvent(UIEvent ev){
		if(ev.Type==UIEvent.Type_KeyDown){
			switch(ev.KeyChar){
			case UIEvent.Key_Home:
				cursx=0;
				return true;
			case UIEvent.Key_End:
				cursx=workingstring.length();
				return true;
			case UIEvent.Key_F10:
				MenuSound("menu/clear");
				resetws();
				close();
				return true;
			default:
				string inp="";
				inp.appendformat("%c",ev.KeyChar);
				if(inp~=="r"){
					cursy=random(1,HD_MAXLOADOUTS);
					MenuSound("menu/choose");
					if(ev.IsCtrl){
						if(ev.IsShift)cvar.findcvar("playerclass").setstring("Loadout "..cursy);
						else cvar.findcvar("playerclass").setstring("Random");
						Menu.SetMenu("PlayerclassMenu");
					}else{
						resetws();
					}
					return true;
				}
				int inpt=inp.toint(16);
				if(inp~=="g")inpt=16;
				else if(inp~=="h")inpt=17;
				else if(inp~=="i")inpt=18;
				else if(inp~=="j")inpt=19;
				else if(inp~=="k")inpt=20;
				else if(inp~=="0")inpt=1;
				if(inpt>0&&inpt<=HD_MAXLOADOUTS){
					cursy=inpt;
					resetws();
					return true;
				}
				return true;
			}
			translatedloadout=gettranslatedloadout(workingstring);
		}
		return false;
	}
	override void Drawer(){
		Optionmenu.Drawer();
		playerinfo cplayer=players[consoleplayer];
		if(!cplayer)return;
		int clfp3=CleanYFac_1*3;

		string hs="\cuUp/Down select\nEnter confirm\nR random, +Ctrl lucky";
		screen.DrawText(SmallFont,
			OptionMenuSettings.mFontColor,
			(screen.GetWidth() - SmallFont.StringWidth(hs) * CleanXfac_1) / 2,
			SmallFont.GetHeight()*CleanYFac_1*3-clfp3,
			hs,DTA_CleanNoMove_1, true
		);

		if(loadoutpic.isvalid()){
			int picsx,picsy;
			[picsx,picsy]=texman.getsize(loadoutpic);
			screen.drawtexture(
				loadoutpic,false,160-picsx/2,smallfont.getheight()*7-picsy-2,
				DTA_Clean,false,DTA_320x200,true,DTA_TopOffset,true,DTA_LeftOffset,true
			);
		}

		string ws=workingstring.mid(workingstring.indexof(":")+1);
		while(ws.charat(0)==" ")ws=ws.mid(1);

		if(ws=="")ws="<nothing>";

		int tempcursx=cursx;
		int maxwidth=screen.GetWidth()*0.6/(SmallFont.StringWidth("_")*CleanXfac_1);
		int halfmaxwidth=maxwidth/2;
		int addarrows=0;
		int textstart=0;
		int textend=ws.length();
		if(ws.length()>maxwidth){
			int wsl=ws.length();
			if(cursx<halfmaxwidth)cursx=halfmaxwidth;
			else cursx=min(cursx,wsl-halfmaxwidth);
			if(
				cursx>halfmaxwidth
				&&wsl-cursx>halfmaxwidth
			){
				//enough space on both sides of cursor
				tempcursx=halfmaxwidth;
				ws=ws.mid(cursx-halfmaxwidth,maxwidth);
				addarrows|=1|2;
				textstart=cursx-halfmaxwidth;
				textend=cursx+halfmaxwidth;
			}else if(cursx<=halfmaxwidth){
				//beginning
				ws=ws.left(maxwidth);
				addarrows|=2;
				textend=maxwidth;
			}else{
				//end
				ws=ws.mid(ws.length()-maxwidth);
				tempcursx-=workingstring.length()-ws.length();
				addarrows|=1;
				textstart=textend-maxwidth;
			}
		}
		int wsline=SmallFont.GetHeight()*CleanYFac_1*13;
		int wswidth=SmallFont.StringWidth(ws) * CleanXfac_1;
		int wsxpos=(screen.GetWidth() - wswidth) / 2;

		screen.DrawText(SmallFont,
			different?OptionMenuSettings.mFontColorHeader:OptionMenuSettings.mFontColorValue,
			wsxpos,wsline,"\cp"..ws,DTA_CleanNoMove_1,true
		);

		blinktimer++;
		if(addarrows&&blinktimer>2){
			if(addarrows&1)screen.DrawText(SmallFont,
				OptionMenuSettings.mFontColor,
				wsxpos-SmallFont.StringWidth("<<  ") * CleanXfac_1,
				wsline,"<<  ",DTA_CleanNoMove_1,true
			);
			if(addarrows&2)screen.DrawText(SmallFont,
				OptionMenuSettings.mFontColor,
				wsxpos+wswidth,
				wsline,"  >>",DTA_CleanNoMove_1, true
			);
		}

		string s="Loadout no.  "..cursy;
		screen.DrawText(SmallFont,OptionMenuSettings.mTitleColor,
			(screen.GetWidth() - SmallFont.StringWidth(s) * CleanXfac_1) / 2,
			SmallFont.GetHeight()*CleanYFac_1*10 + clfp3,
			s,DTA_CleanNoMove_1, true
		);
		screen.DrawText(BigFont,OptionMenuSettings.mFontColorHighlight,
			(screen.GetWidth() - BigFont.StringWidth(loadoutname) * CleanXfac_1) / 2,
			SmallFont.GetHeight()*CleanYFac_1*11 + clfp3,
			loadoutname,DTA_CleanNoMove_1, true
		);
		s=translatedloadout;
		screen.DrawText(SmallFont,OptionMenuSettings.mFontColorValue,
			(screen.GetWidth() - SmallFont.StringWidth (s) * CleanXfac_1) / 2,
			SmallFont.GetHeight()*CleanYFac_1*15,
			s,DTA_CleanNoMove_1, true
		);
	}
}
