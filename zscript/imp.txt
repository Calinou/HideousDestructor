// ------------------------------------------------------------
// Imp
// ------------------------------------------------------------
class HDImpBallTail:HDFireballTail{
	default{
		translation "ice";
		renderstyle "subtract";
		deathheight 0.9;
		gravity 0;
	}
	states{
	spawn:
		BAL1 CDE 5{
			roll+=10;
			scale.x*=randompick(-1,1);
		}loop;
	}
}
class HDImpBall:HDFireball{
	default{
		missiletype "HDImpBallTail";
		damagetype "electro";
		damagefunction(10);
		decal "scorch";
		gravity 0;
	}
	double initangleto;
	double inittangle;
	double inittz;
	vector3 initpos;
	states{
	spawn:
		BAL1 ABAB 3 A_FBTail();
	spawn2:
		BAL1 AB 3 {
			A_Corkscrew(stamina*frandom(0,0.4));if(stamina<5)stamina++;
			roll+=10;
			if(!A_FBSeek())A_FBFloat();
		}
		loop;
	death:
		TNT1 AAA 0 A_SpawnItemEx("HDSmoke",flags:SXF_NOCHECKPOSITION);
		TNT1 A 0{
			A_Scream();
			tracer=null;
			if(blockingmobj){
				if(
					blockingmobj is "DoomImp"
					&&(!target||blockingmobj!=target.target)
				)blockingmobj.health=min(
						blockingmobj.spawnhealth(),
						blockingmobj.health+random(1,10)
				);
				else{
					tracer=blockingmobj;
					blockingmobj.damagemobj(self,target,random(6,18),"Electro");
				}
			}
			if(tracer){
				initangleto=angleto(tracer);
				inittangle=tracer.angle;
				inittz=tracer.pos.z;
				initpos=tracer.pos-pos;

				//HEAD SHOT
				if(
					pos.z-tracer.pos.z>tracer.height*0.8
					&&!(tracer is "Cacodemon")
					&&!(tracer is "Demon")
					&&!(tracer is "SpiderMastermind")
					&&!(tracer is "Arachnotron")
					&&!(tracer is "PainElemental")
					&&!(tracer is "LostSoul")
					&&!(tracer is "Putto")
					&&!(tracer is "Yokai")
				){
					if(hd_debug)A_Log("HEAD SHOT");
					bpiercearmor=true;
				}
			}else A_SprayDecal("BrontoScorch",radius*2);
		}
		BAL1 ABCCDDEEEEEEE 3{
			roll=frandom(0,360);alpha*=0.96;scale*=frandom(1.,0.96);
			if(!tracer)return;
			int diff=max(
				absangle(initangleto,angleto(tracer)),
				absangle(inittangle,tracer.angle),
				abs(inittz-tracer.pos.z)*0.05
			);
			int dmg=max(0,10-diff/10);
			if(!tracer.player)tracer.angle+=randompick(-10,10);

			//do it again
			initangleto=angleto(tracer);
			inittangle=tracer.angle;
			inittz=tracer.pos.z;

			if(dmg){
				tracer.damagemobj(self,target,dmg/10,"Thermal");
				tracer.A_GiveInventory("Heat",dmg);
			}

			setorigin((pos+(tracer.pos-initpos))*0.5,true);
		}
		stop;
	}
}
class dimp:doomimp{
	vector2 lead1;
	vector2 lead2;
	vector2 spamaim;
	bool spamming;
	default{
		translation "64:72=50:71";
		health 100;
		speed 12;
	}
	override void postbeginplay(){
		super.postbeginplay();
		hdmobai.resize(self,0.8,1.1);
	}
	void A_DImpChase(){
		HDMobAI.Chase(self);
		HealThing(1);
	}
	states{
	spawn:
		TROO AAABBCCCDD 8 A_Look();
		#### A 0 A_SetAngle(angle+random(-4,4));
		#### A 1 A_SetTics(random(1,3));
		---- A 0 A_Jump(216,2);
		---- A 0 A_PlaySound("imp/active");
		#### A 0 A_JumpIf(bambush,"spawn");
		#### A 0 A_Jump(32,"spawn2");
		loop;
	spwander:
		#### ABCD 4{
			HealThing(1);
			A_Look();
			A_Wander();
		}
		#### A 0 A_Jump(198,"spawn2");
		#### A 0 A_Recoil(-0.4);
		#### A 0 A_Jump(64,"spawn");
		loop;
	see:
		TROO AABBCCDD 3 A_DImpChase();
		loop;
	melee:
		TROO ABCD 4{
			A_FaceTarget(40,40);
			if(A_JumpIfTargetInLOS("null",20))setstatelabel("claw");
		}
	claw:
		TROO E 8 A_FaceTarget(20);
		TROO F 4 A_CustomMeleeAttack(random(10,30),"imp/melee","","claws",true);
		TROO G 10;
		goto see;
	missile:
		TROO ABCD 4{
			A_FaceTarget(40,40);
			A_ChangeVelocity(0,frandom(1,3)*(health%2?-1:1),0,CVF_RELATIVE);
			if(
				target&&
				A_JumpIfTargetInLOS("null",20)
			){
				spamming=false;
				setstatelabel("shootaimed");
			}else spamming=true;
		}goto shootspam;
	shoot:
	shootaimed:
		TROO E 7 A_JumpIf(spamming,"shootspam");
		TROO EF 2 A_FaceTarget(20,20);
		TROO F 1{
			if(!hdmobai.tryshoot(self,32,128,20,20,5))
			A_FaceTarget(20,20);
			lead1=(angle,pitch);
		}
		TROO F 1{
			A_FaceTarget(20,20);
			lead2=(angle,pitch);
			spamaim=(angle,pitch);
		}
		TROO G 10{
			if(target){
				double dist=min(distance2d(target),1024)*frandom(0,0.05);
				pitch-=(lead2.y-lead1.y)*dist;
				angle+=(lead2.x-lead1.x)*dist;
			}
			actor a;bool b;
			[b,a]=A_SpawnItemEx("HDImpBall",0,0,32,
				cos(pitch)*16,0,sin(-pitch)*16,
				0,SXF_SETTARGET
			);
			a.tracer=target;
		}
		TROO G 0{
			if(target&&!random(0,checksight(target)?2:6)){
				spamming=true;
				setstatelabel("shootspam");
			}
		}
		goto see;
	shootspam:
		TROO E 3 A_JumpIf(spamaim==(0,0),"see");
		TROO E 6{
			A_SetTics(random(4,7));
			if(!target)return;
			if(absangle(angleto(target),spamaim.x)>45){
				A_FaceTarget(20,20);
				spamaim=(angle,pitch);
			}
			angle=spamaim.x+frandom(-4,4);
			pitch=spamaim.y+frandom(-4,4);
		}
		TROO F 4;
		TROO G 8{
			actor a;bool b;
			[b,a]=A_SpawnItemEx("HDImpBall",0,0,32,
				cos(pitch)*frandom(6,10),0,sin(-pitch)*frandom(6,10),
				0,SXF_SETTARGET
			);
			a.tracer=target;
		}
		TROO F 3{
			bool tgtv=(target&&checksight(target));
			if(tgtv){
				A_FaceTarget(20,20,flags:FAF_TOP);
				lead2=(angle,pitch);
				spamaim=(angle,pitch);
			}
			if(random(0,tgtv?2:6)){
				setstatelabel("shootspam");
			}else spamming=false;
		}
		goto see;
	pain:
		TROO H 3 A_GiveInventory("HDFireDouse",60);
		TROO H 3 A_Pain();
		goto see;
	raise:
		TROO LKJI 5;
		goto see;
	}
}




#include "zscript/oldimp.txt"
