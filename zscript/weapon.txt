// ------------------------------------------------------------
// Prototype weapon
// ------------------------------------------------------------
class HDWeapon:Weapon{
	double barrellength;
	double barrelwidth;
	double barreldepth;
	property barrelsize:barrellength,barrelwidth,barreldepth;
	int weaponstatus[8];
	int tipped;
	enum HDWeaponFlagsets{
		WRF_ALL=WRF_ALLOWRELOAD|WRF_ALLOWZOOM|WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4,
		WRF_NONE=WRF_NOFIRE|WRF_DISABLESWITCH,
	}
	default{
		+weapon.ammo_optional +weapon.alt_ammo_optional +weapon.noalert +weapon.noautoaim
		+solid +noblockmonst +notrigger +dontgib
		weapon.ammogive 0;weapon.ammogive2 0;
		weapon.ammouse1 0;weapon.ammouse2 0;
		weapon.bobstyle "Alpha";
		inventory.pickupsound "misc/w_pkup";
		radius 12;height 12;

		weapon.bobspeed 2.4;
		weapon.bobrangex 0.2;
		weapon.bobrangey 0.8;
		hdweapon.barrelsize 0,0,0;
	}
	//wrapper for setpsprite
	action void SetWeaponState(statelabel st,int layer=PSP_WEAPON){
		if(player)player.setpsprite(layer,invoker.findstate(st));
	}
	//use target to help a dropped weapon remember its immediately prior owner
	override void detachfromowner(){
		owner.A_SelectWeapon("Ring");
		angle=owner.angle;pitch=owner.pitch;
		target=owner;
		super.detachfromowner();
	}
	//wrapper for HDMath.MaxInv because we're gonna need this a lot
	action int AmmoCap(class<inventory> inv){
		return HDMath.MaxInv(self,inv);
	}
	//wrapper for checking if gun is braced
	action bool gunbraced(){
		return hdplayerpawn(self)&&hdplayerpawn(self).gunbraced;
	}
	//use this to set flash translucency and make it additive
	action void HDFlashAlpha(int variance=0,bool noalpha=false,int layer=PSP_FLASH){
		A_OverlayFlags(layer,PSPF_ALPHA|PSPF_ADDBOB|PSPF_RENDERSTYLE,true);
		A_OverlayRenderstyle(layer,STYLE_Add);
		double fa;
		if(noalpha){
			A_OverlayAlpha(layer,1.);
		}else{
			int lg=cursector.lightlevel-variance*frandom(0.6,1.);
			fa=1.-(lg*0.003);
			A_OverlayAlpha(layer,fa);
		}
		if(noalpha||fa>0.1)setstatelabel("melee");
	}
	//wrapper for HDWeapon and ActionItem
	//remember: LEFT and DOWN
	//change these back to vector2s after 3.2?
	action void A_MuzzleClimb(
		double mc10=0,double mc11=0,
		double mc20=0,double mc21=0,
		double mc30=0,double mc31=0,
		double mc40=0,double mc41=0
	){
		let hdp=HDPlayerPawn(self);
		if(hdp){
			hdp.A_MuzzleClimb((mc10,mc11),(mc20,mc21),(mc30,mc31),(mc40,mc41));
		}else{ //I don't even know why
			vector2 mc0=(mc10,mc11)+(mc20,mc21)+(mc30,mc31)+(mc40,mc41);
			A_SetPitch(pitch+mc0.y,SPF_INTERPOLATE);
			A_SetAngle(angle+mc0.x,SPF_INTERPOLATE);
		}
	}
	//do these whenever the gun is ready
	action void ReadyEnd(){
		let p=HDPlayerPawn(self);
		if(
			player&&
			p&&!p.beatcount&&p.zerk>900
			&&!random(0,(invoker is "Ring")?20:100)
		)player.cmd.buttons|=BT_ATTACK;
		A_TakeInventory("WeaponBusy");
	}
	//determine mass for weapon inertia purposes
	virtual double gunmass(){return 0;}
	//for smoking barrels
	void drainheat(int ref,int smklength=18){
		if(globalfreeze||level.Frozen)return;
		if(weaponstatus[ref]>0){
			weaponstatus[ref]--;
			if(random(1,10)>weaponstatus[ref])return;
			vector3 smkpos=pos;
			vector3 smkvel=vel;
			double smkang=angle;
			if(owner){
				smkpos=owner.pos;
				if(owner.player && owner.player.readyweapon==self){
					//spawn smoke from muzzle
					smkang=owner.angle;
					smkpos.z+=owner.height-9-sin(owner.pitch)*smklength;
					smkpos.xy+=cos(owner.pitch)*smklength*(cos(smkang),sin(smkang));
				}else{
					//spawn smoke from behind owner
					smkang=owner.angle;
					smkpos.z+=owner.height*0.6;
					smkpos.xy-=10*(cos(smkang),sin(smkang));
				}
				smkvel=owner.vel;
			}
			actor a=spawn("HDGunsmoke",smkpos);
			smkvel*=0.4;
			a.angle=smkang;a.vel+=smkvel;
			a.A_ChangeVelocity(3,0,0,CVF_RELATIVE);
			for(int i=30;i<weaponstatus[ref];i+=30){
				if(!random(0,3)){
					a=spawn("HDGunsmoke",smkpos);
					a.angle=smkang;a.vel+=smkvel;
					a.A_ChangeVelocity(3,frandom(-2,2),frandom(-2,2),CVF_RELATIVE);
				}
			}
		}
	}
	void ShowTip(bool forced=false){
		if(
			forced||(
				tipped<3&&
				owner&&owner.player&&
				cvar.getcvar("hd_helptext",owner.player).getint()>1
			)
		){
			owner.ACS_NamedExecuteAlways("TipMessage",0,-1,selectionorder);
			if(!forced)tipped++;
		}
	}
	//activate a laser rangefinder
	//because every gun should have one of these
	action double FindRange(){
		actor a;double b;
		[a,b]=lineattack(
			angle,9999999999,pitch,0,"none",
			"LaserCheckPuff",flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-6
		);
		if(!a){
			A_Log("\cd[\cuRF\cd]\cj ERROR",true);
			return 0;
		}
		a.addz(-height+6);
		double c=distance3d(a);
		b=c*(1./HDCONST_ONEMETRE);
		if(b>128)b*=frandom(0.999,1.001);
		A_Log(string.format("\cd[\cuRF\cd]\cj \cf%.2f\cj metre%s",b,b==1?"":"s"),true);
		if(hd_debug)A_Log(string.format("(%.2f DU%s)",c,c==1?"":"s"),true);
		return b;
	}
	//that said, why get picky when you can just shoot twice?
	action void A_MagManager(int type){
		A_SetInventory("MagManager",1);
		let mm=MagManager(findinventory("MagManager"));
		mm.weaponstatus[HDMMS_WHICH]=type;
		A_SelectWeapon("MagManager");
	}

	override void touch(actor toucher){}
	virtual void actualpickup(actor other){
		if(other.countinv(getclassname()))return;
		other.A_Log(string.format("\cg%s",pickupmessage()),true);
		other.A_PlaySound(pickupsound,CHAN_AUTO);
		attachtoowner(other);
		tipped=0;
	}
	override bool cancollidewith(actor other,bool passive){
		return(other is "userpickerupper");
	}
	//because weapons don't use proper "ammo" anymore for loaded items
	virtual void InitializeWepStats(bool idfa=false){}
	override void beginplay(){
		for(int i=0;i<8;i++)weaponstatus[i]=0;
		initializewepstats();
		super.beginplay();
	}
	//because I'm too lazy to retype all that shit
	action bool PressingFire(){return player.cmd.buttons&BT_ATTACK;}
	action bool PressingAltfire(){return player.cmd.buttons&BT_ALTATTACK;}
	action bool PressingReload(){return player.cmd.buttons&BT_RELOAD;}
	action bool PressingZoom(){return player.cmd.buttons&BT_ZOOM;}
	action bool PressingAltReload(){return player.cmd.buttons&BT_USER1;}
	action bool PressingFiremode(){return player.cmd.buttons&BT_USER2;}
	action bool PressingUser3(){return player.cmd.buttons&BT_USER3;}
	action bool PressingUnload(){return player.cmd.buttons&BT_USER4;}
	states{
	spawn:
		TNT1 A 0;
		stop;
	select:
		TNT1 A 0{
			//these two don't actually work???
			A_OverlayFlags(PSP_WEAPON,PSPF_CVARFAST|PSPF_POWDOUBLE,false);
			A_OverlayFlags(PSP_FLASH,PSPF_CVARFAST|PSPF_POWDOUBLE,false);

			A_SetInventory("WeaponBusy",1);
			A_SetCrosshair(21);

			if(!countinv("NulledWeapon"))invoker.ShowTip();

			return resolvestate("select0");
		}
	select0:
		---- A 0 A_Raise();
		wait;
	deselect:
		TNT1 A 0{
			A_SetInventory("WeaponBusy",1);
			A_SetCrosshair(21);
			return resolvestate("deselect0");
		}
	deselect0:
		---- A 0 A_Lower();
		wait;

	select0big:
		---- A 2 A_JumpIfInventory("NulledWeapon",1,"select1big");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(11);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(0);
		wait;
	deselect0big:
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1big");
		---- A 1 A_Lower(-2);
		---- A 1 A_Lower(0);
		---- AA 1 A_Lower(2);
		---- A 1 A_Lower(3);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower();
		wait;
	deselect1big:
		---- AA 1 A_Lower(-2);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;
	select1big:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(35);
		---- A 1 A_Raise(24);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(0);
		wait;
	select0small:
		---- A 1 A_JumpIfInventory("NulledWeapon",1,"select1small");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(10);
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(12);
		---- A 1 A_Raise(6);
		---- A 1 A_WeaponOffset(0,-2,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;
	deselect0small:
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1small");
		---- A 1 A_Lower(-1);
		---- AA 1 A_Lower(2);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower(36);
		---- A 1 A_Lower();
		wait;
	deselect1small:
		---- A 1 A_Lower(-3);
		---- A 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower(36);
		wait;
	select1small:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(16);
		---- A 1 A_Raise(12);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;
	select0bfg:
		---- A 3 A_JumpIfInventory("NulledWeapon",1,"select1bfg");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise();
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		---- A 1 A_Raise(12);
		---- AAA 1 A_Raise();
		---- A 1 A_Raise(-2);
		---- AA 1 A_Raise(-1);
		---- AA 1 {
			A_MuzzleClimb(0.3,0.8);
			A_Raise(-1);
		}
		---- AA 1 A_MuzzleClimb(-0.1,-0.4);
		---- AA 1 A_Raise();
		---- A 1 A_Raise();
		---- A 1 A_Raise(12);
		---- A 1 A_Raise(12);
		wait;
	deselect0bfg:
		---- A 0 A_JumpIfHealthLower(1,"deselect1big");
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1bfg");
		---- AA 1 A_Lower(-1);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(-2);
		---- AA 1 A_Lower(-1);
		---- AA 1{
			A_MuzzleClimb(0.3,0.8);
			A_Lower(-1);
		}
		---- AA 1{
			A_MuzzleClimb(-0.1,-0.4);
			A_Lower(2);
		}
		---- AAAA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		wait;
	deselect1bfg:
		---- AA 1 A_Lower(-2);
		---- A 1 A_Lower(0);
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		wait;
	select1bfg:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(16);
		---- A 1 A_Raise(12);
		---- A 1{
			A_WeaponOffset(0,-6,WOF_ADD);
			A_MuzzleClimb(-0.1,-1.);
		}
		---- AA 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;

	ready:
		TNT1 A 1 A_WeaponReady(WRF_ALL);
	readyend:
		---- A 0{
			let p=HDPlayerPawn(self);
			if(
				player&&
				p&&!p.beatcount&&p.zerk>900
				&&!random(0,(invoker is "Ring")?20:100)
			)player.cmd.buttons|=BT_ATTACK;
			A_TakeInventory("WeaponBusy");
		}
		---- A 0 A_Jump(256,"ready");
	user1:
		---- A 0 A_Jump(256,"altreload");
	user2:
		---- A 0 A_Jump(256,"firemode");
	user3:
		---- A 0 FindRange();
		goto nope;
	user4:
		---- A 0 A_Jump(256,"unload");
	fire:
	altfire:
	hold:
	althold:
	reload:
	zoom:
	altreload:
	firemode:
	unload:
	nope:
		---- A 1{
			A_ClearRefire();
			A_WeaponReady(WRF_NOFIRE);
		}
		---- A 0{
			int inp=getplayerinput(MODINPUT_BUTTONS);
			if(
				inp&BT_ATTACK||
				inp&BT_ALTATTACK||
				inp&BT_RELOAD||
				inp&BT_ZOOM||
				inp&BT_USER1||
				inp&BT_USER2||
				inp&BT_USER3||
				inp&BT_USER4
			)setweaponstate("nope");
		}
		---- A 0 A_Jump(256,"ready");
	}
}

//for the rangefinder function
class LaserCheckPuff:CheckPuff{default{-alwayspuff -skyexplode}}



// Null weapon for lowering weapon
class NulledWeapon:InventoryFlag{}
class NullWeapon:HDWeapon{
	default{
		+weapon.wimpy_weapon
		+weapon.cheatnotweapon
		+nointeraction
		+weapon.noalert
		+inventory.untossable
		hdweapon.barrelsize 10,4,7;
	}
	override inventory CreateTossable(int amount){
		let onr=hdplayerpawn(owner);
		if(onr){
			if(onr.lastweapon)onr.A_DropInventory(onr.lastweapon.getclassname());
		}
		return null;
	}
	override double gunmass(){
		return 12;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	select:
		TNT1 A 0{
			A_TakeInventory("PowerFrightener");
			A_SetInventory("NulledWeapon",1);
			A_SetCrosshair(21);
		}
		TNT1 A 0 A_Raise();
		wait;
	deselect:
		TNT1 A 0 A_SetCrosshair(21);
		TNT1 A 0 A_Lower();
		wait;
	ready:
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		TNT1 A 0 A_TakeInventory("WeaponBusy");
		loop;
	fire:
		TNT1 A 1;
		goto ready;
	}
}





extend class HDPlayerPawn{
	override void FireWeaponAlt(state stat){
		super.fireweaponalt(stat);
		player.weaponstate|=WF_WEAPONBOBBING;
	}
	override void FireWeapon(state stat){
		super.fireweapon(stat);
		player.weaponstate|=WF_WEAPONBOBBING;
	}
}


