// ------------------------------------------------------------
// Prototype weapon
// ------------------------------------------------------------
class HDWeapon:Weapon{
	double barrellength;
	double barrelwidth;
	double barreldepth;
	property barrelsize:barrellength,barrelwidth,barreldepth;
	string refid;
	property refid:refid;
	string nicename;
	property nicename:nicename;
	int weaponstatus[8];
	int tipped;
	int msgtimer;
	string wepmsg;
	bool dontfistondrop;property dontfistondrop:dontfistondrop;
	bool fitsinbackpack;property fitsinbackpack:fitsinbackpack;
	enum HDWeaponFlagsets{
		WRF_ALL=WRF_ALLOWRELOAD|WRF_ALLOWZOOM|WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4,
		WRF_NONE=WRF_NOFIRE|WRF_DISABLESWITCH,
		BT_ALTFIRE=BT_ALTATTACK,
		BT_ALTRELOAD=BT_USER1,
		BT_FIREMODE=BT_USER2,
		BT_UNLOAD=BT_USER4,
	}
	default{
		+solid
		+weapon.ammo_optional +weapon.alt_ammo_optional +weapon.noalert +weapon.noautoaim
		+weapon.no_auto_switch
		+noblockmonst +notrigger +dontgib
		weapon.ammogive 0;weapon.ammogive2 0;
		weapon.ammouse1 0;weapon.ammouse2 0;
		weapon.bobstyle "Alpha";
		inventory.pickupsound "misc/w_pkup";
		radius 12;height 12;

		weapon.bobspeed 2.4;
		weapon.bobrangex 0.2;
		weapon.bobrangey 0.8;
		hdweapon.barrelsize 0,0,0;
		hdweapon.refid "";
		hdweapon.nicename "";
		hdweapon.dontfistondrop false;
		hdweapon.fitsinbackpack false;
	}
	override bool getnoteleportfreeze(){return true;}
	override bool cancollidewith(actor other,bool passive){return HDPickerUpper(other);}
	//wrapper for setpsprite
	action void SetWeaponState(statelabel st,int layer=PSP_WEAPON){
		if(player)player.setpsprite(layer,invoker.findstate(st));
	}
	//use target to help a dropped weapon remember its immediately prior owner
	override void detachfromowner(){
		if(!dontfistondrop&&owner.player&&!owner.player.readyweapon)owner.A_SelectWeapon("HDFist");
		angle=owner.angle;pitch=owner.pitch;
		target=owner;
		super.detachfromowner();
	}
	//wrapper for HDMath.MaxInv because we're gonna need this a lot
	action int AmmoCap(class<inventory> inv){
		return HDMath.MaxInv(self,inv);
	}
	//wrapper for checking if gun is braced
	action bool gunbraced(){
		return hdplayerpawn(self)&&hdplayerpawn(self).gunbraced;
	}
	//use this to set flash translucency and make it additive
	action void HDFlashAlpha(int variance=0,bool noalpha=false,int layer=PSP_FLASH){
		A_OverlayFlags(layer,PSPF_ALPHA|PSPF_ADDBOB|PSPF_RENDERSTYLE,true);
		A_OverlayRenderstyle(layer,STYLE_Add);
		double fa;
		if(noalpha){
			A_OverlayAlpha(layer,1.);
		}else{
			int lg=cursector.lightlevel-variance*frandom(0.6,1.);
			fa=1.-(lg*0.003);
			A_OverlayAlpha(layer,fa);
		}
		if(noalpha||fa>0.1)setstatelabel("melee");
	}
	//wrapper for HDWeapon and ActionItem
	//remember: LEFT and DOWN
	action void A_MuzzleClimb(
		double mc10=0,double mc11=0,
		double mc20=0,double mc21=0,
		double mc30=0,double mc31=0,
		double mc40=0,double mc41=0,
		bool wepdot=true
	){
		let hdp=HDPlayerPawn(self);
		if(hdp){
			hdp.A_MuzzleClimb((mc10,mc11),(mc20,mc21),(mc30,mc31),(mc40,mc41),wepdot);
		}else{ //I don't even know why
			vector2 mc0=(mc10,mc11)+(mc20,mc21)+(mc30,mc31)+(mc40,mc41);
			A_SetPitch(pitch+mc0.y,SPF_INTERPOLATE);
			A_SetAngle(angle+mc0.x,SPF_INTERPOLATE);
		}
	}
	//do these whenever the gun is ready
	action void A_ReadyEnd(){
		A_TakeInventory("WeaponBusy");
		if(invoker.msgtimer>0){
			invoker.msgtimer--;
			if(invoker.msgtimer<1)invoker.wepmsg="";
		}
		let p=HDPlayerPawn(self);
		if(!p)return;
		p.mousehijacked=false;
		if(
			player&&
			p&&!p.beatcount&&p.zerk>900
			&&!random(0,(invoker is "HDFist")?20:100)
		)player.cmd.buttons|=BT_ATTACK;
	}

	//activate a laser rangefinder
	//because every gun should have one of these
	action void FindRange(){
		eventhandler.sendnetworkevent("hd_findrange",0,0,0);
	}

	//stops turning input
	action void HijackMouse(){
		let ppp=hdplayerpawn(self);if(ppp)ppp.mousehijacked=true;
		else player.cmd.pitch=0;player.cmd.yaw=0;
	}

	//zoom adjuster for rifles
	action void A_ZoomAdjust(int slot,int minzoom,int maxzoom,int secondbutton=BT_USER2){
		if(!PressingZoom()){
			setweaponstate("nope");
			return;
		}
		if(!(player.cmd.buttons&secondbutton)){
			A_WeaponReady(WRF_ALL);
			return;
		}
		int inputamt=player.cmd.pitch>>5;
		inputamt+=(justpressed(BT_ATTACK)?1:justpressed(BT_ALTATTACK)?-1:0);
		HijackMouse();
		invoker.weaponstatus[slot]=clamp(
			invoker.weaponstatus[slot]-inputamt,minzoom,maxzoom
		);
		A_WeaponReady(WRF_NOFIRE);
	}

	//determine mass for weapon inertia purposes
	virtual double gunmass(){return 0;}
	//determine bulk for weapon encumbrance purposes
	virtual double weaponbulk(){return 0;}
	//for consolidating stuff between maps
	virtual void Consolidate(){}

	//what to do when hitting the "drop one unit of ammo" key
	virtual void DropOneAmmo(int amt=1){}

	//for smoking barrels
	void drainheat(int ref,int smklength=18){
		bool frozen=globalfreeze||level.Frozen;
		if(frozen&&(!owner||!owner.player))return;
		if(weaponstatus[ref]>0){
			weaponstatus[ref]--;
			if(frozen||random(1,10)>weaponstatus[ref])return;
			vector3 smkpos=pos;
			vector3 smkvel=vel;
			double smkang=angle;
			if(owner){
				smkpos=owner.pos;
				if(owner.player && owner.player.readyweapon==self){
					//spawn smoke from muzzle
					smkang=owner.angle;
					smkpos.z+=owner.height-9-sin(owner.pitch)*smklength;
					smkpos.xy+=cos(owner.pitch)*smklength*(cos(smkang),sin(smkang));
				}else{
					//spawn smoke from behind owner
					smkang=owner.angle;
					smkpos.z+=owner.height*0.6;
					smkpos.xy-=10*(cos(smkang),sin(smkang));
				}
				smkvel=owner.vel;
			}
			actor a=spawn("HDGunsmoke",smkpos,ALLOW_REPLACE);
			smkvel*=0.4;
			a.angle=smkang;a.vel+=smkvel;
			a.A_ChangeVelocity(3,0,0,CVF_RELATIVE);
			for(int i=30;i<weaponstatus[ref];i+=30){
				if(!random(0,3)){
					a=spawn("HDGunsmoke",smkpos,ALLOW_REPLACE);
					a.angle=smkang;a.vel+=smkvel;
					a.A_ChangeVelocity(3,frandom(-2,2),frandom(-2,2),CVF_RELATIVE);
				}
			}
		}
	}
	virtual ui void DrawHUDStuff(HDStatusBar sb,HDWeapon wp,HDPlayerPawn hpl){}
	virtual ui void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hcp,
		string whichdot="redpxl"
	){}
	void ShowTip(bool forced=false){
		if(
			forced||(
				tipped<3&&
				owner&&owner.player&&
				cvar.getcvar("hd_helptext",owner.player).getint()>1
			)
		){
			owner.ACS_NamedExecuteAlways("TipMessage",0,-1,selectionorder);
			if(!forced)tipped++;
		}
	}
	//that said, why get picky when you can just shoot twice?
	action void A_MagManager(name type){
		A_SetInventory("MagManager",1);
		let mmm=MagManager(findinventory("MagManager"));
		mmm.thismag=hdmagammo(findinventory(type));mmm.thismagtype=type;
		UseInventory(mmm);
	}

	//for picking up
	override void touch(actor toucher){}
	virtual void actualpickup(actor other){
		if(other.countinv(getclassname())){
			angle=other.angle-70;
			failedpickupunload();
			return;
		}
		other.A_Log(string.format("\cg%s",pickupmessage()),true);
		other.A_PlaySound(pickupsound,CHAN_AUTO);
		attachtoowner(other);
		tipped=0;
	}

	//when you have the same gun, just strip the new one
	virtual void failedpickupunload(){}
	void failedpickupunloadmag(int magslot,class<hdmagammo> type){
		if(weaponstatus[magslot]<0)return;
		A_PlaySound("weapons/rifleclick2",CHAN_WEAPON);
		A_PlaySound("weapons/rifleload",5);
		HDMagAmmo.SpawnMag(self,type,weaponstatus[magslot]);
		weaponstatus[magslot]=-1;
		setstatelabel("spawn");
	}

	//because weapons don't use proper "ammo" anymore for loaded items
	virtual void InitializeWepStats(bool idfa=false){}
	override void beginplay(){
		for(int i=0;i<8;i++)weaponstatus[i]=0;
		msgtimer=0;wepmsg="";
		initializewepstats();
		bobrangex*=3;bobrangey*=3;
		super.beginplay();
	}
	override void postbeginplay(){
		super.postbeginplay();
		bno_auto_switch=false;
	}
	//because A_Print doesn't cut it
	action void A_WeaponMessage(string msg,int time=100){
		invoker.wepmsg=msg;
		invoker.msgtimer=abs(time);
		if(time<0)A_Log(msg,true);
	}
	//because I'm too lazy to retype all that shit
	action bool PressingFire(){return player.cmd.buttons&BT_ATTACK;}
	action bool PressingAltfire(){return player.cmd.buttons&BT_ALTATTACK;}
	action bool PressingReload(){return player.cmd.buttons&BT_RELOAD;}
	action bool PressingZoom(){return player.cmd.buttons&BT_ZOOM;}
	action bool PressingAltReload(){return player.cmd.buttons&BT_USER1;}
	action bool PressingFiremode(){return player.cmd.buttons&BT_USER2;}
	action bool PressingUser3(){return player.cmd.buttons&BT_USER3;}
	action bool PressingUnload(){return player.cmd.buttons&BT_USER4;}
	action bool PressingUse(){return player.cmd.buttons&BT_USE;}
	action bool Pressing(int whichbuttons){return player.cmd.buttons&whichbuttons;}
	action bool JustPressed(int whichbutton){return(
		player.cmd.buttons&whichbutton&&!(player.oldbuttons&whichbutton)
	);}
	action bool JustReleased(int whichbutton){return(
		!(player.cmd.buttons&whichbutton)&&player.oldbuttons&whichbutton
	);}
	action void A_StartDeselect(bool gotodzero=true){
		A_SetInventory("WeaponBusy",1);
		A_SetCrosshair(21);
		invoker.wepmsg="";invoker.msgtimer=0;
		if(gotodzero)setweaponstate("deselect0");
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	select:
		TNT1 A 0{
			//these two don't actually work???
			A_OverlayFlags(PSP_WEAPON,PSPF_CVARFAST|PSPF_POWDOUBLE,false);
			A_OverlayFlags(PSP_FLASH,PSPF_CVARFAST|PSPF_POWDOUBLE,false);

			A_SetInventory("WeaponBusy",1);
			A_SetCrosshair(21);

			if(!countinv("NulledWeapon"))invoker.ShowTip();

			return resolvestate("select0");
		}
	select0:
		---- A 0 A_Raise();
		wait;
	deselect:
		TNT1 A 0 A_StartDeselect();
	deselect0:
		---- A 0 A_Lower();
		wait;

	select0big:
		---- A 2 A_JumpIfInventory("NulledWeapon",1,"select1big");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(11);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(0);
		wait;
	deselect0big:
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1big");
		---- A 1 A_Lower(-2);
		---- A 1 A_Lower(0);
		---- AA 1 A_Lower(2);
		---- A 1 A_Lower(3);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower();
		wait;
	deselect1big:
		---- AA 1 A_Lower(-2);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;
	select1big:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(35);
		---- A 1 A_Raise(24);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(0);
		wait;
	select0small:
		---- A 1 A_JumpIfInventory("NulledWeapon",1,"select1small");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(10);
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(12);
		---- A 1 A_Raise(6);
		---- A 1 A_WeaponOffset(0,-2,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;
	deselect0small:
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1small");
		---- A 1 A_Lower(-1);
		---- AA 1 A_Lower(2);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower(36);
		---- A 1 A_Lower();
		wait;
	deselect1small:
		---- A 1 A_Lower(-3);
		---- A 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower(36);
		wait;
	select1small:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(16);
		---- A 1 A_Raise(12);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;
	select0bfg:
		---- A 3 A_JumpIfInventory("NulledWeapon",1,"select1bfg");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise();
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		---- A 1 A_Raise(12);
		---- AAA 1 A_Raise();
		---- A 1 A_Raise(-2);
		---- AA 1 A_Raise(-1);
		---- AA 1 {
			A_MuzzleClimb(0.3,0.8);
			A_Raise(-1);
		}
		---- AA 1 A_MuzzleClimb(-0.1,-0.4);
		---- AA 1 A_Raise();
		---- A 1 A_Raise();
		---- A 1 A_Raise(12);
		---- A 1 A_Raise(12);
		wait;
	deselect0bfg:
		---- A 0 A_JumpIfHealthLower(1,"deselect1big");
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1bfg");
		---- AA 1 A_Lower(-1);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(-2);
		---- AA 1 A_Lower(-1);
		---- AA 1{
			A_MuzzleClimb(0.3,0.8);
			A_Lower(-1);
		}
		---- AA 1{
			A_MuzzleClimb(-0.1,-0.4);
			A_Lower(2);
		}
		---- AAAA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		wait;
	deselect1bfg:
		---- AA 1 A_Lower(-2);
		---- A 1 A_Lower(0);
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		wait;
	select1bfg:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(16);
		---- A 1 A_Raise(12);
		---- A 1{
			A_WeaponOffset(0,-6,WOF_ADD);
			A_MuzzleClimb(-0.1,-1.);
		}
		---- AA 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;

	ready:
		TNT1 A 1 A_WeaponReady(WRF_ALL);
	readyend:
		---- A 0 A_ReadyEnd();
		---- A 0 A_Jump(256,"ready");
	user1:
		---- A 0 A_Jump(256,"altreload");
	user2:
		---- A 0 A_Jump(256,"firemode");
	user3:
		---- A 0 A_MagManager("HDBattery");
		goto readyend;
	user4:
		---- A 0 A_Jump(256,"unload");
	fire:
	altfire:
	hold:
	althold:
	reload:
	altreload:
	firemode:
	unload:
	nope:
		---- A 1{
			A_ClearRefire();
			A_WeaponReady(WRF_NOFIRE);
		}
		---- A 0{
			int inp=getplayerinput(MODINPUT_BUTTONS);
			if(
				inp&BT_ATTACK||
				inp&BT_ALTATTACK||
				inp&BT_RELOAD||
//				inp&BT_ZOOM||
				inp&BT_USER1||
				inp&BT_USER2||
				inp&BT_USER3||
				inp&BT_USER4
			)setweaponstate("nope");
		}
		---- A 0 A_Jump(256,"ready");
	}
}



// Null weapon for lowering weapon
class NulledWeapon:InventoryFlag{}
class NullWeapon:HDWeapon{
	default{
		+weapon.wimpy_weapon
		+weapon.cheatnotweapon
		+nointeraction
		+weapon.noalert
		+inventory.untossable

		//this needs to be longer than any "real" weapon to ensure there is enough space to raise
		hdweapon.barrelsize 40,1,1;
	}
	override inventory CreateTossable(int amount){
		let onr=hdplayerpawn(owner);
		if(onr){
			if(onr.lastweapon)onr.DropInventory(onr.lastweapon);
		}
		return null;
	}
	override double gunmass(){
		return 12;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	select:
		TNT1 A 0{
			A_TakeInventory("PowerFrightener");
			A_SetInventory("NulledWeapon",1);
			A_SetCrosshair(21);
		}
		TNT1 A 0 A_Raise();
		wait;
	deselect:
		TNT1 A 0 A_SetCrosshair(21);
		TNT1 A 0 A_Lower();
		wait;
	ready:
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		TNT1 A 0 A_TakeInventory("WeaponBusy");
		loop;
	fire:
		TNT1 A 1;
		goto ready;
	}
}





extend class HDPlayerPawn{
	override void FireWeaponAlt(state stat){
		super.fireweaponalt(stat);
		player.weaponstate|=WF_WEAPONBOBBING;
	}
	override void FireWeapon(state stat){
		super.fireweapon(stat);
		player.weaponstate|=WF_WEAPONBOBBING;
	}
}


