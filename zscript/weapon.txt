// ------------------------------------------------------------
//   Prototype weapon
// ------------------------------------------------------------

class HDWeapon:Weapon{
	double gunmass;
	int barrellength;
	int barrelwidth;
	int barreldepth;
	hdplayerpawn onr;
	property GunDimensions: gunmass,barrellength,barrelwidth,barreldepth;
	default{
		+weapon.ammo_optional +weapon.alt_ammo_optional +weapon.noalert +weapon.noautoaim
		weapon.AmmoGive 0;weapon.AmmoGive2 0;
		weapon.ammouse1 0;weapon.ammouse2 0;
		weapon.bobstyle "Alpha";
		inventory.pickupsound "misc/w_pkup";
		radius 20;height 16;

		weapon.bobspeed 2.4;
		weapon.bobrangex 0.2;
		weapon.bobrangey 0.8;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
	select:
		TNT1 A 0{
				//these two don't actually work???
			A_OverlayFlags(PSP_WEAPON,PSPF_CVARFAST|PSPF_POWDOUBLE,false);
			A_OverlayFlags(PSP_FLASH,PSPF_CVARFAST|PSPF_POWDOUBLE,false);

			A_TakeInventory("IsZoomed");
			A_TakeInventory("IsWeaponShort");
			A_TakeInventory("IsWeaponLong");
			A_TakeInventory("IsWeaponWide");
			A_TakeInventory("IsWeaponBFG");
			A_TakeInventory("IsWeaponReady");
			A_GiveInventory("WeaponBusy");
			A_SetCrosshair(21);

			invoker.onr=HDPlayerPawn(self);

			return resolvestate("select0");
		}
	select0:
		---- A 0 A_Raise();
		wait;
	deselect:
		TNT1 A 0{
			A_TakeInventory("IsWeaponShort");
			A_TakeInventory("IsWeaponLong");
			A_TakeInventory("IsWeaponWide");
			A_TakeInventory("IsWeaponBFG");
			A_TakeInventory("IsWeaponPistol");
			A_TakeInventory("IsWeaponReady");
			A_GiveInventory("WeaponBusy");
			A_TakeInventory("IsKicking");
			A_SetCrosshair(21);
			return resolvestate("deselect0");
		}
	deselect0:
		---- A 0 A_Lower();
		wait;

	select0big:
		---- A 2 A_JumpIfInventory("NulledWeapon",1,"select1big");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(11);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(0);
		wait;
	deselect0big:
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1big");
		---- A 1 A_Lower(-2);
		---- A 1 A_Lower(0);
		---- AA 1 A_Lower(2);
		---- A 1 A_Lower(3);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower();
		wait;
	deselect1big:
		---- AA 1 A_Lower(-2);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;
	select1big:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(35);
		---- A 1 A_Raise(24);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(0);
		wait;
	select0small:
		---- A 1 A_JumpIfInventory("NulledWeapon",1,"select1small");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(10);
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(12);
		---- A 1 A_Raise(6);
		---- A 1 A_WeaponOffset(0,-2,WOF_ADD);
		---- A 1 A_WeaponOffset(0,1,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;
	deselect0small:
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1small");
		---- A 1 A_Lower(-1);
		---- AA 1 A_Lower(2);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower(36);
		---- A 1 A_Lower();
		wait;
	deselect1small:
		---- A 1 A_Lower(-3);
		---- A 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		---- A 1 A_Lower(36);
		wait;
	select1small:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(16);
		---- A 1 A_Raise(12);
		---- A 1 A_WeaponOffset(0,-4,WOF_ADD);
		---- A 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;
	select0bfg:
		---- A 3 A_JumpIfInventory("NulledWeapon",1,"select1bfg");
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise();
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		---- A 1 A_Raise(12);
		---- AAA 1 A_Raise();
		---- A 1 A_Raise(-2);
		---- AA 1 A_Raise(-1);
		---- AA 1 {
			ACS_NamedExecuteAlways("MuzzleClimb",0,-8,-3);
			A_Raise(-1);
		}
		---- AA 1 ACS_NamedExecuteAlways("MuzzleClimb",0,4,1);
		---- AA 1 A_Raise();
		---- A 1 A_Raise();
		---- A 1 A_Raise(12);
		---- A 1 A_Raise(12);
		wait;
	deselect0bfg:
		---- A 0 A_JumpIfHealthLower(1,"deselect1big");
		---- A 0 A_JumpIfInventory("NulledWeapon",1,"deselect1bfg");
		---- AA 1 A_Lower(-1);
		---- AA 1 A_Lower();
		---- A 1 A_Lower(-2);
		---- AA 1 A_Lower(-1);
		---- AA 1{
			ACS_NamedExecuteAlways("MuzzleClimb",0,-8,-3);
			A_Lower(-1);
		}
		---- AA 1{
			ACS_NamedExecuteAlways("MuzzleClimb",0,4,1);
			A_Lower(2);
		}
		---- AAAA 1 A_Lower();
		---- A 1 A_Lower(12);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		wait;
	deselect1bfg:
		---- AA 1 A_Lower(-2);
		---- A 1 A_Lower(0);
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		wait;
	select1bfg:
		---- A 0 A_TakeInventory("NulledWeapon");
		---- A 1 A_Raise(36);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(16);
		---- A 1 A_Raise(12);
		---- A 1{
			A_WeaponOffset(0,-6,WOF_ADD);
			ACS_NamedExecuteAlways("MuzzleClimb",0,10,1);
		}
		---- AA 1 A_WeaponOffset(0,2,WOF_ADD);
		---- A 1 A_Raise(1);
		wait;

	ready:
		TNT1 A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM|WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4);
	readyend:
		---- A 0 {
			A_TakeInventory("WeaponBusy");
			A_TakeInventory("JustUnloading");
		}
		---- A 0 A_Jump(256,"ready");
	fire:
	altfire:
	hold:
	althold:
	reload:
	zoom:
	user1:
		---- A 0 A_Jump(256,"altreload");
	user2:
		---- A 0 A_Jump(256,"firemode");
	user3:
	user4:
		---- A 0 A_Jump(256,"unload");
	altreload:
	firemode:
	unload:
	nope:
		---- A 1 A_WeaponReady(WRF_NOFIRE);
		---- A 0{
			A_Refire("nope");
			int inp=getplayerinput(MODINPUT_BUTTONS);
			if(
				inp&BT_ATTACK||
				inp&BT_ALTATTACK||
				inp&BT_RELOAD||
				inp&BT_ZOOM||
				inp&BT_USER1||
				inp&BT_USER2||
				inp&BT_USER3||
				inp&BT_USER4
			)return resolvestate("nope");
			return resolvestate(null);
		}
		---- A 0 A_Jump(256,"ready");
	}
}