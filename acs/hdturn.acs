
script "CheckFloorLiquid"(void){
	if ((
	(CheckActorFloorTexture(0,"MFLR8_4"))
	||(CheckActorFloorTexture(0,"MFLR8_2"))
	||(CheckActorFloorTexture(0,"SFLR6_1"))||(CheckActorFloorTexture(0,"SFLR6_4"))||(CheckActorFloorTexture(0,"SFLR7_1"))||(CheckActorFloorTexture(0,"SFLR7_4"))
	||(CheckActorFloorTexture(0,"FWATER1"))||(CheckActorFloorTexture(0,"FWATER2"))||(CheckActorFloorTexture(0,"FWATER3"))||(CheckActorFloorTexture(0,"FWATER4"))
	||(CheckActorFloorTexture(0,"BLOOD1"))||(CheckActorFloorTexture(0,"BLOOD2"))||(CheckActorFloorTexture(0,"BLOOD3"))
	||(CheckActorFloorTexture(0,"SLIME1"))||(CheckActorFloorTexture(0,"SLIME1"))||(CheckActorFloorTexture(0,"SLIME2"))||(CheckActorFloorTexture(0,"SLIME3"))||(CheckActorFloorTexture(0,"SLIME4"))||(CheckActorFloorTexture(0,"SLIME5"))||(CheckActorFloorTexture(0,"SLIME6"))||(CheckActorFloorTexture(0,"SLIME7"))||(CheckActorFloorTexture(0,"SLIME8"))
	)&&(CheckInventory("IsMoving")>4)&&(random(1,(100-15*CheckInventory("IsCrouching")))==1)&&(CheckInventory("HDFireEnder")<1))
	{
		setresultvalue(1);
	}
}


function void TurnCheck(int op,int oa,int np,int na,int ox,int oy,int sm,int osm)
{

	int maxturn=3000;

	//tracks which weapon you have out
	if (!CheckWeapon("NullWeapon"))
	{
		int num=0;int den=0;
		switch(weapon[PlayerNumber()])
		{
		case 101:
			maxturn=2200-CheckInventory("LiberatorGrenadeChamber")*200;
			num=3+CheckInventory("LiberatorGrenadeChamber");den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			num++;den++;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 100:
			maxturn=2400;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*3/4;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*3/4; break;
		case 23:
			maxturn=2200-CheckInventory("ZM66GLoaded")*200;
			num=2+CheckInventory("ZM66GLoaded");den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			num++;den++;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 41:
			num=2;den=3;
			if(CheckInventory("HDSMGNoMag")>0) maxturn=2450;
			else{
				maxturn=2300-CheckInventory("HDSMGLoaded")*10;
				num++;den++;
			}
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			num++;den++;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 22:
		case 21:
			maxturn=2450;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*2/3;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*2/3; break;
		case 30:
			maxturn=(24-CheckInventory("ShotgunTube")/2)*100;
			num=4+CheckInventory("ShotgunTube")/3;den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 102:
			maxturn=2000;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*4/5;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*4/5; break;
		case 52:
			maxturn=2600-CheckInventory("BloopChamber")*200;
			num=1+CheckInventory("BloopChamber");den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 31:
			maxturn=2500;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*2/3;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*2/3; break;
		case 90:
			maxturn=2450-CheckInventory("BrontornisMag")*100;
			num=2+CheckInventory("BrontornisMag");den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 40:
			int vc=0;
			if(CheckInventory("VulcJuice")+CheckInventory("VulcEmptyCell")>0) vc=1;
			num=4+vc+(
				CheckInventory("VulcLoaded1")+CheckInventory("VulcMag1")
				+CheckInventory("VulcLoaded2")+CheckInventory("VulcMag2")
				+CheckInventory("VulcLoaded3")+CheckInventory("VulcMag3")
				+CheckInventory("VulcLoaded4")+CheckInventory("VulcMag4")
				+CheckInventory("VulcLoaded5")+CheckInventory("VulcMag5")
				)/56;
			den=num+1;
			maxturn=(23-num)*100;
			if (CheckInventory("IsSupported")) {
			} else {
				maxturn-=100;
				num+=5;den+=5;
			}
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 51:
			int rk=CheckInventory("RocketMag")+CheckInventory("HEATLoaded")*2;
			maxturn=(21-rk/2)*100;
			num=4+rk/3;den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 60:
			int plc=0;
			if(CheckInventory("PlasmaBattery")+CheckInventory("PlasmaEmptyCell")>0) plc=1;
			maxturn=2000-plc*100;
			num=3+plc;den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 70:
			maxturn=1900-CheckInventory("BFGLoaded")*100;
			num=5+CheckInventory("BFGLoaded");den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		case 11:
			int lc=0;
			if(CheckInventory("LumberCell")+CheckInventory("LumberEmptyCell")>0) lc=1;
			maxturn=1950-lc*100;
			num=4+lc;den=num+1;
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*num/den;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*num/den; break;
		default:
			turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*1/3;
			turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*1/3; break;
		}
		if (CheckInventory("IsCrouching")) maxturn=maxturn/3;
		if (CheckInventory("PowerStrength")) maxturn=maxturn<<2;
		if (CheckInventory("StunCount")) maxturn=maxturn>>2;
	}
	else //this is for when the NullWeapon is out and you need turning inertia
	{
		turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]*1/3;
		turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]*1/3;
	}


	//crouch movement check
	if ((GetPlayerInput(-1,MODINPUT_BUTTONS)&BT_CROUCH)!=(GetPlayerInput(-1,MODINPUT_OLDBUTTONS)&BT_CROUCH))
	{
		TakeInventory("IsSupported",999);
		GiveInventory("IsMoving",4);
		GiveInventory("Fatigue",4);
		standingangle[PlayerNumber()]=GetActorAngle(0);
		if(GetPlayerInput(-1,MODINPUT_BUTTONS)&BT_CROUCH)
			turnpitchmomentum[PlayerNumber()]-=100;
			else turnpitchmomentum[PlayerNumber()]+=100;
	}

	//weapon laaaaag
	if(
		(sm!=osm)
		&&(!CheckWeapon("NullWeapon"))
		&&(!CheckWeapon("Ring"))
	)turnanglemomentum[PlayerNumber()]+=(sm-osm)/100;//+50*CheckInventory("IsCrouching");

	int anglechangesign=0;	//figure out which way you're turning
		if ((na>oa)&&(na-oa<32768)) anglechangesign=1;
		else if (oa-na>32768) anglechangesign=1;
		else anglechangesign=-1;

	//cap your change of angle
	int anglechange=abs(na-oa);
	if (anglechange>32768) anglechange=65536-anglechange; //to avoid glitches when facing east
	if (CheckInventory("PowerStrength")) anglechange=anglechange*3;
	if ((CheckInventory("Fatigue")>20)||(CheckInventory("Health")<40)) anglechange=anglechange*3/random(1,7);

	if (anglechange>600) TakeInventory("IsSupported",999);
	if ((CheckInventory("IsSupported"))&&(anglechange<100)) //if braced, reduce sensitivity
	{
		na=oa+anglechangesign*anglechange/3;
	}
	else if (abs(anglechange)>maxturn)
	{
		if (anglechangesign*turnanglemomentum[PlayerNumber()]>0)
		na=oa+maxturn*anglechangesign;
		else na=oa+maxturn*anglechangesign/3;
		TakeInventory("IsSupported",999);
		GiveInventory("IsMoving",2);
	}
	if (abs(anglechange)>300)
	{
		int inertiamod=(8000-maxturn)/100;
		if (((anglechangesign>0)&&(turnanglemomentum[PlayerNumber()]<0))
		|| ((anglechangesign<0)&&(turnanglemomentum[PlayerNumber()]>0)))
		inertiamod=inertiamod/2;
		turnanglemomentum[PlayerNumber()]=turnanglemomentum[PlayerNumber()]+inertiamod*anglechangesign;
	}
	if (standingangle[PlayerNumber()]>65535) standingangle[PlayerNumber()]-=65535;
	if ((abs(na-standingangle[PlayerNumber()])>maxturn<<2) && (abs(na-standingangle[PlayerNumber()])<60000))
	{
		if (!CheckInventory("IsTurning"))
		{
			if(CheckInventory("Health")>0)SetActorState(0,"See");
			if(GetActorZ(0)<=GetActorFloorZ(0)+4)
			{
				int angle=GetActorAngle(0)-0.2*anglechangesign;
				SetActorVelocity(0,cos(angle),sin(angle),0,true,true);
			}
		}
		GiveInventory("IsTurning",1);
		GiveInventory("IsMoving",2);
		if ((random(1,24)==1) && (CheckInventory("HDFireEnder")<1)) GiveInventory("HDFireEnder",1);
			else TakeInventory("HDFireEnder",1);
		standingangle[PlayerNumber()]=na;
	}

	na=na+turnanglemomentum[PlayerNumber()];
	if ((abs(ox-GetActorX(0))<100.0)&&(abs(oy-GetActorY(0))<100.0)) {ChangeActorAngle(0,na,1);}


	//cap your change of pitch
	int pitchchangesign=0;	//figure out which way you're turning
		if ((np>op)&&(np-op<32768)) pitchchangesign=1;
		else if (op-np>32768) pitchchangesign=1;
		else pitchchangesign=-1;
	int pitchchange=abs(np-op);
	if (CheckInventory("PowerStrength")) pitchchange=pitchchange*3;
	if ((CheckInventory("Fatigue")>20)||(CheckInventory("Health")<40)) pitchchange=pitchchange*3/random(1,7);

	if (pitchchange>600) TakeInventory("IsSupported",999);
	if ((CheckInventory("IsSupported"))&&(pitchchange<100)) //if braced, reduce sensitivity
	{
		np=op+pitchchangesign*pitchchange/3;
	}
	else if (pitchchange>maxturn)
	{
		if (pitchchangesign*turnpitchmomentum[PlayerNumber()]>0)
		np=op+maxturn*pitchchangesign;
		else np=op+maxturn*pitchchangesign/3;
	}
	if (pitchchange>300)
	{
		inertiamod=(8000-maxturn)/50;
		if (((pitchchangesign>0)&&(turnpitchmomentum[PlayerNumber()]<0))
		|| ((pitchchangesign<0)&&(turnpitchmomentum[PlayerNumber()]>0)))
		inertiamod=inertiamod/2;
		turnpitchmomentum[PlayerNumber()]=turnpitchmomentum[PlayerNumber()]+inertiamod*pitchchangesign;
	}
	np=np+turnpitchmomentum[PlayerNumber()];
	ChangeActorpitch(0,np,1);



	//notwithstanding the above, prevent turning if muzzle in the way
	GiveInventory("MuzzleBlockShoot",1);	//this triggers the actual code
	if
		(((lastpitch[PlayerNumber()]<GetActorPitch(0)) && (CheckInventory("CantTurnDown"))) ||
		((lastpitch[PlayerNumber()]>GetActorPitch(0)) && (CheckInventory("CantTurnUp"))))
		{
		SetActorPitch(0,lastpitch[PlayerNumber()]);
		GiveInventory("IsSupported",1);
		}
	if
		(((lastangle[PlayerNumber()]>GetActorAngle(0)) && (CheckInventory("CantTurnRight"))) ||
		((lastangle[PlayerNumber()]<GetActorAngle(0)) && (CheckInventory("CantTurnLeft"))))
		{
		SetActorAngle(0,lastangle[PlayerNumber()]);
		GiveInventory("IsSupported",1);
		}
	if (
		( (CheckInventory("CantTurnLeft")) && (CheckInventory("CantTurnRight")) ) ||
		( (CheckInventory("CantTurnUp")) && (CheckInventory("CantTurnDown")) )
	)
	{
		GiveInventory("MuzzleBackUp",1);
		TakeInventory("IsWeaponReady",999);
		TakeInventory("IsSupported",999);
		if ((!CheckInventory("IsTurning"))&&(CheckInventory("Health")>0)) SetActorState(0,"See");
		GiveInventory("IsTurning",1);	//am too lazy to define new, will likely regret later :V
	}

	if ((sm<0) && (CheckInventory("CantTurnLeft")>0))
	{
		SetActorAngle(0,GetActorAngle(0)-800);
	}
	if ((sm>0) && (CheckInventory("CantTurnRight")>0))
	{
		SetActorAngle(0,GetActorAngle(0)+800);
	}
	lastpitch[PlayerNumber()]=GetActorPitch(0);
	lastangle[PlayerNumber()]=GetActorAngle(0);




		//put out fires with (non-flammable) liquids, sand, or snakes
	if ((
	(CheckActorFloorTexture(0,"MFLR8_4"))
	||(CheckActorFloorTexture(0,"MFLR8_2"))
	||(CheckActorFloorTexture(0,"SFLR6_1"))||(CheckActorFloorTexture(0,"SFLR6_4"))||(CheckActorFloorTexture(0,"SFLR7_1"))||(CheckActorFloorTexture(0,"SFLR7_4"))
	||(CheckActorFloorTexture(0,"FWATER1"))||(CheckActorFloorTexture(0,"FWATER2"))||(CheckActorFloorTexture(0,"FWATER3"))||(CheckActorFloorTexture(0,"FWATER4"))
	||(CheckActorFloorTexture(0,"BLOOD1"))||(CheckActorFloorTexture(0,"BLOOD2"))||(CheckActorFloorTexture(0,"BLOOD3"))
	||(CheckActorFloorTexture(0,"SLIME1"))||(CheckActorFloorTexture(0,"SLIME1"))||(CheckActorFloorTexture(0,"SLIME2"))||(CheckActorFloorTexture(0,"SLIME3"))||(CheckActorFloorTexture(0,"SLIME4"))||(CheckActorFloorTexture(0,"SLIME5"))||(CheckActorFloorTexture(0,"SLIME6"))||(CheckActorFloorTexture(0,"SLIME7"))||(CheckActorFloorTexture(0,"SLIME8"))
	)&&(CheckInventory("IsMoving")>4)&&(random(1,(100-15*CheckInventory("IsCrouching")))==1)&&(CheckInventory("HDFireEnder")<1))
	{
		GiveInventory("HDFireEnder",1);
	}
}