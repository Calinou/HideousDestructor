
//input checks
function void CheckInput(int nb,int ob,int sm,int fm){
return;
	TakeInventory("IsSprinting",999);
	TakeInventory("IsCrouching",999);
	TakeInventory("PressingFire",999);
	TakeInventory("PressingAltfire",999);
	TakeInventory("PressingReload",999);
	TakeInventory("PressingZoom",999);
	TakeInventory("PressingFireMode",999);
	TakeInventory("PressingAltReload",999);
	TakeInventory("PressingUnload",999);
	fatcaps[PlayerNumber()]=maxsprintfatigue+CheckInventory("Health");
	fatcapr[PlayerNumber()]=maxrunfatigue+CheckInventory("Health")/2;
	if (nb & BT_ATTACK)GiveInventory("PressingFire",1);
	if (nb & BT_ALTATTACK)GiveInventory("PressingAltfire",1);
	if (nb & BT_RELOAD)GiveInventory("PressingReload",1);
	if (nb & BT_ZOOM)GiveInventory("PressingZoom",1);
	if (nb & BT_USER1)GiveInventory("PressingAltReload",1);
	if (nb & BT_USER2)GiveInventory("PressingFireMode",1);
//	if (nb & BT_USER3)GiveInventory("Pressing____",1);
	if (nb & BT_USER4)GiveInventory("PressingUnload",1);
	if ((nb & BT_ALTATTACK)||(nb & BT_RELOAD)||(nb & BT_ZOOM)||(nb & BT_USER1)||(nb & BT_USER2)||(nb & BT_USER3)||(nb & BT_USER4))
	{
		GiveInventory("WeaponBusy",1);
		TakeInventory("IsWeaponReady",1);
	}

	//give fatigue if overloaded
	if ((fm!=0)||(sm!=0)){
		if ((CheckInventory("Fatigue")<20+overloaded[PlayerNumber()]/1000)
		|| (random(1,120)==1)) GiveInventory("Fatigue",1);
		GiveInventory("IsMoving",1);
	}

	//sprint check
	if (nb & BT_SPEED){
		//snip - all done in acs now
	}else{
		if (CheckWeapon("NullWeapon")) SetWeapon(lastweapon[PlayerNumber()]);
		if ((ob & BT_SPEED)&&(CheckInventory("Fatigue")>60)) GiveInventory("WasSprinting",1);
	}

	//use check
	if (nb & BT_USE){
		GiveInventory("CanPickUpItems",1);
		GiveInventory("UseHud",1);
		if (!CheckInventory("IsCrouching")) GiveInventory("KickCheck",1);
	}else{
		GiveInventory("CantPickUpItems",1);
		TakeInventory("ZM66PickingUp",999);
		TakeInventory("LiberatorPickingUp",999);
	}

	//crouch check
	if ((GetActorProperty(0,APROP_Height)<=3000000)&&(CheckInventory("Health"))) GiveInventory("IsCrouching",1);


	//check if the player has dropped a weapon
	if(GetWeapon()=="HDWeapon"){SetWeapon("Ring");}//ACS_NamedExecuteAlways("CarryLimit",0,0,0);}

	//Lets bots use health items
	if (!PlayerIsBot(PlayerNumber())) return;
	else{
		for (int i=0; i<3; i++){
			int min = 100 - pickupadd[i];
			if (min < 50) min = 50;
			if ((CheckInventory(pickuptype[i])>0) && (CheckInventory("Health")+CheckInventory("RegenStims")+CheckInventory("RegenBers") < min) && (CheckInventory("NotShot") > 20)){
				UseInventory (pickuptype[i]);
			}
		}
		if(random(1,35)==1)ConsolidateWeapons();
		GiveInventory("CanPickUpItems",1);
	}
}


function int SpeedCheck(int nb,int ob,int sm,int fm){
	int spd=1.0;
	if (GetActorProperty(0,APROP_Waterlevel)>1) spd=0.6;
	if ((fm>0)&&(sm==0)) spd+=0.2;
	if (fm<0) spd=spd*2/3;
	if ((CheckInventory("Fatigue")>fatcapr[PlayerNumber()])||(CheckInventory("WoundCount"))) spd=spd-0.2;
	if (CheckInventory("WeaponBusy")>0) spd-=0.2;
	if ((CheckInventory("IsCrouching")>0)&&(CheckInventory("IsSprinting")<1)) spd=spd-0.1;
	if (CheckInventory("GreenArmourFlag")>0) spd=spd-0.03;
	if (CheckInventory("BlueArmourFlag")>0) spd=spd-0.05;
	if (CheckInventory("BlackArmourFlag")>0) spd=spd-0.06;
	if (CheckInventory("PowerIronFeet")>0){
		if (CheckInventory("PortableRadsuit")) spd=spd-0.2;
		else TakeInventory("PowerIronFeet",999);
	}
	if (CheckInventory("PowerLightAmpP")>0){ //for want of any better place to put this
		if (CheckInventory("PortableLiteAmp")<1) TakeInventory("PowerLightAmpP",999);
	}
	if ((CheckInventory("PowerStrength")>0)||(CheckInventory("Health")>100)) spd+=0.2;
	if (CheckInventory("StunCount")>0) if(spd>0.4) spd=0.4;

	if(CheckWeapon("Slayer")) spd-=0.03;
	if(CheckWeapon("Blooper")) spd-=0.03;
	if(CheckWeapon("Brontornis")) spd-=0.04;
	if(CheckWeapon("HDSMG")){
		if(CheckInventory("HDSMGNoMag")>0)spd-=0.04;  
		else spd-=0.04;
	}
	if(CheckWeapon("ZM66SemiRifle")) spd-=0.07;
	if(CheckWeapon("ZM66Rifle")) spd-=0.07;
	if(CheckWeapon("LiberatorRifle")) spd-=0.08;
	if(CheckWeapon("ZM66GrenadeRifle")) spd-=0.12;
	if(CheckWeapon("LiberatorGrenadeRifle")) spd-=0.13;
	if(CheckWeapon("Lumberjack")) spd-=0.14;
	if(CheckWeapon("Hunter")) spd-=0.14;
	if(CheckWeapon("BossRifle")) spd-=0.14;
	if(CheckWeapon("RocquetteLauncher")) spd-=0.16;
	if(CheckWeapon("ThunderBuster")) spd-=0.16;
	if(CheckWeapon("Vulcanette")) spd-=0.18;
	if(CheckWeapon("BFG9K")) spd-=0.18;


	//sprint
	if(
		((CheckWeapon("NullWeapon"))||(CheckWeapon("Ring"))||(CheckWeapon("HDFragGrenades")))
		&&(CheckInventory("IsSprinting")>0)
		&&(CheckInventory("StunCount")<1)
		&&((fm!=0)||(sm!=0))
	){
		if (CheckInventory("WasSprinting")<1){
			spd=spd*5/2;
		}
		if ((CheckInventory("IsCrouching")<1)&&(random(1,3)==1)) GiveInventory("Fatigue",1);
	}

	//add encumbrance
	spd-=overloaded[PlayerNumber()]>>5*32;

	//lower limit on reductions
	if (spd<0.1) spd=0.1;

	//walk if circumstances require it
	if(
		(CheckInventory("StunCount")>0)
		||(
			(CheckInventory("IsSprinting")<1)
			&&(abs(fm)<=6400)
			&&(abs(sm)<=6400)
		)
		||(StumbleCheck(fm,sm)<0)
	){
		int ws=0.35;
		if((fm>0)&&(sm==0))ws=0.45;
		GiveInventory("IsWalking",1);
		if(spd>ws)spd=ws;
	}
	else if(spd<=0.4) GiveInventory("IsWalking",1);
	else TakeInventory("IsWalking",1);

	//put it all together. NO adjustments below this!!!
	int gdccsux=speed[PlayerNumber()]; //if I don't do this GDCC (but not ACC) gives a pointer error
	if(spd!=gdccsux)
	{
		speed[PlayerNumber()]=spd;
		SetActorProperty(0,APROP_SPEED,spd);
//		log(i:spd);
	}
	return spd;
}


//acceleration damage
function void AccDamage(int xv,int yv,int zv)
{
	int vv = FixedMul(xv,xv)+FixedMul(yv,yv)+FixedMul(zv,zv);
	if ((vv>12000000)&&(!CheckInventory("PowerInvulnerable")))
	{
		vv=sqrt(vv);
		if (CheckWeapon("Ring")) vv=vv*6/10;
		else if ((CheckWeapon("NullWeapon"))||(CheckInventory("IsCrouching"))) vv=vv*8/10;
		if (CheckInventory("PowerStrength")) vv=vv/2;
		GiveInventory("Fatigue",vv/25);
		GiveInventory("IsMoving",vv/500);
		GiveInventory("StunCount",vv/100);
		Thing_Damage2(0,vv/400,"Falling");
		PlaySound(0,"weapons/smack",7,1.0,0,1.0);
		if ((vv>random(6600,8000))&&(!CheckWeapon("Ring"))) DropInventory(0,GetWeapon());
	}
}


//jump/mantling check
function void JumpCheck(int ob,int spd,int x,int y,int z,int fm,int ox,int oy,int sm,int nb){
	if(
		(CheckFlag(0,"NOGRAVITY"))||(GetActorProperty(0,APROP_Waterlevel)!=0)
		||(nb & BT_ATTACK)||(nb & BT_ALTATTACK)||(nb & BT_ZOOM)||(nb & BT_RELOAD)||(nb & BT_USER1)||(nb & BT_USER2)||(nb & BT_USER3)||(nb & BT_USER4)
	)return;

	GiveInventory("JumpAntennor",1);
	int spd2=8+CheckInventory("PowerStrength")*random(6,8);
	if ((abs(ox-x)+abs(oy-y)<2.0)&&(fm>=0)&&(sm==0)&&(CheckInventory("WeaponBusy")<1)){
		if (ob & BT_JUMP){
			if(
				//if godmode, just override health, etc. tests
				(CheckInventory("PowerInvulnerable")>0)
				||
				(
					//physically capable
					(CheckInventory("LethalDamage")+CheckInventory("AggravatedDamage")<30)
					&&
						//zerk or health
					(
						(CheckInventory("PowerStrength")>0)
						||
						(
							(CheckInventory("Health")>30)
							&&
							(CheckInventory("Fatigue")<120)
						)
					)
				)
				&&
				//hands free
				(
					(CheckWeapon("NullWeapon"))
					||
					(CheckWeapon("Ring"))
				)

				&&
				//not too encumbered
				(overloaded[PlayerNumber()]<random(9,15)*1000)
			)
			GiveInventory("Mantlantennor",1);
			else GiveInventory("MantlantennorLow",1);
		}
		//if not mantling, simple vertical jump
		if((CheckInventory("Fatigue")<=fatcapr[PlayerNumber()])&&(CheckInventory("CanJump")>0))
		{
			GiveInventory("Fatigue",10);
			ThrustThingZ(0,spd2*2,0,1);
			GiveInventory("IsJumping",1);
			GiveInventory("IsMoving",10);
			SetWeapon(DisableWeapon());
		}
	}
	//leap in direction indicated
	else if(
		(CheckInventory("Fatigue")<=fatcapr[PlayerNumber()])
		&&(CheckInventory("IsCrouching")<1) && (GetActorZ(0)-GetActorFloorZ(0)<=0)
	){
		if (ob & BT_JUMP) return;
		if ((fm>0)&&(CheckInventory("IsSprinting")>0)&&(CheckInventory("IsMoving")>2)&&(sm==0))
		{
			GiveInventory("Fatigue",15);
			SetActorVelocity(0,cos(GetActorAngle(0))*spd2,sin(GetActorAngle(0))*spd2,spd2*1.0/12,true,true);
		}
		else if (abs(ox-x)+abs(oy-y)>8.0) return;
		else if (fm>0)
		{
			GiveInventory("Fatigue",10);
			ThrustThingZ(0,spd2*2/5,0,1);
			if (sm!=0) ThrustThing((GetActorAngle(0)-0.13*sm/abs(sm))>>8,spd2*2/3,0,0);
				else ThrustThing(GetActorAngle(0)>>8,spd2*2/3,1,0);
		}
		else if (fm<0)
		{
			GiveInventory("Fatigue",10);
			ThrustThingZ(0,spd2*1/2,0,1);
			if (sm!=0) ThrustThing((GetActorAngle(0)-0.37*sm/abs(sm))>>8,spd2*11/20,0,0);
				else ThrustThing(GetActorAngle(0)>>8,-spd2*11/20,1,0);
		}
		else if (sm!=0)
		{
			GiveInventory("Fatigue",10);
			ThrustThingZ(0,spd2*2/5,0,1);
			ThrustThing((GetActorAngle(0)-0.25*sm/abs(sm))>>8,spd2*11/20,1,0);
		}
		GiveInventory("IsJumping",1);
		GiveInventory("IsMoving",10);
		SetWeapon(DisableWeapon());
	}
}

function int StumbleCheck(int fm,int sm)
{
	int stumblemod=0;
	if
	(
		((abs(fm)>6400)||(abs(sm)>6400)||(CheckInventory("IsSprinting"))) &&
		(!CheckFlag(0,"NOGRAVITY")) &&
		(GetActorProperty(0,APROP_Waterlevel)==0)
	)
	{
		GiveInventory("Stumbler",1);
		if (CheckInventory("IsSteppingDown"))
		{
			stumblemod=-0.7;
			//log(s:"DOWN");
		}
		else if (CheckInventory("IsSteppingUp"))
		{
			stumblemod=-0.6;
			//log(s:"UP");
		}
	}
	return stumblemod;
}

