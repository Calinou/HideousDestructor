
// ------------------------------------------------------------
//   Shotgun
// ------------------------------------------------------------

ACTOR Hunter : HDWeapon
{
	game Doom
	Weapon.SelectionOrder 202
	weapon.slotnumber 3
	weapon.ammotype ShotgunTube
	weapon.ammotype2 ShotgunQuickAmmo
	weapon.kickback 30
	weapon.bobrangex 0.21
	weapon.bobrangey 0.86
	scale 0.6
	inventory.pickupmessage "You got the pump-action shotgun!"
	obituary "%o was brutally pumped full of %k's hot, manly lead."
	States{
	select0:
		SHTG A 0 A_TakeInventory("ShotgunPocketLoading")
		goto select0big
	deselect0:
		SHTG A 0 A_TakeInventory("ShotgunPocketLoading")
		goto deselect0big
	firemode:
		BRFG A 0 A_JumpIfInventory("ShotgunAuto",0,2)
		BRFG A 0 A_GiveInventory("ShotgunAuto",1)
		goto firemodehold
		BRFG A 0 A_TakeInventory("ShotgunAuto")
		goto firemodehold
	firemodehold:
		SHTG A 1 A_WeaponReady(WRF_NOFIRE)
		BRFG A 0 A_JumpIfInventory("PressingFireMode",1,"firemodehold")
		goto Ready
	Ready:
		TNT1 A 0 A_SetCrosshair(21)
		TNT1 A 0 A_GiveInventory("IsWeaponReady",1)
		TNT1 A 0 A_GiveInventory("IsWeaponLong",1)
		TNT1 A 0 A_JumpIfInventory("PressingFireMode",1,"FireMode")
		SHTG A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM)
		TNT1 A 0 A_TakeInventory("IsInterrupting")
		TNT1 A 0 A_GiveInventory("ShotgunEmptyHand")
		TNT1 A 0 A_JumpIfInventory("PressingAltReload",1,"AltReload")
		TNT1 A 0 A_JumpIfInventory("PressingUnload",1,"Unload")
		goto ReadyEnd
	ReloadSS:
		SHTG A 0 A_JumpIfInventory("ShotgunQuickAmmo",0,"nope")
		SHTG A 1 offset(1,34)
		SHTG A 2 offset(2,34)
		SHTG A 3 offset(3,36)
	ReloadSSRestart:
		SHTG A 6 offset(3,35)
		SHTG A 9 offset(4,34) A_PlaySound("weapons/pocket")
	ReloadSSLoop1:
		SHTG A 0 A_JumpIfInventory("ShotgunHand",0,"ReloadSSLoop2")
		SHTG A 0 A_JumpIfInventory("HDShellAmmo",1,1)
		goto ReloadSSLoop2
		SHTG A 0 A_GiveInventory("ShotgunHand",1)
		SHTG A 0 A_TakeInventory("HDShellAmmo",1,TIF_NOTAKEINFINITE)
		loop
	ReloadSSLoop2:
		SHTG A 0 A_JumpIfInventory("ShotgunQuickAmmo",0,"ReloadSSEnd")
		SHTG A 0 A_JumpIfInventory("ShotgunHand",1,1)
		goto ReloadSSEnd
		SHTG A 0 A_GiveInventory("ShotgunQuickAmmo",1)
		SHTG A 0 A_TakeInventory("ShotgunHand",1)
		loop
	ReloadSSEnd:
		SHTG A 4 offset(3,34)
		SHTG A 0 {if(countinv("PressingUnload")+countinv("PressingReload")+countinv("PressingFire")+countinv("PressingAltfire")>0){return state("ReloadSSEndReal");}return state("");}
		SHTG A 0 A_JumpIfInventory("ShotgunQuickAmmo",0,2)
		SHTG A 0 A_JumpIfInventory("HDShellAmmo",1,"ReloadSSRestart")
	ReloadSSEndReal:
		SHTG A 3 offset(2,34)
		SHTG A 1 offset(1,34)
		goto nope
	AltHold:
	Fire:
	Hold:
		SHTG E 4 A_JumpIfInventory("ShotgunChamber",1,"Shoot")
		SHTG A 0 A_Refire
		goto Ready
	Interrupt:
		SHTG D 1 offset(0,34){
			A_GiveInventory("ShotgunEmptyHand",1);
			A_TakeInventory("ShotgunPocketLoading");
			A_PlaySound("weapons/huntopen",CHAN_WEAPON);
		}
	xloadabort:
		"----" A 1 A_WeaponReady(WRF_NOFIRE)
		"----" A 0{
			if(countinv("PressingUnload")+countinv("PressingReload")+countinv("PressingFire")+countinv("PressingAltfire")>0){return state("xloadabort");}return state("");
		}
		SHTG D 1 offset(0,36)
		SHTG D 1 offset(0,34)
		SHTG CB 3
		SHTG A 3
		goto Ready
	Shoot:
		SHTG F 0 A_JumpIfInventory("ShotgunChamber",0,2) //if you've got a spent shell then IDFA, no need to rack
		SHTG F 0 A_JumpIfInventory("HunterSpentShell",1,"nope")
		SHTG A 2
		SHTG A 0 A_GunFlash
		TNT1 A 0 A_GiveInventory("DecoBulleter00")
		SHTG A 0 offset(0,36) A_PlayWeaponSound("weapons/hunter")
		SHTG A 1{
			if(countinv("ShotgunAuto")<1)
			{ACS_NamedExecuteAlways("MuzzleClimb",0,26,((random(0,1)*2-1)*10),0);}
			else{ACS_NamedExecuteAlways("MuzzleClimb",0,34,((random(0,1)*2-1)*14),0);}
		}
		SHTG E 1 ACS_NamedExecuteAlways("MuzzleClimb",0,30,((random(0,1)*2-1)*10), 0)
		TNT1 A 0 A_Jump(2,2)
		TNT1 A 0 A_JumpIfInventory("ShotgunAuto",1,"ChamberAuto")
	HoldNoChamber:
	Althold:
		SHTG A 1 A_WeaponReady(WRF_NOFIRE)
		TNT1 A 0 A_ReFire
		goto Ready
	Altfire:
	Chamber:
		TNT1 A 0 A_SetCrosshair(21)
		TNT1 A 0 A_TakeInventory("IsWeaponReady")
		SHTG A 1 A_PlaySound ("weapons/shotgr")
		SHTG AE 1 A_SetPitch(pitch-frandom(1,1.6),SPF_INTERPOLATE)
		TNT1 A 0 A_Refire("LongStroke")
		SHTG EA 2 A_SetPitch(pitch+frandom(1,1.6),SPF_INTERPOLATE)
		goto ready
	LongStroke:
		TNT1 A 0 A_SetAngle(angle+frandom(1,2),SPF_INTERPOLATE)
		SHTG F 2
		SHTG F 0 A_GiveInventory("ChamberHunter",1)
		TNT1 A 0 A_SetAngle(angle-frandom(1,2),SPF_INTERPOLATE)
		SHTG EA 2 A_SetPitch(pitch+frandom(1,1.6),SPF_INTERPOLATE)
		goto ready
	ChamberAuto:
		SHTG A 1 A_Refire("ChamberAuto2")
		SHTG AAA 1 A_Weaponready(WRF_NOSECONDARY|WRF_NOBOB)
		goto ChamberAuto3
	ChamberAuto2:
		SHTG A 2
	ChamberAuto3:
		SHTG F 0 A_GiveInventory("ChamberHunter",1)
		SHTG A 0 A_Refire("HoldSemiAuto")
		goto Ready
	HoldSemiAuto:
		SHTG A 1
		SHTG A 0 A_Refire("HoldSemiAuto")
		goto Ready
	Flash:
		SHTF B 1 bright{
			A_Light2();
			HDFlashAlpha(-32);
		}
		TNT1 A 1 A_ZoomFactor(0.98,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		SHTF B 0 A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		SHTF B 0 A_AlertMonsters
		SHTF B 0 bright A_Light0
		SHTF B 0 A_TakeInventory("ShotgunChamber", 1)
		SHTF B 0 A_GiveInventory("HunterSpentShell", 1)
		Stop
	AltReload:
		TNT1 A 0 A_GiveInventory("ShotgunPocketLoading",1)
	Reload:
		SHTG A 0 A_JumpIf(countinv("ShotgunChamber")<1,"Reload0")
		SHTG A 0 A_JumpIfInventory("HunterSpentShell",1,"Reload0")
		SHTG A 0 A_JumpIfInventory("ShotgunTube",0,2)
		SHTG A 0 A_Jump(256,"Reload0")
		SHTG A 0 A_JumpIfInventory("ShotgunQuickAmmo",0,1)
		goto ReloadSS
		SHTG D 0 A_TakeInventory("ShotgunPocketLoading")
		goto Ready
	Reload0:
		TNT1 A 0 A_SetCrosshair(21)
		TNT1 A 0 A_TakeInventory("IsWeaponReady")
		SHTG A 1
		TNT1 A 0 A_TakeInventory("IsWeaponLong")
		SHTG BC 4 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-12,-24),random(-12,-24),0)
		SHTG D 1
		SHTG D 0 A_PlayWeaponSound ("weapons/huntopen")
	Reload1:
		SHTG D 1 offset(0,34)
		SHTG D 1 offset(0,36)
		SHTG D 1 offset(0,38)
		SHTG D 0 A_JumpIfInventory("HunterSpentShell",1,2)
		SHTG D 0 A_Jump(256,6)
		SHTG D 0 A_TakeInventory("HunterSpentShell")
		SHTG D 4 offset(0,36)
		SHTG D 4 offset(0,34)
		SHTG D 4 offset(0,36) A_SpawnItemEx("HDSpentShell",cos(pitch)*8,0,height-7-sin(pitch)*8,velx+cos(pitch)*cos(angle-random(86,90))*5,vely+cos(pitch)*sin(angle-random(86,90))*5,velz+sin(pitch)*random(4,6),0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		SHTG D 4 offset (0,40)
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo",1,2)
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",1,1)
		goto Reload3

		SHTG D 6 offset (0,40)

	ReloadFastThree:
		TNT1 A 0 A_JumpIfInventory("ShotgunPocketLoading",1,"ReloadPocketThree")
		TNT1 A 0 A_JumpIfHealthLower(40,"ReloadFastTwo")
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo",3,1)
		goto ReloadFastTwo
		TNT1 A 0 A_JumpIfInventory("ShotgunTube",5,"ReloadFastTwo")
		TNT1 A 0 A_GiveInventory("ShotgunHand",3)
		TNT1 A 0 A_TakeInventory("ShotgunQuickAmmo",3)
		goto ReloadFastEnd
	ReloadFastTwo:
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo",2,1)
		goto ReloadFastOne
		TNT1 A 0 A_JumpIfInventory("ShotgunTube",6,"ReloadFastOne")
		TNT1 A 0 A_GiveInventory("ShotgunHand",2)
		TNT1 A 0 A_TakeInventory("ShotgunQuickAmmo",2)
		goto ReloadFastEnd
	ReloadFastOne:
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo",1,1)
		goto ReloadPocketThree
		TNT1 A 0 A_GiveInventory("ShotgunHand",1)
		TNT1 A 0 A_TakeInventory("ShotgunQuickAmmo",1)
		goto ReloadFastEnd
	ReloadFastEnd:
		SHTG D 4 offset (0,40) A_JumpIf(health>40,1)
		SHTG D 3 offset (0,42) A_PlayWeaponSound ("weapons/pocket")
		SHTG D 4 offset (0,41)
		goto ReloadAShell

	ReloadPocketThree:
		TNT1 A 0 A_JumpIfHealthLower(40,"ReloadPocketTwo")
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",3,1)
		goto ReloadPocketTwo
		TNT1 A 0 A_JumpIfInventory("ShotgunTube",5,"ReloadPocketTwo")
		TNT1 A 0 A_GiveInventory("ShotgunHand",3)
		TNT1 A 0 A_TakeInventory("HDShellAmmo",3,TIF_NOTAKEINFINITE)
		goto ReloadPocketEnd
	ReloadPocketTwo:
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",2,1)
		goto ReloadPocketOne
		TNT1 A 0 A_JumpIfInventory("ShotgunTube",6,"ReloadPocketOne")
		TNT1 A 0 A_GiveInventory("ShotgunHand",2)
		TNT1 A 0 A_TakeInventory("HDShellAmmo",2,TIF_NOTAKEINFINITE)
		goto ReloadPocketEnd
	ReloadPocketOne:
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",1,1)
		goto Reload3
		TNT1 A 0 A_GiveInventory("ShotgunHand",1)
		TNT1 A 0 A_TakeInventory("HDShellAmmo",1,TIF_NOTAKEINFINITE)
		goto ReloadPocketEnd
	ReloadPocketEnd:
		SHTG D 4 offset (0,39)
		SHTG D 6 offset (0,40) A_JumpIf(health>40,1)
		SHTG D 4 offset (0,40) A_PlayWeaponSound ("weapons/pocket")
		SHTG D 8 offset (0,42) A_PlayWeaponSound ("weapons/pocket")
		SHTG D 6 offset (0,41) A_PlayWeaponSound ("weapons/pocket")
		SHTG D 6 offset (0,40)
		goto ReloadAShell

	ReloadAShell:
		SHTG E 0 A_PlayWeaponSound("weapons/huntreload")
		SHTG D 2 offset(0,36)
		SHTG D 4 offset(0,34){
			if(countinv("ShotgunChamber")<1){A_GiveInventory("ShotgunChamber",1);}
			else{A_GiveInventory("ShotgunTube",1);}
			A_TakeInventory("ShotgunHand",1);
		}

		SHTG DDDDDD 1 offset(0,33){
			if(countinv("PressingReload")+countinv("PressingUnload")+countinv("PressingFire")>0){return state("interrupt");}
			if(A_JumpIfInventory("ShotgunTube",0,"null")){return state("reload3");}
			if(countinv("ShotgunHand")<1){return state("reload1");}
			return state("");
		}goto reloadashell
	Reload3:
		SHTG D 0{
			A_TakeInventory("ShotgunHand");
			A_TakeInventory("ShotgunPocketLoading");
			A_TakeInventory("ShotgunPocketLoading");
		}
		SHTG D 6 offset(0,34)
		SHTG D 2 offset(0,34) A_PlayWeaponSound ("weapons/huntopen")
		SHTG D 1 offset(0,36)
		SHTG D 1 offset(0,34)
		SHTG CB 4
		goto ready
	Zoom:
	Cannibalize:
		SHTG A 2 offset (0,36)
		SHTG A 2 offset (0,40) A_PlayWeaponSound ("weapons/pocket")
		SHTG A 6 offset (0,42)
		SHTG A 4 offset (0,44)
		SHTG A 6 offset (0,42)
		TNT1 A 0 A_TakeInventory("ShotgunHand",999)
	CannibalizeCount:
		TNT1 A 0 A_JumpIfInventory("ShotgunHand",3,"CannibalizeFinish")
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",0,"CannibalizeFinish")
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",1,1)
		goto CannibalizeFinish
		TNT1 A 0 A_TakeInventory("ShotgunQuickAmmo2",1)
		TNT1 A 0 A_GiveInventory("ShotgunHand",1)
		TNT1 A 0 A_GiveInventory("HDShellAmmo",1)
		loop
	CannibalizeFinish:
		TNT1 A 0 A_TakeInventory("ShotgunHand")
		SHTG A 2 offset (0,36)
		goto Ready

	UnloadSS:
		SHTG A 0 A_JumpIfInventory("ShotgunQuickAmmo",1,1)
		goto nope
		SHTG A 2 offset(1,34) A_GiveInventory("ShotgunEmptyHand") //just in case
		SHTG A 1 offset(2,34)
		SHTG A 1 offset(3,36) A_PlaySound("weapons/pocket")
	UnloadSSLoop1:
		SHTG A 5 offset(4,36){	//from ss to hand
			//ShotgunHand is capped at 3 anyway
			A_GiveInventory("ShotgunHand",countinv("ShotgunQuickAmmo"));
			A_TakeInventory("ShotgunQuickAmmo",countinv("ShotgunHand"));
		}
		SHTG A 3 offset(5,37){	//pocket if there's space
			if(countinv("HDSHellAmmo")+countinv("ShotgunHand")<=AmmoCap("HDShellAmmo")){
				A_SetTics(8);
				A_WeaponReady(WRF_NOFIRE);
				A_PlaySound("weapons/pocket");
			}
		}
		SHTG A 0 A_GiveInventory("ShotgunEmptyHand")
		SHTG A 2 offset(4,36){	//decide whether to loop
			if(countinv("PressingUnload")+countinv("PressingReload")+countinv("PressingFire")+countinv("PressingAltfire")>0)
				{return state("UnloadSSEndReal");}
			else if(countinv("ShotgunQuickAmmo")>0)
				{return state("");}
			return state("UnloadSSEndReal");
		}
		goto UnloadSSLoop1
	UnloadSSEndReal:
		SHTG A 3 offset(4,35)
		SHTG A 2 offset(3,35)
		SHTG A 1 offset(2,34)
		SHTG A 1 offset(1,34)
		goto nope
	Unload:
		SHTG A 0 A_JumpIfInventory("ShotgunQuickAmmo",1,"UnloadSS")
		SHTG A 0 A_JumpIfInventory("HunterSpentShell",1,"Unload0")
		SHTG A 0 A_JumpIfInventory("ShotgunChamber",1,"Unload0")
		SHTG A 0 A_JumpIfInventory("ShotgunTube",1,"Unload0")
		goto nope
	Unload0:
		TNT1 A 0 A_SetCrosshair(21)
		TNT1 A 0 A_TakeInventory("IsWeaponReady",999)
		SHTG A 1
		TNT1 A 0 A_TakeInventory("IsWeaponLong",999)
		SHTG BC 4 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-12,-24),random(-12,-24),0)
		SHTG D 1 A_PlayWeaponSound ("weapons/huntopen")
	Unload1:
		SHTG D 1 offset(0,34)
		SHTG D 1 offset(0,36)
		SHTG D 1 offset(0,38)
		SHTG D 0{
			if(countinv("HunterSpentShell")+countinv("ShotgunChamber")>0)
			{return state("UnloadChamber");}
			return state("UnloadTube");
		}
	UnloadChamber:
		SHTG D 4 offset(0,36)
		SHTG D 4 offset(0,34)
		SHTG D 4 offset(0,36){
			if(countinv("ShotgunChamber")>0){
				A_PlaySound("weapons/huntreload",CHAN_WEAPON);
				if(!A_JumpIfInventory("HDShellAmmo",0,"null")){
					A_GiveInventory("HDShellAmmo",1);
					A_PlaySound("weapons/pocket",CHAN_BODY);
				}
				else{A_SpawnItemEx("HDFumblingShell",cos(pitch)*8,0,height-7-sin(pitch)*8,velx+cos(pitch)*cos(angle-random(86,90))*5,vely+cos(pitch)*sin(angle-random(86,90))*5,velz+sin(pitch)*random(4,6),0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);}
			}
			else if(countinv("HunterSpentShell")>0){A_SpawnItemEx("HDSpentShell",cos(pitch)*8,0,height-7-sin(pitch)*8,velx+cos(pitch)*cos(angle-random(86,90))*5,vely+cos(pitch)*sin(angle-random(86,90))*5,velz+sin(pitch)*random(4,6),0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);}
			A_TakeInventory("HunterSpentShell");
			A_TakeInventory("ShotgunChamber");
		}
		SHTG D 4 offset (0,40)
	UnloadTube:
		SHTG D 0 A_JumpIfInventory("ShotgunTube",1,1)
		goto Reload3
		SHTG D 6 offset (0,40)
	UnloadLoop1:
		SHTG A 0 A_JumpIfInventory("ShotgunHand",0,"UnloadLoop2")
		SHTG A 0 A_JumpIfInventory("ShotgunTube",1,1)
		goto UnloadLoop2
		SHTG A 0 A_GiveInventory("ShotgunHand",1)
		SHTG A 0 A_TakeInventory("ShotgunTube",1)
		SHTG D 8 offset (1,41)
		SHTG D 4 offset (0,40) A_PlaySound("weapons/huntreload")
		loop
	UnloadLoop2:
		SHTG A 0 A_JumpIfInventory("ShotgunHand",1,1)
		goto UnloadEnd
		SHTG A 0 A_JumpIfInventory("HDShellAmmo",0,3)
		SHTG A 0 A_TakeInventory("ShotgunHand",1)
		SHTG A 0 A_GiveInventory("HDShellAmmo",1)
		loop
		SHTG A 0 A_GiveInventory("ShotgunEmptyHand",1)
		loop
	UnloadEnd:
		SHTG D 6 offset(1,41)
		SHTG D 8 offset(1,42) A_PlaySound("weapons/pocket")
		SHTG D 6 {
			if (
				(countinv("ShotgunTube")<1)
				||(countinv("PressingUnload")+countinv("PressingReload")+countinv("PressingFire")+countinv("PressingAltfire")>0)
			){
				return state("xloadabort");
			}
			return state("");
		}
		goto Unloadloop1
	Spawn:
		TNT1 A 0 nodelay A_SpawnItemEx("HunterPickup",0,0,0,velx,vely,velz,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM)
		stop
		HUNT A -1
		stop
	spawn:
		TNT1 A 1
		TNT1 A 0 A_CheckProximity("spawndropped","PlayerPawn",20,1, CPXF_COUNTDEAD|CPXF_SETTARGET|CPXF_ANCESTOR|CPXF_CLOSEST|CPXF_NOZ)
	spawnfresh:
		TNT1 A 0 A_SpawnItemEx("HunterPickup",0,0,0,velx,vely,velz,0, SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_NOPOINTERS)
		stop
	spawndropped:
		TNT1 A 0 A_JumpIfInTargetInventory("Hunter",1,"spawnfresh")
		TNT1 A 0 A_SpawnItemEx("HunterPickup",0,0,0,velx,vely,velz,0, SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS)
		stop
	}
}
actor ChamberHunter:ActionItem{
	states{
	pickup:
		TNT1 A 0{
			if(countinv("ShotgunChamber")>0){A_SpawnItemEx("HDFumblingShell",cos(pitch)*8,0,height-7-sin(pitch)*8,velx+cos(pitch)*cos(angle-random(86,90))*5,vely+cos(pitch)*sin(angle-random(86,90))*5,velz+sin(pitch)*random(4,6),0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);}
			else if(countinv("HunterSpentShell")>0){A_SpawnItemEx("HDSpentShell",cos(pitch)*8,0,height-7-sin(pitch)*8,velx+cos(pitch)*cos(angle-random(86,90))*6,vely+cos(pitch)*sin(angle-random(86,90))*6,velz+sin(pitch)*random(5,7),0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);}
			A_TakeInventory("HunterSpentShell");
			A_TakeInventory("ShotgunChamber");
			if(countinv("ShotgunTube")>0){
				A_GiveInventory("ShotgunChamber");
				A_TakeInventory("ShotgunTube",1);
			}
		}fail
	}
}
actor ShotgunAuto : InventoryFlag{}
ACTOR ShotgunHand : InventoryFlag{inventory.maxamount 3}
ACTOR ShotgunChamber : Ammo
{
	inventory.maxamount 1
	ammo.backpackmaxamount 1
	+inventory.ignoreskill +inventory.untossable ammo.backpackamount 0
	states{spawn:TNT1 A 0 nodelay{return state("null");}stop}
}
ACTOR ShotgunTube : Ammo
{
	inventory.maxamount 7
	ammo.backpackmaxamount 7
	+inventory.ignoreskill +inventory.untossable ammo.backpackamount 0
	states{spawn:TNT1 A 0 nodelay{return state("null");}stop}
}
ACTOR HDShellAmmo : Ammo
{
	+inventory.ignoreskill
	inventory.maxamount 24
	ammo.backpackmaxamount 150
	ammo.backpackamount 0
	inventory.pickupmessage "Picked up a shotgun shell."
	scale 0.3
	states
	{
	spawn:
		SHL1 A -1
		stop
	}
}
ACTOR ShotgunQuickAmmo : Ammo
{
	inventory.maxamount 12
	ammo.backpackmaxamount 12
	+inventory.ignoreskill +inventory.untossable ammo.backpackamount 0
	states{spawn:TNT1 A 0 nodelay{return state("null");}stop}
}
ACTOR ShotgunQuickAmmo2 : Ammo
{
	inventory.maxamount 12
	ammo.backpackmaxamount 12
	+inventory.ignoreskill +inventory.untossable ammo.backpackamount 0
	states{spawn:TNT1 A 0 nodelay{return state("null");}stop}
}

actor ShotgunPocketLoading : InventoryFlag{}
actor HunterSpentShell : InventoryFlag{}
actor SlayerSpentShell1 : InventoryFlag{}
actor SlayerSpentShell2 : InventoryFlag{}
actor ShotgunEmptyHand : ActionItem
{
	states
	{
	pickup:
		TNT1 A 0 A_JumpIfInventory("ShotgunHand",1,1)
		fail
		TNT1 A 0 A_TakeInventory("ShotgunHand",1)
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",0,2)
		TNT1 A 0 A_GiveInventory("HDShellAmmo",1)
		loop
		TNT1 A 0 A_SpawnItemEx("HDFumblingShell",cos(pitch)*5,1,height-7-sin(pitch)*5,cos(pitch)*cos(angle)*random(1,4)+velx,cos(pitch)*sin(angle)*random(1,4)+vely,-sin(pitch)*random(1,4)+velz,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		loop
	}
}
actor HDSpentShell
{
	+missile
	+doombounce
	+bounceonactors
	+cannotpush
	-noteleport
	+forcexybillboard
	seesound "misc/casing2"
	scale 0.3
	height 2
	radius 2
	states
	{
	spawn:
		ESHL ABCDEFGH 2
		loop
	death:
		TNT1 A 0 A_ChangeFlag("missile",0)
		TNT1 A 0 A_ChangeFlag("doombounce",0)
		TNT1 A 0 A_Jump (256, 1,1,1,1,2,2,2,2,3,3,4)
		ESHL A -1
		stop
		ESHL E -1
		stop
		ESHL C -1
		stop
		ESHL G -1
		stop
	}
}
actor HDUnSpentShell : HDSpentShell
{
	scale 0.3
	states
	{
	spawn:
		ESHL ABCDE 2
		TNT1 A 0 A_GiveToTarget("HDShellAmmo",1)
		stop
	}
}
actor HDFumblingShell : HDSpentShell
{
	scale 0.3
	states
	{
	spawn:
		ESHL ABCDEFGH 2
		loop
	death:
		TNT1 A 0 A_SpawnItemEx("HDFumbledShell",0,0,0,velx,vely,velz,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION)
		stop
	}
}
actor HDFumbledShell : HDPickup
{
	scale 0.3
	+cannotpush
	inventory.pickupmessage "Picked up a shotgun shell."
	states
	{
	spawn:
		TNT1 A 0 A_Jump (256, 1,1,1,1,2,2,2,2,3,3,4)
		ESHL A -1
		stop
		ESHL E -1
		stop
		ESHL C -1
		stop
		ESHL G -1
		stop
	pickup:
		TNT1 A 0 A_GiveInventory("HDShellAmmo", 1)
		stop
	}
}



// ------------------------------------------------------------
//   Super Shotgun
// ------------------------------------------------------------

ACTOR Slayer : ZSSlayer
{
	game Doom
	weapon.selectionorder 203
	weapon.slotnumber 3
	weapon.ammotype1 "ShotgunQuickAmmo2" //not sure why the altammo display won't work without some ammotype1 definition here
	weapon.ammotype2 "ShotgunQuickAmmo2"
	inventory.pickupmessage "You got the double-barreled shotgun!"
	weapon.kickback 35
	weapon.bobrangex 0.18
	weapon.bobrangey 0.7
	scale 0.6
	obituary "%o was brutally pumped full of %k's hot, manly lead."
	states{
	select0:
		SHT2 A 0 A_TakeInventory("ShotgunPocketLoading")
		goto select0small
	deselect0:
		SHT2 A 0 A_TakeInventory("ShotgunPocketLoading")
		goto deselect0small
	Ready:
		TNT1 A 0 A_SetCrosshair(21)
		TNT1 A 0 A_GiveInventory("IsWeaponShort",1)
		TNT1 A 0 A_GiveInventory("IsWeaponReady",1)
		SHT2 A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM)
		TNT1 A 0 A_TakeInventory("WeaponBusy")
		TNT1 A 0 A_GiveInventory("ShotgunEmptyHand")
		TNT1 A 0 A_JumpIfInventory("PressingAltReload",1,"AltReload")
		TNT1 A 0 A_JumpIfInventory("PressingUnload",1,"Unload")
		goto ReadyEnd

	fire:
		SHT2 A 1 A_JumpIfInventory("ShellChamber1",1,1)
		goto hold
		TNT1 A 0 A_JumpIfInventory("ShellChamber2",1,2)
		TNT1 A 0 A_Jump(256,2)
		TNT1 A 0 A_JumpIfInventory("PressingAltfire",1,"both")
		TNT1 A 0 A_Overlay(11,"flashleft")
		TNT1 A 0 A_Refire
		goto ready
	altfire:
		SHT2 A 1 A_JumpIfInventory("ShellChamber2",1,1)
		goto althold
		TNT1 A 0 A_JumpIfInventory("ShellChamber1",1,2)
		TNT1 A 0 A_Jump(256,2)
		TNT1 A 0 A_JumpIfInventory("PressingFire",1,"both")
		TNT1 A 0 A_Overlay(12,"flashright")
		TNT1 A 0 A_Refire
		goto ready
	both:
		SHT2 A 1
		TNT1 A 0 A_GunFlash("flashboth")
		TNT1 A 0 A_Refire
		goto ready

	hold:
		TNT1 A 0 A_JumpIfInventory("ShellChamber2",1,1)
		goto holdall
		TNT1 A 0 A_JumpIfInventory("PressingAltfire",1,"altfire")
		goto holdall
	althold:
		TNT1 A 0 A_JumpIfInventory("ShellChamber1",1,1)
		goto holdall
		//TNT1 A 0 A_WeaponReady(WRF_NOSECONDARY)
		TNT1 A 0 A_JumpIfInventory("PressingFire",1,"fire")
		goto holdall
	holdall:
		SHT2 A 1 A_WeaponReady(WRF_NOFIRE)
		TNT1 A 0 A_Refire
		goto ready

	flashleft:
		TNT1 A 0 A_PlaySound("weapons/slayersingle",6)
		TNT1 A 0 A_ZoomFactor(0.98,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		TNT1 A 0 A_GiveInventory("DecoBulleter00f")
		TNT1 A 0 A_TakeInventory("ShellChamber1",1)
		TNT1 A 0 A_GiveInventory("SlayerSpentShell1",1)
		SHT1 J 1 bright{
			A_Light2();
			HDFlashAlpha(64,false,overlayid());
		}
		TNT1 A 0 A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		TNT1 A 1 A_Light0
		TNT1 AA 1 ACS_NamedExecuteAlways("MuzzleClimb",0,39,-16,0)
		goto flasheither
	flashright:
		TNT1 A 0 A_PlaySound("weapons/slayersingle",7)
		TNT1 A 0 A_ZoomFactor(0.98,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		TNT1 A 0 A_GiveInventory("DecoBulleter00f")
		TNT1 A 0 A_TakeInventory("ShellChamber2",1)
		TNT1 A 0 A_GiveInventory("SlayerSpentShell2",1)
		SHT1 N 1 bright{
			A_Light2();
			HDFlashAlpha(64,false,overlayid());
		}
		TNT1 A 0 A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		TNT1 A 1 A_Light0
		TNT1 AA 1 ACS_NamedExecuteAlways("MuzzleClimb",0,39,16,0)
		goto flasheither
	flasheither:
		TNT1 A 0 A_AlertMonsters
		stop
	flashboth:
		TNT1 A 0 A_PlaySound("weapons/slayersingle",CHAN_WEAPON)
		TNT1 A 0 A_PlaySound("weapons/slayersingle",6)
		TNT1 A 0 A_ZoomFactor(0.95,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		TNT1 A 0 A_GiveInventory("DecoBulleter00f2")
		TNT1 A 0 A_TakeInventory("ShellChamber1",1)
		TNT1 A 0 A_TakeInventory("ShellChamber2",1)
		TNT1 A 0 A_GiveInventory("SlayerSpentShell1",1)
		TNT1 A 0 A_GiveInventory("SlayerSpentShell2",1)
		SHT2 J 1 bright{
			A_Light2();
			HDFlashAlpha(128);
		}
		TNT1 A 0 A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		TNT1 A 1 A_Light0
		TNT1 AA 1 ACS_NamedExecuteAlways("MuzzleClimb",0, 80,-15,0)
		goto flasheither

	AltReload:
		TNT1 A 0 A_GiveInventory("ShotgunPocketLoading",1)
	Reload:
		TNT1 A 0 A_SetCrosshair(21)
		TNT1 A 0 A_TakeInventory("IsWeaponReady",999)
		TNT1 A 0 A_TakeInventory("IsWeaponShort",999)
		TNT1 A 0 A_JumpIfInventory("ShellChamber1",1,1)
		goto ReallyReload
		TNT1 A 0 A_JumpIfInventory("ShellChamber2",1,1)
		goto ReallyReload
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",0,1)
		goto ReloadSS
	ReloadFail:
		TNT1 A 0 A_TakeInventory("ShotgunPocketLoading",999)
		goto Ready
	ReallyReload:
		SHT2 A 0 A_JumpIfInventory("ShotgunPocketLoading",1,2)
		SHT2 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",1,2)
		SHT2 A 0 A_JumpIfInventory("HDShellAmmo",1,1)
		goto ReloadFail

		SH2G K 2 offset(0,34)
		SH2G K 2 offset(0,40)
		SH2G K 10 offset(0,46) A_PlaySound ("weapons/sshoto")
		SH2G K 2 offset(0,46) ACS_NamedExecuteAlways("MuzzleClimb",0,random(-12,-24),random(-12,-24),0)
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-12,-24),random(-12,-24),0)

	EjectEmpty:
		TNT1 A 0 A_JumpIfInventory("SlayerSpentShell1",1,2)
		TNT1 A 0 A_Jump(256,3)
		TNT1 A 0 A_SpawnItemEx("HDSpentShell",cos(pitch)*5,0,height-7-sin(pitch)*5,cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+velx,cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vely,-sin(pitch-45)*random(1,4)+velz,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_TakeInventory("SlayerSpentShell1",1)
		TNT1 A 0 A_JumpIfInventory("SlayerSpentShell2",1,2)
		TNT1 A 0 A_Jump(256,3)
		TNT1 A 0 A_SpawnItemEx("HDSpentShell",cos(pitch)*5,-1,height-7-sin(pitch)*5,cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+velx,cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vely,-sin(pitch-45)*random(1,4)+velz,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_TakeInventory("SlayerSpentShell2",1)
		TNT1 A 0 A_JumpIfInventory("ShellChamber1",1,"ReloadHalfFull")
		TNT1 A 0 A_JumpIfInventory("ShellChamber2",1,"ReloadHalfFull")
		goto ReloadEmpty

	ReloadHalfFull:
		TNT1 A 0 A_TakeInventory("ShellChamber1",1)
		TNT1 A 0 A_TakeInventory("ShellChamber2",1)
		TNT1 A 0 A_JumpIf(health>90,2)
		TNT1 A 0 A_JumpIfInventory("IsMoving",1,"ReloadHalfFullFumble")
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",0,"ReloadHalfFullFumble")
		TNT1 A 0 A_JumpIfHealthLower(66,2)
		TNT1 A 0 A_SpawnItemEx("HDUnspentShell",cos(pitch)*5,0,height-7-sin(pitch)*5,velx,vely,velz+1,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		goto ReloadEmpty
	ReloadHalfFullFumble:
		TNT1 A 0 A_SpawnItemEx("HDFumblingShell",cos(pitch)*5,-1,height-7-sin(pitch)*5,cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+velx,cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vely,-sin(pitch-45)*random(1,4)+velz,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		goto ReloadEmpty

	ReloadEmpty:
		SH2G L 3 offset(0,36)
		SH2G L 6 offset(0,34)
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",1,2)
		TNT1 A 0 A_Jump(256,2)
		TNT1 A 0 A_JumpIfInventory("ShotgunPocketLoading",1,2)
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",2,3)
		SH2G L 10 offset(0,36) A_PlaySound ("weapons/pocket")
		SH2G L 14 offset(0,35) A_PlaySound ("weapons/pocket")
		SH2G L 12 offset(0,34)
		SH2G E 6
		SH2G E 1 offset (0,36)
		SH2G F 3 offset (0,40)
		SH2G F 2 offset (0,44)
		goto ReloadHand

	ReloadHand:
		TNT1 A 0 A_TakeInventory("ShotgunHand",999)
	ReloadHand2:
		TNT1 A 0 A_JumpIfInventory("ShotgunHand",2,"ReloadChamber")
		TNT1 A 0 A_JumpIfInventory("ShotgunPocketLoading",1,5)
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",1,2)
		TNT1 A 0 A_Jump(256,3)
		TNT1 A 0 A_TakeInventory("ShotgunQuickAmmo2",1)
		TNT1 A 0 A_GiveInventory("ShotgunHand",1)
		loop
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",1,1)
		goto ReloadChamber
		TNT1 A 0 A_TakeInventory("HDShellAmmo",1,TIF_NOTAKEINFINITE)
		TNT1 A 0 A_GiveInventory("ShotgunHand",1)
		loop
	ReloadChamber:
		TNT1 A 0 A_JumpIfInventory("ShotgunHand",1,1)
		goto ReloadEnd
		TNT1 A 0 A_TakeInventory("ShotgunHand",1)
		TNT1 A 0 A_GiveInventory("ShellChamber1",1)
		TNT1 A 0 A_JumpIfInventory("ShotgunHand",1,1)
		goto ReloadEnd
		TNT1 A 0 A_TakeInventory("ShotgunHand",1)
		TNT1 A 0 A_GiveInventory("ShellChamber2",1)
		goto ReloadEnd

	ReloadEnd:
		TNT1 A 0 A_TakeInventory("ShotgunPocketLoading",999)
		TNT1 A 4
		TNT1 A 6 A_PlayWeaponSound ("weapons/sshotl")
		SH2G G 2 offset (0,46)
		SH2G G 2 offset (0,42)
		SH2G H 2 offset (0,42)
		SH2G H 0 A_PlayWeaponSound ("weapons/sshotc")
		SH2G H 5
		SHT2 A 3
		Goto Ready

	ReloadSS:
		SHT2 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",0,"nope")
		SHT2 A 1 offset(1,34)
		SHT2 A 2 offset(2,34)
		SHT2 A 3 offset(3,36)
	ReloadSSRestart:
		SHT2 A 6 offset(3,35)
		SHT2 A 9 offset(4,34) A_PlaySound("weapons/pocket")
	ReloadSSLoop1:
		SHT2 A 0 A_JumpIfInventory("ShotgunHand",0,"ReloadSSLoop2")
		SHT2 A 0 A_JumpIfInventory("HDShellAmmo",1,1)
		goto ReloadSSLoop2
		SHT2 A 0 A_GiveInventory("ShotgunHand",1)
		SHT2 A 0 A_TakeInventory("HDShellAmmo",1,TIF_NOTAKEINFINITE)
		loop
	ReloadSSLoop2:
		SHT2 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",0,"ReloadSSEnd")
		SHT2 A 0 A_JumpIfInventory("ShotgunHand",1,1)
		goto ReloadSSEnd
		SHT2 A 0 A_GiveInventory("ShotgunQuickAmmo2",1)
		SHT2 A 0 A_TakeInventory("ShotgunHand",1)
		loop
	ReloadSSEnd:
		SHT2 A 4 offset(3,34)
		SHT2 A 0 {if(countinv("PressingUnload")+countinv("PressingReload")+countinv("PressingFire")+countinv("PressingAltfire")>0){return state("ReloadSSEndReal");}return state("");}
		SHT2 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",0,2)
		SHTG A 0 A_JumpIfInventory("HDShellAmmo",1,"ReloadSSRestart")
	ReloadSSEndReal:
		SHT2 A 3 offset(2,34)
		SHT2 A 1 offset(1,34)
		goto nope
	UnloadSS:
		SHT2 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",1,1)
		goto nope
		SHT2 A 0 A_GiveInventory("ShotgunEmptyHand",1) //just in case
		SHT2 A 2 offset(2,34)
		SHT2 A 1 offset(3,36) A_PlaySound("weapons/pocket")
	UnloadSSLoop1:
		SHT2 A 5 offset(4,36){	//from ss to hand
			//ShotgunHand is capped at 3 anyway
			A_GiveInventory("ShotgunHand",countinv("ShotgunQuickAmmo2"));
			A_TakeInventory("ShotgunQuickAmmo2",countinv("ShotgunHand"));
		}
		SHT2 A 3 offset(5,37){	//pocket if not full
			if(countinv("HDSHellAmmo")+countinv("ShotgunHand")<=AmmoCap("HDShellAmmo")){
				A_SetTics(8);
				A_WeaponReady(WRF_NOFIRE);
				A_PlaySound("weapons/pocket");
			}
		}
		SHT2 A 0 A_GiveInventory("ShotgunEmptyHand")
		SHT2 A 2 offset(4,36){	//decide whether to loop
			if(countinv("PressingUnload")+countinv("PressingReload")+countinv("PressingFire")+countinv("PressingAltfire")>0)  
				{return state("UnloadSSEndReal");}
			else if(countinv("ShotgunQuickAmmo2")>0)
				{return state("");}
			return state("UnloadSSEndReal");
		}
		goto UnloadSSLoop1
	UnloadSSEndReal:
		SHT2 A 3 offset(4,35)
		SHT2 A 2 offset(3,35)
		SHT2 A 1 offset(2,34)
		goto nope
	Unload:
		SHT2 A 0 A_JumpIfInventory("ShotgunQuickAmmo2",1,"UnloadSS")
		SHT2 A 0 A_JumpIfInventory("ShellChamber1",1,"Unload0")
		SHT2 A 0 A_JumpIfInventory("ShellChamber2",1,"Unload0")
		SHT2 A 0 A_JumpIfInventory("SlayerSpentShell1",1,"Unload0")
		SHT2 A 0 A_JumpIfInventory("SlayerSpentShell2",1,"Unload0")
		goto nope
	Unload0:
		TNT1 A 0 A_SetCrosshair(21)
		TNT1 A 0 A_TakeInventory("IsWeaponReady",999)
		TNT1 A 0 A_TakeInventory("IsWeaponShort",999)
		SH2G K 2 offset(0,34)
		SH2G K 2 offset(0,40)
		SH2G K 10 offset(0,46) A_PlaySound ("weapons/sshoto")
		SH2G K 2 offset(0,46) ACS_NamedExecuteAlways("MuzzleClimb",0,random(-12,-24),random(-12,-24),0)
		TNT1 A 0 ACS_NamedExecuteAlways("MuzzleClimb",0,random(-12,-24),random(-12,-24),0)
	UnEjectEmpty:
		TNT1 A 0 A_JumpIfInventory("SlayerSpentShell1",1,2)
		TNT1 A 0 A_Jump(256,3)
		TNT1 A 0 A_SpawnItemEx("HDSpentShell",cos(pitch)*5,0,height-7-sin(pitch)*5,cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+velx,cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vely,-sin(pitch-45)*random(1,4)+velz,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_TakeInventory("SlayerSpentShell1",1)
		TNT1 A 0 A_JumpIfInventory("SlayerSpentShell2",1,2)
		TNT1 A 0 A_Jump(256,3)
		TNT1 A 0 A_SpawnItemEx("HDSpentShell",cos(pitch)*5,-1,height-7-sin(pitch)*5,cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+velx,cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vely,-sin(pitch-45)*random(1,4)+velz,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_TakeInventory("SlayerSpentShell2",1)
	UnloadFullCheck:
		TNT1 A 0 A_JumpIfInventory("ShellChamber1",1,"UnloadFull1")
		TNT1 A 0 A_JumpIfInventory("ShellChamber2",1,"UnloadFull2")
		goto ReloadEnd
	UnloadFull1:
		TNT1 A 0 A_TakeInventory("ShellChamber1",1)
		goto UnloadFull
	UnloadFull2:
		TNT1 A 0 A_TakeInventory("ShellChamber2",1)
		goto UnloadFull
	UnloadFull:
		TNT1 A 0 A_JumpIf(health>90,2)
		TNT1 A 0 A_JumpIfInventory("IsMoving",1,"UnloadFullFumble")
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",0,"UnloadFullFumble")
		TNT1 A 0 A_JumpIfHealthLower(80,"UnloadFullFumble")
		TNT1 A 0 A_SpawnItemEx("HDUnspentShell",cos(pitch)*5,0,height-7-sin(pitch)*5,velx,vely,velz+1,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		goto UnloadFullCheck
	UnloadFullFumble:
		TNT1 A 0 A_SpawnItemEx("HDFumblingShell",cos(pitch)*5,-1,height-7-sin(pitch)*5,cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+velx,cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vely,-sin(pitch-45)*random(1,4)+velz,0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH)
		goto UnloadFullCheck


	Zoom:
	Cannibalize:
		SHT2 A 2 offset (0,36)
		SHT2 A 2 offset (0,40) A_PlayWeaponSound ("weapons/pocket")
		SHT2 A 8 offset (0,42)
		SHT2 A 8 offset (0,44)
		SHT2 A 8 offset (0,42)
		TNT1 A 0 A_TakeInventory("ShotgunHand",999)
	CannibalizeCount:
		TNT1 A 0 A_JumpIfInventory("ShotgunHand",3,"CannibalizeFinish")
		TNT1 A 0 A_JumpIfInventory("HDShellAmmo",0,"CannibalizeFinish")
		TNT1 A 0 A_JumpIfInventory("ShotgunQuickAmmo",1,1)
		goto CannibalizeFinish
		TNT1 A 0 A_TakeInventory("ShotgunQuickAmmo",1)
		TNT1 A 0 A_GiveInventory("ShotgunHand",1)
		TNT1 A 0 A_GiveInventory("HDShellAmmo",1)
		loop
	CannibalizeFinish:
		TNT1 A 0 A_TakeInventory("ShotgunHand",999)
		SHT2 A 2 offset (0,36)
		goto Ready
	spawn:
		TNT1 A 1
		TNT1 A 0 A_CheckProximity("spawndropped","PlayerPawn",20,1, CPXF_COUNTDEAD|CPXF_SETTARGET|CPXF_ANCESTOR|CPXF_CLOSEST|CPXF_NOZ)
	spawnfresh:
		TNT1 A 0 A_SpawnItemEx("SlayerPickup",0,0,0,velx,vely,velz,0, SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_NOPOINTERS)
		stop
	spawndropped:
		TNT1 A 0 A_JumpIfInTargetInventory("Slayer",1,"spawnfresh")
		TNT1 A 0 A_SpawnItemEx("SlayerPickup",0,0,0,velx,vely,velz,0, SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS)
		stop
	}
}
ACTOR ShellChamber1 : Ammo
{
	+inventory.ignoreskill
	+inventory.untossable
	inventory.maxamount 1
	ammo.backpackmaxamount 1
	ammo.backpackamount 0
	states{spawn:TNT1 A 0 nodelay{return state("null");}stop}
}
ACTOR ShellChamber2 : Ammo
{
	+inventory.ignoreskill
	+inventory.untossable
	inventory.maxamount 1
	ammo.backpackmaxamount 1
	ammo.backpackamount 0
	states{spawn:TNT1 A 0 nodelay{return state("null");}stop}
}


// ------------------------------------------------------------
//   <s>Mags and </s>pickups
// ------------------------------------------------------------

actor HunterPickup : HDUPK replaces Shotgun
{
	scale 0.6
	states
	{
	spawn2:
		HUNT A 0 A_JumpIfInventory("ShotgunQuickAmmo",11,"spawn3")
		HUNT B 0 A_JumpIfInventory("ShotgunQuickAmmo",9,"spawn3")
		HUNT C 0 A_JumpIfInventory("ShotgunQuickAmmo",7,"spawn3")
		HUNT D 0 A_JumpIfInventory("ShotgunQuickAmmo",5,"spawn3")
		HUNT E 0 A_JumpIfInventory("ShotgunQuickAmmo",3,"spawn3")
		HUNT F 0 A_JumpIfInventory("ShotgunQuickAmmo",1,"spawn3")
		HUNT G 0
	spawn3:
		"----" A -1
	spawn:
		HUNT A 0 A_Stop
		"----" A 0 A_JumpIfInventory("Clip",1,"spawn2")
		"----" A 0 A_GiveInventory("Clip",1)
		"----" A 0 A_JumpIf(CheckClass("PlayerPawn",AAPTR_TARGET,true),"takeloop")
		"----" A 0 A_GiveInventory("ShotgunTube",8)
		"----" A 0 A_GiveInventory("ShotgunQuickAmmo",12)
		"----" A 0 A_GiveInventory("ShotgunChamber")
		"----" A 0 A_Jump(256,"spawn2")
	takeloop:
		"----" A 0{
			A_GiveToTarget("ShotgunEmptyHand");
			if(countinv("ShotgunTube",AAPTR_TARGET)>0){
				A_GiveInventory("ShotgunTube",countinv("ShotgunTube",AAPTR_TARGET));
				A_TakeFromTarget("ShotgunTube");
			}
			if(countinv("ShotgunQuickAmmo",AAPTR_TARGET)>0){
				A_GiveInventory("ShotgunQuickAmmo",countinv("ShotgunQuickAmmo",AAPTR_TARGET));
				A_TakeFromTarget("ShotgunQuickAmmo");
			}
			if(countinv("ShotgunAuto",AAPTR_TARGET)>0){
				A_GiveInventory("ShotgunAuto");
				A_TakeFromTarget("ShotgunAuto");
			}
			if(countinv("ShotgunChamber",AAPTR_TARGET)>0){
				A_GiveInventory("ShotgunChamber");
				A_TakeFromTarget("ShotgunChamber");
			}
			if(countinv("HunterSpentShell",AAPTR_TARGET)>0){
				A_GiveInventory("HunterSpentShell");
				A_TakeFromTarget("HunterSpentShell");
			}
		}goto spawn2
	give:
		"----" A 0 A_JumpIfInTargetInventory("Hunter",1,"spawn")
	givegun:
		"----" A 0 A_PlaySound("misc/w_pkup")
		"----" A 0 A_GiveToTarget("Hunter",1)
	givegunloop:
		"----" A 0{
			if(countinv("ShotgunTube")>0){
				A_GiveToTarget("ShotgunTube",countinv("ShotgunTube"));
				A_TakeInventory("ShotgunTube");
			}
			if(countinv("ShotgunQuickAmmo")>0){
				A_GiveToTarget("ShotgunQuickAmmo",countinv("ShotgunQuickAmmo"));
				A_TakeInventory("ShotgunQuickAmmo");
			}
			if(countinv("ShotgunAuto")>0){
				A_GiveToTarget("ShotgunAuto");
				A_TakeInventory("ShotgunAuto");
			}
			if(countinv("ShotgunChamber")>0){
				A_GiveToTarget("ShotgunChamber");
				A_TakeInventory("ShotgunChamber");
			}
			if(countinv("HunterSpentShell")>0){
				A_GiveToTarget("HunterSpentShell");
				A_TakeInventory("HunterSpentShell");
			}
		}goto givegunloopend
	}
}
actor ShotgunPickupDropped:HunterPickup
{
	states
	{
	spawn:
		HUNT A 0 A_Stop
		HUNT A 0 A_JumpIfInventory("Clip",1,"spawn2")
		HUNT A 0 A_GiveInventory("Clip",1)
		HUNT A 0 A_GiveInventory("ShotgunTube",random(1,7))
		HUNT A 0 A_Jump(24,2)
		HUNT A 0 A_GiveInventory("ShotgunChamber",1)
		HUNT A 0 A_JumpIfInventory("ShotgunChamber",0,3)
		HUNT A 0 A_Jump(64,2)
		HUNT A 0 A_GiveInventory("HunterSpentShell",1)
		HUNT A 0 A_Jump(64,2)
		HUNT A 0 A_GiveInventory("ShotgunAuto",1)
		HUNT A 0 A_Jump(12,"spawn2")
		HUNT A 0 A_GiveInventory("ShotgunQuickAmmo",random(1,12))
		goto spawn2
	}
}

actor SlayerPickup : HDUPK
{
	scale 0.6
	states
	{
	spawn2:
		SLAY A 0 A_JumpIfInventory("ShotgunQuickAmmo2",11,"spawn3")
		SLAY B 0 A_JumpIfInventory("ShotgunQuickAmmo2",9,"spawn3")
		SLAY C 0 A_JumpIfInventory("ShotgunQuickAmmo2",7,"spawn3")
		SLAY D 0 A_JumpIfInventory("ShotgunQuickAmmo2",5,"spawn3")
		SLAY E 0 A_JumpIfInventory("ShotgunQuickAmmo2",3,"spawn3")
		SLAY F 0 A_JumpIfInventory("ShotgunQuickAmmo2",1,"spawn3")
		SLAY G 0
	spawn3:
		"----" A -1
	spawn:
		SLAY A 0 A_Stop
		"----" A 0 A_JumpIfInventory("Clip",1,"spawn2")
		"----" A 0{
			if(!CheckLump("SHT2A0")){
				A_SpawnItemEx("HunterPickup",0,0,0,velx,vely,velz,0,
				SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPOINTERS);
				destroy();return;
			}
			else{A_GiveInventory("Clip",1);}
		}
		"----" A 0 A_JumpIf(CheckClass("PlayerPawn",AAPTR_TARGET,true),"takeloop")
		"----" A 0 A_GiveInventory("ShellChamber1",1)
		"----" A 0 A_GiveInventory("ShellChamber2",1)
		"----" A 0 A_GiveInventory("ShotgunQuickAmmo2",12)
		"----" A 0 A_Jump(256,"spawn2")
	takeloop:
		"----" A 0{
			A_GiveToTarget("ShotgunEmptyHand");
			if(countinv("ShotgunQuickAmmo2",AAPTR_TARGET)>0){  
				A_GiveInventory("ShotgunQuickAmmo2",countinv("ShotgunQuickAmmo2",AAPTR_TARGET));
				A_TakeFromTarget("ShotgunQuickAmmo2");
			}
		}goto take2
	take2:
		"----" A 0 A_JumpIfInTargetInventory("ShellChamber1",1,1)
		goto take3
		"----" A 0 A_TakeFromTarget("ShellChamber1",1)
		"----" A 0 A_GiveInventory("ShellChamber1",1)
	take3:
		"----" A 0 A_JumpIfInTargetInventory("ShellChamber2",1,1)
		goto take4
		"----" A 0 A_TakeFromTarget("ShellChamber2",1)
		"----" A 0 A_GiveInventory("ShellChamber2",1)
	take4:
		"----" A 0 A_JumpIfInTargetInventory("SlayerSpentShell1",1,1)
		goto take5
		"----" A 0 A_TakeFromTarget("SlayerSpentShell1",1)
		"----" A 0 A_GiveInventory("SlayerSpentShell1",1)
	take5:
		"----" A 0 A_JumpIfInTargetInventory("SlayerSpentShell2",1,1)
		goto spawn2
		"----" A 0 A_TakeFromTarget("SlayerSpentShell2",1)
		"----" A 0 A_GiveInventory("SlayerSpentShell2",1)
		goto spawn2
	give:
		"----" A 0 A_JumpIfInTargetInventory("Slayer",1,"spawn")
	givegun:
		"----" A 0 A_PlaySound("misc/w_pkup")
		"----" A 0 A_GiveToTarget("Slayer",1)
	givegunloop:
		"----" A 0 A_JumpIfInventory("ShotgunQuickAmmo2",1,1)
		goto givegun2
		"----" A 0 A_GiveToTarget("ShotgunQuickAmmo2",1)
		"----" A 0 A_TakeInventory("ShotgunQuickAmmo2",1)
		loop
	givegun2:
		"----" A 0 A_JumpIfInventory("ShellChamber1",1,1)
		goto givegun3
		"----" A 0 A_GiveToTarget("ShellChamber1",1)
		"----" A 0 A_TakeInventory("ShellChamber1",1)
	givegun3:
		"----" A 0 A_JumpIfInventory("ShellChamber2",1,1)
		goto givegun4
		"----" A 0 A_GiveToTarget("ShellChamber2",1)
		"----" A 0 A_TakeInventory("ShellChamber2",1)
	givegun4:
		"----" A 0 A_JumpIfInventory("SlayerSpentShell1",1,1)
		goto givegun5
		"----" A 0 A_GiveToTarget("SlayerSpentShell1",1)
		"----" A 0 A_TakeInventory("SlayerSpentShell1",1)
	givegun5:
		"----" A 0 A_JumpIfInventory("SlayerSpentShell2",1,1)
		goto givegunloopend
		"----" A 0 A_GiveToTarget("SlayerSpentShell2",1)
		"----" A 0 A_TakeInventory("SlayerSpentShell2",1)
		goto givegunloopend
	}
}

actor SuperShotgunPickupDropped : SlayerPickup
{
	states
	{
	spawn:
		SLAY A 0 A_Stop
		SLAY A 0 A_JumpIfInventory("Clip",1,"spawn2")
		SLAY A 0 A_GiveInventory("Clip",1)
		SLAY A 0 A_Jump(128,3)
		SLAY A 0 A_GiveInventory("ShellChamber1",1)
		SLAY A 0 A_Jump(256,3)
		SLAY A 0 A_Jump(128,2)
		SLAY A 0 A_GiveInventory("SlayerSpentShell1",1)

		SLAY A 0 A_Jump(128,2)
		SLAY A 0 A_GiveInventory("ShellChamber2",1)
		SLAY A 0 A_Jump(256,3)
		SLAY A 0 A_Jump(128,2)
		SLAY A 0 A_GiveInventory("SlayerSpentShell2",1)

		SLAY A 0 A_Jump(12,"spawn2")
		SLAY A 0 A_GiveInventory("ShotgunQuickAmmo2",random(1,12))
		goto spawn2
	}
}

actor ShellBoxPickup : HDUPK
{
	translation "160:167=80:95"
	scale 0.4
	states
	{
	spawn:
		SBOX A -1 A_Stop
	give:
		"----" A 0 A_JumpIfInTargetInventory("HDShellAmmo",0,"spawn")
		"----" A 0 A_GiveToTarget("HDShellAmmo",1)
		"----" A 0 A_GiveInventory("HDShellAmmo",1)
		"----" A 0 A_JumpIfInventory("HDShellAmmo",20,1)
		loop
		"----" A 0 A_PlaySound("weapons/pocket")
		TNT1 A 0
		stop
	}
}
actor ShellPickup : HDUPK
{
	scale 0.3
	states
	{
	spawn:
		SHEL A -1 A_Stop
	give:
		"----" A 0 A_JumpIfInventory("HDShellAmmo",1,2)
		"----" A 0 A_JumpIfInTargetInventory("HDShellAmmo",0,"spawn")
		"----" A 0 A_JumpIfInTargetInventory("HDShellAmmo",0,3)
		"----" A 0 A_GiveToTarget("HDShellAmmo",1)
		"----" A 0 A_Jump(256,2)
		"----" A 0 A_SpawnItemEx ("HDShellAmmo",0,random(-1,1),0,random(3,3),0,0,random(-3,3),SXF_NOCHECKPOSITION)
		"----" A 0 A_GiveInventory("HDShellAmmo",1)
		"----" A 0 A_JumpIfInventory("HDShellAmmo",4,1)
		loop
		"----" A 0 A_PlaySound("weapons/pocket")
		stop
	}
}
