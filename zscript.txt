version "2.4"

const HDCONST_MINDISTANTSOUND = 128;
const HDCONST_SPEEDOFSOUND = 512;
const HDCONST_SQRTTWO = 1.41421356;
const HDCONST_ONEOVERSQRTTWO = 0.70710678;

const HDMCT_HOLD = 0;
const HDMCT_RETREAT = 2;
const HDMCT_ADVANCE = 4;
const HDMCT_COVERFIRE = 8;
const HDMCT_AIMSHOOT = 16;



#include "zscript/function.txt"
#include "zscript/mob.txt"
#include "zscript/fire.txt"
#include "zscript/effect.txt"
#include "zscript/bullet.txt"
#include "zscript/player.txt"
#include "zscript/explosion.txt"
#include "zscript/fireball.txt"
#include "zscript/weapon.txt"

#include "zscript/pistol.txt"
#include "zscript/zm66.txt"
#include "zscript/shotgun.txt"
#include "zscript/rocket.txt"
#include "zscript/plasma.txt"
#include "zscript/grenade.txt"
#include "zscript/battlerifle.txt"
#include "zscript/brontornis.txt"

#include "zscript/imp.txt"
#include "zscript/shootman.txt"
#include "zscript/barrel.txt"

#include "zscript/decorations.txt"



//benchmark test
//native: 1442ms; hdlib.(as class): 11185ms;
//in actor itself: 9959ms; load struct: 8860ms; hdlib2.(as struct): 8900ms;
//basically: do not attempt to optimize unless you're expecting 10-15x better results
//as general rule, 2 lines of native functions >> 20 lines of simple VM instructions
struct HDLib2{
	static int OnePlusOne(){
		return 1+1;
	}
}



/*
vid_fps 1;summon cru;
vid_fps 1;summon fin;
*/

class Cru:Actor{
	double blah1;
	states{
	spawn:
		BAL1 A 1 nodelay{
			for(int i=0;i<1000000;i++){
				double bl=abs(pos.x-players[0].mo.pos.x);
				blah1=abs(pos.y-players[0].mo.pos.y);
				if(bl>blah1) blah1=bl;
				bl=abs(pos.z-players[0].mo.pos.z);
				if(bl>blah1) blah1=bl;
			}
//			A_LogInt(pos.z*1000);
		}wait;
	}
}
class Fin:Actor{
	double blah1;
	states{
	spawn:
		BAL1 A 1 nodelay{
			for(int i=0;i<1000000;i++){
				blah1=distance3d(players[0].mo);
			}
//			A_LogInt(pos.z*1000);
		}wait;
	}
}


